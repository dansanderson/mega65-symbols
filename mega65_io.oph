; Generated from: ../mega65-core/iomap.txt
; Date: 2022-06-11

.alias ETHCOMMAND_STOPTX $00  ; Immediately stop transmitting the current ethernet frame. Will cause a partially sent frame to be received, most likely resulting in the loss of that frame.
.alias STOPTX $00  ; Immediately stop transmitting the current ethernet frame. Will cause a partially sent frame to be received, most likely resulting in the loss of that frame.
.alias CPU_PORTDDR $0000000  ; 6510/45GS10 CPU port DDR
.alias PORTDDR $0000000  ; 6510/45GS10 CPU port DDR
.alias CPU_PORT $0000001  ; 6510/45GS10 CPU port data
.alias PORT $0000001  ; 6510/45GS10 CPU port data
.alias ETHCOMMAND_STARTTX $01  ; Transmit packet
.alias STARTTX $01  ; Transmit packet
.alias ETHCOMMAND_RXNORMAL $D0  ; Disable the effects of RXONLYONE
.alias RXNORMAL $D0  ; Disable the effects of RXONLYONE
.alias VIC2_S0X $D000  ; sprite N horizontal position
.alias S0X $D000  ; sprite N horizontal position
.alias VIC2_S0Y $D001  ; sprite N vertical position
.alias S0Y $D001  ; sprite N vertical position
.alias VIC2_S1X $D002  ; @SNX
.alias S1X $D002  ; @SNX
.alias VIC2_S1Y $D003  ; @SNY
.alias S1Y $D003  ; @SNY
.alias VIC2_S2X $D004  ; @SNX
.alias S2X $D004  ; @SNX
.alias VIC2_S2Y $D005  ; @SNY
.alias S2Y $D005  ; @SNY
.alias VIC2_S3X $D006  ; @SNX
.alias S3X $D006  ; @SNX
.alias VIC2_S3Y $D007  ; @SNY
.alias S3Y $D007  ; @SNY
.alias VIC2_S4X $D008  ; @SNX
.alias S4X $D008  ; @SNX
.alias VIC2_S4Y $D009  ; @SNY
.alias S4Y $D009  ; @SNY
.alias VIC2_S5X $D00A  ; @SNX
.alias S5X $D00A  ; @SNX
.alias VIC2_S5Y $D00B  ; @SNY
.alias S5Y $D00B  ; @SNY
.alias VIC2_S6X $D00C  ; @SNX
.alias S6X $D00C  ; @SNX
.alias VIC2_S6Y $D00D  ; @SNY
.alias S6Y $D00D  ; @SNY
.alias VIC2_S7X $D00E  ; @SNX
.alias S7X $D00E  ; @SNX
.alias VIC2_S7Y $D00F  ; @SNY
.alias S7Y $D00F  ; @SNY
.alias VIC2_SXMSB $D010  ; sprite horizontal position MSBs
.alias SXMSB $D010  ; sprite horizontal position MSBs
.alias VIC2_YSCL_ADDR $D011  ; 24/25 vertical smooth scroll (address)
.alias YSCL_ADDR $D011  ; 24/25 vertical smooth scroll (address)
.alias VIC2_YSCL_MASK 7  ; 24/25 vertical smooth scroll (bit mask)
.alias YSCL_MASK 7  ; 24/25 vertical smooth scroll (bit mask)
.alias VIC2_RSEL_ADDR $D011  ; 24/25 row select (address)
.alias RSEL_ADDR $D011  ; 24/25 row select (address)
.alias VIC2_RSEL_MASK 8  ; 24/25 row select (bit mask)
.alias RSEL_MASK 8  ; 24/25 row select (bit mask)
.alias VIC2_BLNK_ADDR $D011  ; disable display (address)
.alias BLNK_ADDR $D011  ; disable display (address)
.alias VIC2_BLNK_MASK 16  ; disable display (bit mask)
.alias BLNK_MASK 16  ; disable display (bit mask)
.alias VIC2_BMM_ADDR $D011  ; bitmap mode (address)
.alias BMM_ADDR $D011  ; bitmap mode (address)
.alias VIC2_BMM_MASK 32  ; bitmap mode (bit mask)
.alias BMM_MASK 32  ; bitmap mode (bit mask)
.alias VIC2_ECM_ADDR $D011  ; extended background mode (address)
.alias ECM_ADDR $D011  ; extended background mode (address)
.alias VIC2_ECM_MASK 64  ; extended background mode (bit mask)
.alias ECM_MASK 64  ; extended background mode (bit mask)
.alias VIC2_RC_ADDR $D011  ; raster compare bit 8 (address)
.alias RC_ADDR $D011  ; raster compare bit 8 (address)
.alias VIC2_RC_MASK 128  ; raster compare bit 8 (bit mask)
.alias RC_MASK 128  ; raster compare bit 8 (bit mask)
.alias VIC2_RC $D012  ; raster compare bits 0 to 7
.alias RC $D012  ; raster compare bits 0 to 7
.alias VIC2_LPX $D013  ; Coarse horizontal beam position (was lightpen X)
.alias LPX $D013  ; Coarse horizontal beam position (was lightpen X)
.alias VIC2_LPY $D014  ; Coarse vertical beam position (was lightpen Y)
.alias LPY $D014  ; Coarse vertical beam position (was lightpen Y)
.alias VIC2_SE $D015  ; sprite enable bits
.alias SE $D015  ; sprite enable bits
.alias VIC2_XSCL_ADDR $D016  ; horizontal smooth scroll (address)
.alias XSCL_ADDR $D016  ; horizontal smooth scroll (address)
.alias VIC2_XSCL_MASK 7  ; horizontal smooth scroll (bit mask)
.alias XSCL_MASK 7  ; horizontal smooth scroll (bit mask)
.alias VIC2_CSEL_ADDR $D016  ; 38/40 column select (address)
.alias CSEL_ADDR $D016  ; 38/40 column select (address)
.alias VIC2_CSEL_MASK 8  ; 38/40 column select (bit mask)
.alias CSEL_MASK 8  ; 38/40 column select (bit mask)
.alias VIC2_MCM_ADDR $D016  ; Multi-colour mode (address)
.alias MCM_ADDR $D016  ; Multi-colour mode (address)
.alias VIC2_MCM_MASK 16  ; Multi-colour mode (bit mask)
.alias MCM_MASK 16  ; Multi-colour mode (bit mask)
.alias VIC2_RST_ADDR $D016  ; Disables video output on MAX Machine(tm) VIC-II 6566. Ignored on normal C64s and the MEGA65 (address)
.alias VIC2_RST_MASK 32  ; Disables video output on MAX Machine(tm) VIC-II 6566. Ignored on normal C64s and the MEGA65 (bit mask)
.alias VIC2_SEXY $D017  ; sprite vertical expansion enable bits
.alias SEXY $D017  ; sprite vertical expansion enable bits
.alias VIC2_CB_ADDR $D018  ; character set address location ($\times$ 1KiB) (address)
.alias CB_ADDR $D018  ; character set address location ($\times$ 1KiB) (address)
.alias VIC2_CB_MASK 14  ; character set address location ($\times$ 1KiB) (bit mask)
.alias CB_MASK 14  ; character set address location ($\times$ 1KiB) (bit mask)
.alias VIC2_VS_ADDR $D018  ; screen address ($\times$ 1KiB) (address)
.alias VS_ADDR $D018  ; screen address ($\times$ 1KiB) (address)
.alias VIC2_VS_MASK 240  ; screen address ($\times$ 1KiB) (bit mask)
.alias VS_MASK 240  ; screen address ($\times$ 1KiB) (bit mask)
.alias VIC2_RIRQ_ADDR $D019  ; raster compare indicate or acknowledge (address)
.alias RIRQ_ADDR $D019  ; raster compare indicate or acknowledge (address)
.alias VIC2_RIRQ_MASK 1  ; raster compare indicate or acknowledge (bit mask)
.alias RIRQ_MASK 1  ; raster compare indicate or acknowledge (bit mask)
.alias VIC2_ISBC_ADDR $D019  ; sprite:bitmap collision indicate or acknowledge (address)
.alias ISBC_ADDR $D019  ; sprite:bitmap collision indicate or acknowledge (address)
.alias VIC2_ISBC_MASK 2  ; sprite:bitmap collision indicate or acknowledge (bit mask)
.alias ISBC_MASK 2  ; sprite:bitmap collision indicate or acknowledge (bit mask)
.alias VIC2_ISSC_ADDR $D019  ; sprite:sprite collision indicate or acknowledge (address)
.alias ISSC_ADDR $D019  ; sprite:sprite collision indicate or acknowledge (address)
.alias VIC2_ISSC_MASK 4  ; sprite:sprite collision indicate or acknowledge (bit mask)
.alias ISSC_MASK 4  ; sprite:sprite collision indicate or acknowledge (bit mask)
.alias VIC2_ILP_ADDR $D019  ; light pen indicate or acknowledge (address)
.alias ILP_ADDR $D019  ; light pen indicate or acknowledge (address)
.alias VIC2_ILP_MASK 8  ; light pen indicate or acknowledge (bit mask)
.alias ILP_MASK 8  ; light pen indicate or acknowledge (bit mask)
.alias VIC2_MRIRQ_ADDR $D01A  ; mask raster IRQ (address)
.alias MRIRQ_ADDR $D01A  ; mask raster IRQ (address)
.alias VIC2_MRIRQ_MASK 1  ; mask raster IRQ (bit mask)
.alias MRIRQ_MASK 1  ; mask raster IRQ (bit mask)
.alias VIC2_MISBC_ADDR $D01A  ; mask sprite:bitmap collision IRQ (address)
.alias MISBC_ADDR $D01A  ; mask sprite:bitmap collision IRQ (address)
.alias VIC2_MISBC_MASK 2  ; mask sprite:bitmap collision IRQ (bit mask)
.alias MISBC_MASK 2  ; mask sprite:bitmap collision IRQ (bit mask)
.alias VIC2_MISSC_ADDR $D01A  ; mask sprite:sprite collision IRQ (address)
.alias MISSC_ADDR $D01A  ; mask sprite:sprite collision IRQ (address)
.alias VIC2_MISSC_MASK 4  ; mask sprite:sprite collision IRQ (bit mask)
.alias MISSC_MASK 4  ; mask sprite:sprite collision IRQ (bit mask)
.alias VIC2_BSP $D01B  ; sprite background priority bits
.alias BSP $D01B  ; sprite background priority bits
.alias VIC2_SCM $D01C  ; sprite multicolour enable bits
.alias SCM $D01C  ; sprite multicolour enable bits
.alias VIC2_SEXX $D01D  ; sprite horizontal expansion enable bits
.alias SEXX $D01D  ; sprite horizontal expansion enable bits
.alias VIC2_SSC $D01E  ; sprite/sprite collision indicate bits
.alias SSC $D01E  ; sprite/sprite collision indicate bits
.alias VIC2_SBC $D01F  ; sprite/foreground collision indicate bits
.alias _SBC $D01F  ; sprite/foreground collision indicate bits
.alias VIC2_BORDERCOL_ADDR $D020  ; display border colour (16 colour) (address)
.alias VIC2_BORDERCOL_MASK 15  ; display border colour (16 colour) (bit mask)
.alias VIC3_BORDERCOL_ADDR $D020  ; display border colour (256 colour) (address)
.alias VIC3_BORDERCOL_MASK 255  ; display border colour (256 colour) (bit mask)
.alias VIC4_BORDERCOL_ADDR $D020  ; display border colour (256 colour) (address)
.alias VIC4_BORDERCOL_MASK 255  ; display border colour (256 colour) (bit mask)
.alias VIC2_SCREENCOL_ADDR $D021  ; screen colour (16 colour) (address)
.alias VIC2_SCREENCOL_MASK 15  ; screen colour (16 colour) (bit mask)
.alias VIC3_SCREENCOL_ADDR $D021  ; screen colour (256 colour) (address)
.alias VIC3_SCREENCOL_MASK 255  ; screen colour (256 colour) (bit mask)
.alias VIC4_SCREENCOL_ADDR $D021  ; screen colour (256 colour) (address)
.alias VIC4_SCREENCOL_MASK 255  ; screen colour (256 colour) (bit mask)
.alias VIC2_MC1_ADDR $D022  ; multi-colour 1 (16 colour) (address)
.alias VIC2_MC1_MASK 15  ; multi-colour 1 (16 colour) (bit mask)
.alias VIC3_MC1_ADDR $D022  ; multi-colour 1 (256 colour) (address)
.alias VIC3_MC1_MASK 255  ; multi-colour 1 (256 colour) (bit mask)
.alias VIC4_MC1_ADDR $D022  ; multi-colour 1 (256 colour) (address)
.alias VIC4_MC1_MASK 255  ; multi-colour 1 (256 colour) (bit mask)
.alias VIC2_MC2_ADDR $D023  ; multi-colour 2 (16 colour) (address)
.alias VIC2_MC2_MASK 15  ; multi-colour 2 (16 colour) (bit mask)
.alias VIC3_MC2_ADDR $D023  ; multi-colour 2 (256 colour) (address)
.alias VIC3_MC2_MASK 255  ; multi-colour 2 (256 colour) (bit mask)
.alias VIC4_MC2_ADDR $D023  ; multi-colour 2 (256 colour) (address)
.alias VIC4_MC2_MASK 255  ; multi-colour 2 (256 colour) (bit mask)
.alias VIC2_MC3_ADDR $D024  ; multi-colour 3 (16 colour) (address)
.alias VIC2_MC3_MASK 15  ; multi-colour 3 (16 colour) (bit mask)
.alias VIC3_MC3_ADDR $D024  ; multi-colour 3 (256 colour) (address)
.alias VIC3_MC3_MASK 255  ; multi-colour 3 (256 colour) (bit mask)
.alias VIC4_MC3_ADDR $D024  ; multi-colour 3 (256 colour) (address)
.alias VIC4_MC3_MASK 255  ; multi-colour 3 (256 colour) (bit mask)
.alias VIC2_SPRMC0 $D025  ; Sprite multi-colour 0
.alias VIC3_SPRMC0 $D025  ; Sprite multi-colour 0 (8-bit for selection of any palette colour)
.alias VIC4_SPRMC0 $D025  ; Sprite multi-colour 0 (8-bit for selection of any palette colour)
.alias VIC2_SPRMC1 $D026  ; Sprite multi-colour 1
.alias VIC3_SPRMC1 $D026  ; Sprite multi-colour 1 (8-bit for selection of any palette colour)
.alias VIC4_SPRMC1 $D026  ; Sprite multi-colour 1 (8-bit for selection of any palette colour)
.alias VIC2_SPR0COL $D027  ; sprite N colour / 16-colour sprite transparency colour (lower nybl)
.alias SPR0COL $D027  ; sprite N colour / 16-colour sprite transparency colour (lower nybl)
.alias VIC2_SPR1COL $D028  ; @SPRNCOL
.alias SPR1COL $D028  ; @SPRNCOL
.alias VIC2_SPR2COL $D029  ; @SPRNCOL
.alias SPR2COL $D029  ; @SPRNCOL
.alias VIC2_SPR3COL $D02A  ; @SPRNCOL
.alias SPR3COL $D02A  ; @SPRNCOL
.alias VIC2_SPR4COL $D02B  ; @SPRNCOL
.alias SPR4COL $D02B  ; @SPRNCOL
.alias VIC2_SPR5COL $D02C  ; @SPRNCOL
.alias SPR5COL $D02C  ; @SPRNCOL
.alias VIC2_SPR6COL $D02D  ; @SPRNCOL
.alias SPR6COL $D02D  ; @SPRNCOL
.alias VIC2_SPR7COL $D02E  ; @SPRNCOL
.alias SPR7COL $D02E  ; @SPRNCOL
.alias VIC3_KEY $D02F  ; Write $A5 then $96 to enable C65/VIC-III IO registers
.alias VIC4_KEY $D02F  ; Write $45 then $54 to map 45E100 ethernet controller buffers to $D000-$DFFF
.alias GS_VIC4_KEY $D02F  ; Write $47 then $53 to enable C65GS/VIC-IV IO registers
.alias SUMMARY_VIC_III $D030  ; Control Register A
.alias VIC2_C128_FAST_ADDR $D030  ; 2MHz select (for C128 2MHz emulation) (address)
.alias C128_FAST_ADDR $D030  ; 2MHz select (for C128 2MHz emulation) (address)
.alias VIC2_C128_FAST_MASK 1  ; 2MHz select (for C128 2MHz emulation) (bit mask)
.alias C128_FAST_MASK 1  ; 2MHz select (for C128 2MHz emulation) (bit mask)
.alias VIC3_CRAM2K_ADDR $D030  ; Map 2nd KB of colour RAM @ $DC00-$DFFF (address)
.alias CRAM2K_ADDR $D030  ; Map 2nd KB of colour RAM @ $DC00-$DFFF (address)
.alias VIC3_CRAM2K_MASK 1  ; Map 2nd KB of colour RAM @ $DC00-$DFFF (bit mask)
.alias CRAM2K_MASK 1  ; Map 2nd KB of colour RAM @ $DC00-$DFFF (bit mask)
.alias VIC3_EXTSYNC_ADDR $D030  ; Enable external video sync (genlock input) (address)
.alias EXTSYNC_ADDR $D030  ; Enable external video sync (genlock input) (address)
.alias VIC3_EXTSYNC_MASK 2  ; Enable external video sync (genlock input) (bit mask)
.alias EXTSYNC_MASK 2  ; Enable external video sync (genlock input) (bit mask)
.alias VIC3_PAL_ADDR $D030  ; Use PALETTE ROM (0) or RAM (1) entries for colours 0 - 15 (address)
.alias PAL_ADDR $D030  ; Use PALETTE ROM (0) or RAM (1) entries for colours 0 - 15 (address)
.alias VIC3_PAL_MASK 4  ; Use PALETTE ROM (0) or RAM (1) entries for colours 0 - 15 (bit mask)
.alias PAL_MASK 4  ; Use PALETTE ROM (0) or RAM (1) entries for colours 0 - 15 (bit mask)
.alias VIC3_ROM8_ADDR $D030  ; Map C65 ROM @ $8000 (address)
.alias ROM8_ADDR $D030  ; Map C65 ROM @ $8000 (address)
.alias VIC3_ROM8_MASK 8  ; Map C65 ROM @ $8000 (bit mask)
.alias ROM8_MASK 8  ; Map C65 ROM @ $8000 (bit mask)
.alias VIC3_ROMA_ADDR $D030  ; Map C65 ROM @ $A000 (address)
.alias ROMA_ADDR $D030  ; Map C65 ROM @ $A000 (address)
.alias VIC3_ROMA_MASK 16  ; Map C65 ROM @ $A000 (bit mask)
.alias ROMA_MASK 16  ; Map C65 ROM @ $A000 (bit mask)
.alias VIC3_ROMC_ADDR $D030  ; Map C65 ROM @ $C000 (address)
.alias ROMC_ADDR $D030  ; Map C65 ROM @ $C000 (address)
.alias VIC3_ROMC_MASK 32  ; Map C65 ROM @ $C000 (bit mask)
.alias ROMC_MASK 32  ; Map C65 ROM @ $C000 (bit mask)
.alias VIC3_CROM9_ADDR $D030  ; Select between C64 and C65 charset. (address)
.alias CROM9_ADDR $D030  ; Select between C64 and C65 charset. (address)
.alias VIC3_CROM9_MASK 64  ; Select between C64 and C65 charset. (bit mask)
.alias CROM9_MASK 64  ; Select between C64 and C65 charset. (bit mask)
.alias VIC3_ROME_ADDR $D030  ; Map C65 ROM @ $E000 (address)
.alias ROME_ADDR $D030  ; Map C65 ROM @ $E000 (address)
.alias VIC3_ROME_MASK 128  ; Map C65 ROM @ $E000 (bit mask)
.alias ROME_MASK 128  ; Map C65 ROM @ $E000 (bit mask)
.alias C65_SUMMARY_VIC_III $D031  ; Control Register B
.alias VIC3_INT_ADDR $D031  ; Enable VIC-III interlaced mode (address)
.alias INT_ADDR $D031  ; Enable VIC-III interlaced mode (address)
.alias VIC3_INT_MASK 1  ; Enable VIC-III interlaced mode (bit mask)
.alias INT_MASK 1  ; Enable VIC-III interlaced mode (bit mask)
.alias VIC3_MONO_ADDR $D031  ; Enable VIC-III MONO video output (not implemented) (address)
.alias MONO_ADDR $D031  ; Enable VIC-III MONO video output (not implemented) (address)
.alias VIC3_MONO_MASK 2  ; Enable VIC-III MONO video output (not implemented) (bit mask)
.alias MONO_MASK 2  ; Enable VIC-III MONO video output (not implemented) (bit mask)
.alias VIC3_H1280_ADDR $D031  ; Enable 1280 horizontal pixels (not implemented) (address)
.alias H1280_ADDR $D031  ; Enable 1280 horizontal pixels (not implemented) (address)
.alias VIC3_H1280_MASK 4  ; Enable 1280 horizontal pixels (not implemented) (bit mask)
.alias H1280_MASK 4  ; Enable 1280 horizontal pixels (not implemented) (bit mask)
.alias VIC3_V400_ADDR $D031  ; Enable 400 vertical pixels (address)
.alias V400_ADDR $D031  ; Enable 400 vertical pixels (address)
.alias VIC3_V400_MASK 8  ; Enable 400 vertical pixels (bit mask)
.alias V400_MASK 8  ; Enable 400 vertical pixels (bit mask)
.alias VIC3_BPM_ADDR $D031  ; Bit-Plane Mode (address)
.alias BPM_ADDR $D031  ; Bit-Plane Mode (address)
.alias VIC3_BPM_MASK 16  ; Bit-Plane Mode (bit mask)
.alias BPM_MASK 16  ; Bit-Plane Mode (bit mask)
.alias VIC3_ATTR_ADDR $D031  ; Enable extended attributes and 8 bit colour entries (address)
.alias ATTR_ADDR $D031  ; Enable extended attributes and 8 bit colour entries (address)
.alias VIC3_ATTR_MASK 32  ; Enable extended attributes and 8 bit colour entries (bit mask)
.alias ATTR_MASK 32  ; Enable extended attributes and 8 bit colour entries (bit mask)
.alias VIC3_FAST_ADDR $D031  ; Enable C65 FAST mode (~3.5MHz) (address)
.alias FAST_ADDR $D031  ; Enable C65 FAST mode (~3.5MHz) (address)
.alias VIC3_FAST_MASK 64  ; Enable C65 FAST mode (~3.5MHz) (bit mask)
.alias FAST_MASK 64  ; Enable C65 FAST mode (~3.5MHz) (bit mask)
.alias VIC3_H640_ADDR $D031  ; Enable C64 640 horizontal pixels / 80 column mode (address)
.alias H640_ADDR $D031  ; Enable C64 640 horizontal pixels / 80 column mode (address)
.alias VIC3_H640_MASK 128  ; Enable C64 640 horizontal pixels / 80 column mode (bit mask)
.alias H640_MASK 128  ; Enable C64 640 horizontal pixels / 80 column mode (bit mask)
.alias VIC3_B0ADEVN_ADDR $D033  ; Bitplane X address, even lines (address)
.alias B0ADEVN_ADDR $D033  ; Bitplane X address, even lines (address)
.alias VIC3_B0ADEVN_MASK 14  ; Bitplane X address, even lines (bit mask)
.alias B0ADEVN_MASK 14  ; Bitplane X address, even lines (bit mask)
.alias VIC3_B0ADODD_ADDR $D033  ; Bitplane X address, odd lines (address)
.alias B0ADODD_ADDR $D033  ; Bitplane X address, odd lines (address)
.alias VIC3_B0ADODD_MASK 224  ; Bitplane X address, odd lines (bit mask)
.alias B0ADODD_MASK 224  ; Bitplane X address, odd lines (bit mask)
.alias VIC3_B1ADEVN_ADDR $D034  ; @BXADEVN (address)
.alias B1ADEVN_ADDR $D034  ; @BXADEVN (address)
.alias VIC3_B1ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias B1ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias VIC3_B1ADODD_ADDR $D034  ; @BXADODD (address)
.alias B1ADODD_ADDR $D034  ; @BXADODD (address)
.alias VIC3_B1ADODD_MASK 224  ; @BXADODD (bit mask)
.alias B1ADODD_MASK 224  ; @BXADODD (bit mask)
.alias VIC3_B2ADEVN_ADDR $D035  ; @BXADEVN (address)
.alias B2ADEVN_ADDR $D035  ; @BXADEVN (address)
.alias VIC3_B2ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias B2ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias VIC3_B2ADODD_ADDR $D035  ; @BXADODD (address)
.alias B2ADODD_ADDR $D035  ; @BXADODD (address)
.alias VIC3_B2ADODD_MASK 224  ; @BXADODD (bit mask)
.alias B2ADODD_MASK 224  ; @BXADODD (bit mask)
.alias VIC3_B3ADEVN_ADDR $D036  ; @BXADEVN (address)
.alias B3ADEVN_ADDR $D036  ; @BXADEVN (address)
.alias VIC3_B3ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias B3ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias VIC3_B3ADODD_ADDR $D036  ; @BXADODD (address)
.alias B3ADODD_ADDR $D036  ; @BXADODD (address)
.alias VIC3_B3ADODD_MASK 224  ; @BXADODD (bit mask)
.alias B3ADODD_MASK 224  ; @BXADODD (bit mask)
.alias VIC3_B4ADEVN_ADDR $D037  ; @BXADEVN (address)
.alias B4ADEVN_ADDR $D037  ; @BXADEVN (address)
.alias VIC3_B4ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias B4ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias VIC3_B4ADODD_ADDR $D037  ; @BXADODD (address)
.alias B4ADODD_ADDR $D037  ; @BXADODD (address)
.alias VIC3_B4ADODD_MASK 224  ; @BXADODD (bit mask)
.alias B4ADODD_MASK 224  ; @BXADODD (bit mask)
.alias VIC3_B5ADEVN_ADDR $D038  ; @BXADEVN (address)
.alias B5ADEVN_ADDR $D038  ; @BXADEVN (address)
.alias VIC3_B5ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias B5ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias VIC3_B5ADODD_ADDR $D038  ; @BXADODD (address)
.alias B5ADODD_ADDR $D038  ; @BXADODD (address)
.alias VIC3_B5ADODD_MASK 224  ; @BXADODD (bit mask)
.alias B5ADODD_MASK 224  ; @BXADODD (bit mask)
.alias VIC3_B6ADEVN_ADDR $D039  ; @BXADEVN (address)
.alias B6ADEVN_ADDR $D039  ; @BXADEVN (address)
.alias VIC3_B6ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias B6ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias VIC3_B6ADODD_ADDR $D039  ; @BXADODD (address)
.alias B6ADODD_ADDR $D039  ; @BXADODD (address)
.alias VIC3_B6ADODD_MASK 224  ; @BXADODD (bit mask)
.alias B6ADODD_MASK 224  ; @BXADODD (bit mask)
.alias VIC3_B7ADEVN_ADDR $D03A  ; @BXADEVN (address)
.alias B7ADEVN_ADDR $D03A  ; @BXADEVN (address)
.alias VIC3_B7ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias B7ADEVN_MASK 14  ; @BXADEVN (bit mask)
.alias VIC3_B7ADODD_ADDR $D03A  ; @BXADODD (address)
.alias B7ADODD_ADDR $D03A  ; @BXADODD (address)
.alias VIC3_B7ADODD_MASK 224  ; @BXADODD (bit mask)
.alias B7ADODD_MASK 224  ; @BXADODD (bit mask)
.alias VIC3_BPCOMP $D03B  ; Complement bitplane flags
.alias BPCOMP $D03B  ; Complement bitplane flags
.alias VIC3_BPX $D03C  ; Bitplane X
.alias BPX $D03C  ; Bitplane X
.alias VIC3_BPY $D03D  ; Bitplane Y
.alias BPY $D03D  ; Bitplane Y
.alias VIC3_HPOS $D03E  ; Bitplane X Offset
.alias HPOS $D03E  ; Bitplane X Offset
.alias VIC3_VPOS $D03F  ; Bitplane Y Offset
.alias VPOS $D03F  ; Bitplane Y Offset
.alias VIC3_B0PIX $D040  ; Display Address Translater (DAT) Bitplane N port
.alias B0PIX $D040  ; Display Address Translater (DAT) Bitplane N port
.alias VIC3_B1PIX $D041  ; @BNPIX
.alias B1PIX $D041  ; @BNPIX
.alias VIC3_B2PIX $D042  ; @BNPIX
.alias B2PIX $D042  ; @BNPIX
.alias VIC3_B3PIX $D043  ; @BNPIX
.alias B3PIX $D043  ; @BNPIX
.alias VIC3_B4PIX $D044  ; @BNPIX
.alias B4PIX $D044  ; @BNPIX
.alias VIC3_B5PIX $D045  ; @BNPIX
.alias B5PIX $D045  ; @BNPIX
.alias VIC3_B6PIX $D046  ; @BNPIX
.alias B6PIX $D046  ; @BNPIX
.alias VIC3_B7PIX $D047  ; @BNPIX
.alias B7PIX $D047  ; @BNPIX
.alias VIC4_TBDRPOS $D048  ; top border position
.alias TBDRPOS $D048  ; top border position
.alias VIC4_TBDRPOS_ADDR $D049  ; top border position MSB (address)
.alias TBDRPOS_ADDR $D049  ; top border position MSB (address)
.alias VIC4_TBDRPOS_MASK 15  ; top border position MSB (bit mask)
.alias TBDRPOS_MASK 15  ; top border position MSB (bit mask)
.alias VIC4_SPRBPMEN_ADDR $D049  ; Sprite bitplane-modify-mode enables (address)
.alias VIC4_SPRBPMEN_MASK 240  ; Sprite bitplane-modify-mode enables (bit mask)
.alias VIC4_BBDRPOS $D04A  ; bottom border position
.alias BBDRPOS $D04A  ; bottom border position
.alias VIC4_BBDRPOS_ADDR $D04B  ; bottom border position (address)
.alias BBDRPOS_ADDR $D04B  ; bottom border position (address)
.alias VIC4_BBDRPOS_MASK 15  ; bottom border position (bit mask)
.alias BBDRPOS_MASK 15  ; bottom border position (bit mask)
.alias GS_VIC4_SPRBPMEN_ADDR $D04B  ; Sprite bitplane-modify-mode enables (address)
.alias GS_VIC4_SPRBPMEN_MASK 240  ; Sprite bitplane-modify-mode enables (bit mask)
.alias VIC4_TEXTXPOS $D04C  ; character generator horizontal position
.alias TEXTXPOS $D04C  ; character generator horizontal position
.alias VIC4_TEXTXPOS_ADDR $D04D  ; character generator horizontal position (address)
.alias TEXTXPOS_ADDR $D04D  ; character generator horizontal position (address)
.alias VIC4_TEXTXPOS_MASK 15  ; character generator horizontal position (bit mask)
.alias TEXTXPOS_MASK 15  ; character generator horizontal position (bit mask)
.alias VIC4_SPRTILEN_ADDR $D04D  ; Sprite horizontal tile enables. (address)
.alias VIC4_SPRTILEN_MASK 240  ; Sprite horizontal tile enables. (bit mask)
.alias VIC4_TEXTYPOS $D04E  ; Character generator vertical position
.alias TEXTYPOS $D04E  ; Character generator vertical position
.alias VIC4_TEXTYPOS_ADDR $D04F  ; Character generator vertical position (address)
.alias TEXTYPOS_ADDR $D04F  ; Character generator vertical position (address)
.alias VIC4_TEXTYPOS_MASK 15  ; Character generator vertical position (bit mask)
.alias TEXTYPOS_MASK 15  ; Character generator vertical position (bit mask)
.alias GS_VIC4_SPRTILEN_ADDR $D04F  ; Sprite 7-4 horizontal tile enables (address)
.alias GS_VIC4_SPRTILEN_MASK 240  ; Sprite 7-4 horizontal tile enables (bit mask)
.alias VIC4_XPOSLSB $D050  ; Read horizontal raster scan position LSB
.alias XPOSLSB $D050  ; Read horizontal raster scan position LSB
.alias VIC4_XPOSMSB_ADDR $D051  ; Read horizontal raster scan position MSB (address)
.alias XPOSMSB_ADDR $D051  ; Read horizontal raster scan position MSB (address)
.alias VIC4_XPOSMSB_MASK 63  ; Read horizontal raster scan position MSB (bit mask)
.alias XPOSMSB_MASK 63  ; Read horizontal raster scan position MSB (bit mask)
.alias VIC4_DBLRR_ADDR $D051  ; When set, the Raster Rewrite Buffer is only updated every 2nd raster line, limiting resolution to V200, but allowing more cycles for Raster-Rewrite actions. (address)
.alias DBLRR_ADDR $D051  ; When set, the Raster Rewrite Buffer is only updated every 2nd raster line, limiting resolution to V200, but allowing more cycles for Raster-Rewrite actions. (address)
.alias VIC4_DBLRR_MASK 64  ; When set, the Raster Rewrite Buffer is only updated every 2nd raster line, limiting resolution to V200, but allowing more cycles for Raster-Rewrite actions. (bit mask)
.alias DBLRR_MASK 64  ; When set, the Raster Rewrite Buffer is only updated every 2nd raster line, limiting resolution to V200, but allowing more cycles for Raster-Rewrite actions. (bit mask)
.alias VIC4_NORRDEL_ADDR $D051  ; When clear, raster rewrite double buffering is used (address)
.alias NORRDEL_ADDR $D051  ; When clear, raster rewrite double buffering is used (address)
.alias VIC4_NORRDEL_MASK 128  ; When clear, raster rewrite double buffering is used (bit mask)
.alias NORRDEL_MASK 128  ; When clear, raster rewrite double buffering is used (bit mask)
.alias VIC4_FNRASTERLSB $D052  ; Read physical raster position
.alias FNRASTERLSB $D052  ; Read physical raster position
.alias VIC4_FN_RASTER_MSB_ADDR $D053  ; Read physical raster position (address)
.alias FN_RASTER_MSB_ADDR $D053  ; Read physical raster position (address)
.alias VIC4_FN_RASTER_MSB_MASK 7  ; Read physical raster position (bit mask)
.alias FN_RASTER_MSB_MASK 7  ; Read physical raster position (bit mask)
.alias VIC4_SHDEMU_ADDR $D053  ; Enable simulated shadow-mask (PALEMU must also be enabled) (address)
.alias SHDEMU_ADDR $D053  ; Enable simulated shadow-mask (PALEMU must also be enabled) (address)
.alias VIC4_SHDEMU_MASK 64  ; Enable simulated shadow-mask (PALEMU must also be enabled) (bit mask)
.alias SHDEMU_MASK 64  ; Enable simulated shadow-mask (PALEMU must also be enabled) (bit mask)
.alias VIC4_FNRST_ADDR $D053  ; Raster compare source (0=VIC-IV fine raster, 1=VIC-II raster) (address)
.alias FNRST_ADDR $D053  ; Raster compare source (0=VIC-IV fine raster, 1=VIC-II raster) (address)
.alias VIC4_FNRST_MASK 128  ; Raster compare source (0=VIC-IV fine raster, 1=VIC-II raster) (bit mask)
.alias FNRST_MASK 128  ; Raster compare source (0=VIC-IV fine raster, 1=VIC-II raster) (bit mask)
.alias SUMMARY_VIC_IV $D054  ; Control register C
.alias VIC_IV $D054  ; Control register C
.alias VIC4_CHR16_ADDR $D054  ; enable 16-bit character numbers (two screen bytes per character) (address)
.alias CHR16_ADDR $D054  ; enable 16-bit character numbers (two screen bytes per character) (address)
.alias VIC4_CHR16_MASK 1  ; enable 16-bit character numbers (two screen bytes per character) (bit mask)
.alias CHR16_MASK 1  ; enable 16-bit character numbers (two screen bytes per character) (bit mask)
.alias VIC4_FCLRLO_ADDR $D054  ; enable full-colour mode for character numbers <=$FF (address)
.alias FCLRLO_ADDR $D054  ; enable full-colour mode for character numbers <=$FF (address)
.alias VIC4_FCLRLO_MASK 2  ; enable full-colour mode for character numbers <=$FF (bit mask)
.alias FCLRLO_MASK 2  ; enable full-colour mode for character numbers <=$FF (bit mask)
.alias VIC4_FCLRHI_ADDR $D054  ; enable full-colour mode for character numbers >$FF (address)
.alias FCLRHI_ADDR $D054  ; enable full-colour mode for character numbers >$FF (address)
.alias VIC4_FCLRHI_MASK 4  ; enable full-colour mode for character numbers >$FF (bit mask)
.alias FCLRHI_MASK 4  ; enable full-colour mode for character numbers >$FF (bit mask)
.alias VIC4_SMTH_ADDR $D054  ; video output horizontal smoothing enable (address)
.alias SMTH_ADDR $D054  ; video output horizontal smoothing enable (address)
.alias VIC4_SMTH_MASK 8  ; video output horizontal smoothing enable (bit mask)
.alias SMTH_MASK 8  ; video output horizontal smoothing enable (bit mask)
.alias VIC4_SPR640_ADDR $D054  ; Sprite H640 enable; (address)
.alias SPR640_ADDR $D054  ; Sprite H640 enable; (address)
.alias VIC4_SPR640_MASK 16  ; Sprite H640 enable; (bit mask)
.alias SPR640_MASK 16  ; Sprite H640 enable; (bit mask)
.alias VIC4_PALEMU_ADDR $D054  ; Enable PAL CRT-like scan-line emulation (address)
.alias PALEMU_ADDR $D054  ; Enable PAL CRT-like scan-line emulation (address)
.alias VIC4_PALEMU_MASK 32  ; Enable PAL CRT-like scan-line emulation (bit mask)
.alias PALEMU_MASK 32  ; Enable PAL CRT-like scan-line emulation (bit mask)
.alias VIC4_VFAST_ADDR $D054  ; C65GS FAST mode (48MHz) (address)
.alias VFAST_ADDR $D054  ; C65GS FAST mode (48MHz) (address)
.alias VIC4_VFAST_MASK 64  ; C65GS FAST mode (48MHz) (bit mask)
.alias VFAST_MASK 64  ; C65GS FAST mode (48MHz) (bit mask)
.alias VIC4_ALPHEN_ADDR $D054  ; Alpha compositor enable (address)
.alias ALPHEN_ADDR $D054  ; Alpha compositor enable (address)
.alias VIC4_ALPHEN_MASK 128  ; Alpha compositor enable (bit mask)
.alias ALPHEN_MASK 128  ; Alpha compositor enable (bit mask)
.alias VIC4_SPRHGTEN $D055  ; sprite extended height enable (one bit per sprite)
.alias SPRHGTEN $D055  ; sprite extended height enable (one bit per sprite)
.alias VIC4_SPRHGHT $D056  ; Sprite extended height size (sprite pixels high)
.alias SPRHGHT $D056  ; Sprite extended height size (sprite pixels high)
.alias VIC4_SPRX64EN $D057  ; Sprite extended width enables (8 bytes per sprite row = 64 pixels wide for normal sprites or 16 pixels wide for 16-colour sprite mode)
.alias SPRX64EN $D057  ; Sprite extended width enables (8 bytes per sprite row = 64 pixels wide for normal sprites or 16 pixels wide for 16-colour sprite mode)
.alias VIC4_LINESTEPLSB $D058  ; number of bytes to advance between each text row (LSB)
.alias LINESTEPLSB $D058  ; number of bytes to advance between each text row (LSB)
.alias VIC4_LINESTEPMSB $D059  ; number of bytes to advance between each text row (MSB)
.alias LINESTEPMSB $D059  ; number of bytes to advance between each text row (MSB)
.alias VIC4_CHRXSCL $D05A  ; Horizontal hardware scale of text mode (pixel 120ths per pixel)
.alias CHRXSCL $D05A  ; Horizontal hardware scale of text mode (pixel 120ths per pixel)
.alias VIC4_CHRYSCL $D05B  ; Vertical scaling of text mode (number of physical rasters per char text row)
.alias CHRYSCL $D05B  ; Vertical scaling of text mode (number of physical rasters per char text row)
.alias VIC4_SDBDRWD_LSB $D05C  ; Width of single side border (LSB)
.alias SDBDRWD_LSB $D05C  ; Width of single side border (LSB)
.alias VIC4_SDBDRWD_MSB_ADDR $D05D  ; side border width (MSB) (address)
.alias SDBDRWD_MSB_ADDR $D05D  ; side border width (MSB) (address)
.alias VIC4_SDBDRWD_MSB_MASK 63  ; side border width (MSB) (bit mask)
.alias SDBDRWD_MSB_MASK 63  ; side border width (MSB) (bit mask)
.alias VIC4_RST_DELEN_ADDR $D05D  ; Enable raster delay (delays raster counter and interrupts by one line to match output pipeline latency) (address)
.alias RST_DELEN_ADDR $D05D  ; Enable raster delay (delays raster counter and interrupts by one line to match output pipeline latency) (address)
.alias VIC4_RST_DELEN_MASK 64  ; Enable raster delay (delays raster counter and interrupts by one line to match output pipeline latency) (bit mask)
.alias RST_DELEN_MASK 64  ; Enable raster delay (delays raster counter and interrupts by one line to match output pipeline latency) (bit mask)
.alias VIC4_HOTREG_ADDR $D05D  ; Enable VIC-II hot registers. When enabled, touching many VIC-II registers causes the VIC-IV to recalculate display parameters, such as border positions and sizes (address)
.alias HOTREG_ADDR $D05D  ; Enable VIC-II hot registers. When enabled, touching many VIC-II registers causes the VIC-IV to recalculate display parameters, such as border positions and sizes (address)
.alias VIC4_HOTREG_MASK 128  ; Enable VIC-II hot registers. When enabled, touching many VIC-II registers causes the VIC-IV to recalculate display parameters, such as border positions and sizes (bit mask)
.alias HOTREG_MASK 128  ; Enable VIC-II hot registers. When enabled, touching many VIC-II registers causes the VIC-IV to recalculate display parameters, such as border positions and sizes (bit mask)
.alias VIC4_CHRCOUNT $D05E  ; Number of characters to display per row (LSB)
.alias CHRCOUNT $D05E  ; Number of characters to display per row (LSB)
.alias VIC4_SPRXSMSBS $D05F  ; Sprite H640 X Super-MSBs
.alias SPRXSMSBS $D05F  ; Sprite H640 X Super-MSBs
.alias VIC4_SCRNPTRLSB $D060  ; screen RAM precise base address (bits 0 - 7)
.alias SCRNPTRLSB $D060  ; screen RAM precise base address (bits 0 - 7)
.alias VIC4_SCRNPTRMSB $D061  ; screen RAM precise base address (bits 15 - 8)
.alias SCRNPTRMSB $D061  ; screen RAM precise base address (bits 15 - 8)
.alias VIC4_SCRNPTRBNK $D062  ; screen RAM precise base address (bits 23 - 16)
.alias SCRNPTRBNK $D062  ; screen RAM precise base address (bits 23 - 16)
.alias VIC4_SCRNPTRMB_ADDR $D063  ; screen RAM precise base address (bits 31 - 24) (address)
.alias SCRNPTRMB_ADDR $D063  ; screen RAM precise base address (bits 31 - 24) (address)
.alias VIC4_SCRNPTRMB_MASK 15  ; screen RAM precise base address (bits 31 - 24) (bit mask)
.alias SCRNPTRMB_MASK 15  ; screen RAM precise base address (bits 31 - 24) (bit mask)
.alias VIC4_CHRCOUNT_ADDR $D063  ; Number of characters to display per (address)
.alias CHRCOUNT_ADDR $D063  ; Number of characters to display per (address)
.alias VIC4_CHRCOUNT_MASK 48  ; Number of characters to display per (bit mask)
.alias CHRCOUNT_MASK 48  ; Number of characters to display per (bit mask)
.alias VIC4_EXGLYPH_ADDR $D063  ; source full-colour character data from expansion RAM (address)
.alias EXGLYPH_ADDR $D063  ; source full-colour character data from expansion RAM (address)
.alias VIC4_EXGLYPH_MASK 128  ; source full-colour character data from expansion RAM (bit mask)
.alias EXGLYPH_MASK 128  ; source full-colour character data from expansion RAM (bit mask)
.alias VIC4_COLPTRLSB $D064  ; colour RAM base address (bits 0 - 7)
.alias COLPTRLSB $D064  ; colour RAM base address (bits 0 - 7)
.alias VIC4_COLPTRMSB $D065  ; colour RAM base address (bits 15 - 8)
.alias COLPTRMSB $D065  ; colour RAM base address (bits 15 - 8)
.alias DEBUG_SBPDEBUG $D067  ; Sprite/bitplane first X DEBUG WILL BE REMOVED
.alias SBPDEBUG $D067  ; Sprite/bitplane first X DEBUG WILL BE REMOVED
.alias VIC4_CHARPTRLSB $D068  ; Character set precise base address (bits 0 - 7)
.alias CHARPTRLSB $D068  ; Character set precise base address (bits 0 - 7)
.alias VIC4_CHARPTRMSB $D069  ; Character set precise base address (bits 15 - 8)
.alias CHARPTRMSB $D069  ; Character set precise base address (bits 15 - 8)
.alias VIC4_CHARPTRBNK $D06A  ; Character set precise base address (bits 23 - 16)
.alias CHARPTRBNK $D06A  ; Character set precise base address (bits 23 - 16)
.alias VIC4_SPR16EN $D06B  ; sprite 16-colour mode enables
.alias SPR16EN $D06B  ; sprite 16-colour mode enables
.alias VIC4_SPRPTRADRLSB $D06C  ; sprite pointer address (bits 7 - 0)
.alias SPRPTRADRLSB $D06C  ; sprite pointer address (bits 7 - 0)
.alias VIC4_SPRPTRADRMSB $D06D  ; sprite pointer address (bits 15 - 8)
.alias SPRPTRADRMSB $D06D  ; sprite pointer address (bits 15 - 8)
.alias VIC4_SPRPTRBNK_ADDR $D06E  ; sprite pointer address (bits 23 - 16) (address)
.alias SPRPTRBNK_ADDR $D06E  ; sprite pointer address (bits 23 - 16) (address)
.alias VIC4_SPRPTRBNK_MASK 127  ; sprite pointer address (bits 23 - 16) (bit mask)
.alias SPRPTRBNK_MASK 127  ; sprite pointer address (bits 23 - 16) (bit mask)
.alias VIC4_SPR_PTR16_ADDR $D06E  ; 16-bit sprite pointer mode (allows sprites to be located on any 64 byte boundary in chip RAM) (address)
.alias SPR_PTR16_ADDR $D06E  ; 16-bit sprite pointer mode (allows sprites to be located on any 64 byte boundary in chip RAM) (address)
.alias VIC4_SPR_PTR16_MASK 128  ; 16-bit sprite pointer mode (allows sprites to be located on any 64 byte boundary in chip RAM) (bit mask)
.alias SPR_PTR16_MASK 128  ; 16-bit sprite pointer mode (allows sprites to be located on any 64 byte boundary in chip RAM) (bit mask)
.alias VIC4_RASLINE0_ADDR $D06F  ; first VIC-II raster line (address)
.alias RASLINE0_ADDR $D06F  ; first VIC-II raster line (address)
.alias VIC4_RASLINE0_MASK 63  ; first VIC-II raster line (bit mask)
.alias RASLINE0_MASK 63  ; first VIC-II raster line (bit mask)
.alias VIC4_VGAHDTV_ADDR $D06F  ; Select more VGA-compatible mode if set, instead of HDMI/HDTV VIC-II cycle-exact frame timing. May help to produce a functional display on older VGA monitors. (address)
.alias VGAHDTV_ADDR $D06F  ; Select more VGA-compatible mode if set, instead of HDMI/HDTV VIC-II cycle-exact frame timing. May help to produce a functional display on older VGA monitors. (address)
.alias VIC4_VGAHDTV_MASK 64  ; Select more VGA-compatible mode if set, instead of HDMI/HDTV VIC-II cycle-exact frame timing. May help to produce a functional display on older VGA monitors. (bit mask)
.alias VGAHDTV_MASK 64  ; Select more VGA-compatible mode if set, instead of HDMI/HDTV VIC-II cycle-exact frame timing. May help to produce a functional display on older VGA monitors. (bit mask)
.alias VIC4_PALNTSC_ADDR $D06F  ; NTSC emulation mode (max raster = 262) (address)
.alias PALNTSC_ADDR $D06F  ; NTSC emulation mode (max raster = 262) (address)
.alias VIC4_PALNTSC_MASK 128  ; NTSC emulation mode (max raster = 262) (bit mask)
.alias PALNTSC_MASK 128  ; NTSC emulation mode (max raster = 262) (bit mask)
.alias VIC4_ABTPALSEL_ADDR $D070  ; VIC-IV bitmap/text palette bank (alternate palette) (address)
.alias ABTPALSEL_ADDR $D070  ; VIC-IV bitmap/text palette bank (alternate palette) (address)
.alias VIC4_ABTPALSEL_MASK 3  ; VIC-IV bitmap/text palette bank (alternate palette) (bit mask)
.alias ABTPALSEL_MASK 3  ; VIC-IV bitmap/text palette bank (alternate palette) (bit mask)
.alias VIC4_SPRPALSEL_ADDR $D070  ; sprite palette bank (address)
.alias SPRPALSEL_ADDR $D070  ; sprite palette bank (address)
.alias VIC4_SPRPALSEL_MASK 12  ; sprite palette bank (bit mask)
.alias SPRPALSEL_MASK 12  ; sprite palette bank (bit mask)
.alias VIC4_BTPALSEL_ADDR $D070  ; bitmap/text palette bank (address)
.alias BTPALSEL_ADDR $D070  ; bitmap/text palette bank (address)
.alias VIC4_BTPALSEL_MASK 48  ; bitmap/text palette bank (bit mask)
.alias BTPALSEL_MASK 48  ; bitmap/text palette bank (bit mask)
.alias VIC4_MAPEDPAL_ADDR $D070  ; palette bank mapped at $D100-$D3FF (address)
.alias MAPEDPAL_ADDR $D070  ; palette bank mapped at $D100-$D3FF (address)
.alias VIC4_MAPEDPAL_MASK 192  ; palette bank mapped at $D100-$D3FF (bit mask)
.alias MAPEDPAL_MASK 192  ; palette bank mapped at $D100-$D3FF (bit mask)
.alias VIC4_BP16ENS $D071  ; VIC-IV 16-colour bitplane enable flags
.alias BP16ENS $D071  ; VIC-IV 16-colour bitplane enable flags
.alias VIC4_SPRYADJ $D072  ; Sprite Y position adjustment
.alias SPRYADJ $D072  ; Sprite Y position adjustment
.alias VIC4_ALPHADELAY_ADDR $D073  ; Alpha delay for compositor (address)
.alias ALPHADELAY_ADDR $D073  ; Alpha delay for compositor (address)
.alias VIC4_ALPHADELAY_MASK 15  ; Alpha delay for compositor (bit mask)
.alias ALPHADELAY_MASK 15  ; Alpha delay for compositor (bit mask)
.alias VIC4_RASTERHEIGHT_ADDR $D073  ; physical rasters per VIC-II raster (1 to 16) (address)
.alias RASTERHEIGHT_ADDR $D073  ; physical rasters per VIC-II raster (1 to 16) (address)
.alias VIC4_RASTERHEIGHT_MASK 240  ; physical rasters per VIC-II raster (1 to 16) (bit mask)
.alias RASTERHEIGHT_MASK 240  ; physical rasters per VIC-II raster (1 to 16) (bit mask)
.alias VIC4_SPRENALPHA $D074  ; Sprite alpha-blend enable
.alias SPRENALPHA $D074  ; Sprite alpha-blend enable
.alias VIC4_SPRALPHAVAL $D075  ; Sprite alpha-blend value
.alias SPRALPHAVAL $D075  ; Sprite alpha-blend value
.alias VIC4_SPRENV400 $D076  ; Sprite V400 enables
.alias SPRENV400 $D076  ; Sprite V400 enables
.alias VIC4_SRPYMSBS $D077  ; Sprite V400 Y position MSBs
.alias SRPYMSBS $D077  ; Sprite V400 Y position MSBs
.alias VIC4_SPRYSMSBS $D078  ; Sprite V400 Y position super MSBs
.alias SPRYSMSBS $D078  ; Sprite V400 Y position super MSBs
.alias VIC4_RSTCOMP $D079  ; Raster compare value
.alias RSTCOMP $D079  ; Raster compare value
.alias VIC4_RSTCMP_ADDR $D07A  ; Raster compare value MSB (address)
.alias RSTCMP_ADDR $D07A  ; Raster compare value MSB (address)
.alias VIC4_RSTCMP_MASK 7  ; Raster compare value MSB (bit mask)
.alias RSTCMP_MASK 7  ; Raster compare value MSB (bit mask)
.alias VIC4_SPTR_CONT_ADDR $D07A  ; Continuously monitor sprite pointer, to allow changing sprite data source while a sprite is being drawn (address)
.alias SPTR_CONT_ADDR $D07A  ; Continuously monitor sprite pointer, to allow changing sprite data source while a sprite is being drawn (address)
.alias VIC4_SPTR_CONT_MASK 8  ; Continuously monitor sprite pointer, to allow changing sprite data source while a sprite is being drawn (bit mask)
.alias SPTR_CONT_MASK 8  ; Continuously monitor sprite pointer, to allow changing sprite data source while a sprite is being drawn (bit mask)
.alias VIC4_RESV_ADDR $D07A  ; Reserved. (address)
.alias VIC4_RESV_MASK 48  ; Reserved. (bit mask)
.alias VIC4_EXTIRQS_ADDR $D07A  ; Enable additional IRQ sources, e.g., raster X position. (address)
.alias EXTIRQS_ADDR $D07A  ; Enable additional IRQ sources, e.g., raster X position. (address)
.alias VIC4_EXTIRQS_MASK 64  ; Enable additional IRQ sources, e.g., raster X position. (bit mask)
.alias EXTIRQS_MASK 64  ; Enable additional IRQ sources, e.g., raster X position. (bit mask)
.alias VIC4_FNRST_CMP_ADDR $D07A  ; Raster compare is in physical rasters if set, or VIC-II raster if clear (address)
.alias FNRST_CMP_ADDR $D07A  ; Raster compare is in physical rasters if set, or VIC-II raster if clear (address)
.alias VIC4_FNRST_CMP_MASK 128  ; Raster compare is in physical rasters if set, or VIC-II raster if clear (bit mask)
.alias FNRST_CMP_MASK 128  ; Raster compare is in physical rasters if set, or VIC-II raster if clear (bit mask)
.alias VIC4_Number $D07B  ; of text rows to display
.alias Number $D07B  ; of text rows to display
.alias VIC4_BIT_PBANK_ADDR $D07C  ; Set which 128KB bank bitplanes (address)
.alias BIT_PBANK_ADDR $D07C  ; Set which 128KB bank bitplanes (address)
.alias VIC4_BIT_PBANK_MASK 7  ; Set which 128KB bank bitplanes (bit mask)
.alias BIT_PBANK_MASK 7  ; Set which 128KB bank bitplanes (bit mask)
.alias GS_VIC4_RESV_ADDR $D07C  ; @RESV (address)
.alias GS_VIC4_RESV_MASK 8  ; @RESV (bit mask)
.alias VIC4_HSYNCP_ADDR $D07C  ; hsync polarity (address)
.alias HSYNCP_ADDR $D07C  ; hsync polarity (address)
.alias VIC4_HSYNCP_MASK 16  ; hsync polarity (bit mask)
.alias HSYNCP_MASK 16  ; hsync polarity (bit mask)
.alias VIC4_VSYNCP_ADDR $D07C  ; vsync polarity (address)
.alias VSYNCP_ADDR $D07C  ; vsync polarity (address)
.alias VIC4_VSYNCP_MASK 32  ; vsync polarity (bit mask)
.alias VSYNCP_MASK 32  ; vsync polarity (bit mask)
.alias VIC4_DEBUGC_ADDR $D07C  ; VIC-IV debug pixel select red(01), green(10) or blue(11) channel visible in $D07D (address)
.alias DEBUGC_ADDR $D07C  ; VIC-IV debug pixel select red(01), green(10) or blue(11) channel visible in $D07D (address)
.alias VIC4_DEBUGC_MASK 192  ; VIC-IV debug pixel select red(01), green(10) or blue(11) channel visible in $D07D (bit mask)
.alias DEBUGC_MASK 192  ; VIC-IV debug pixel select red(01), green(10) or blue(11) channel visible in $D07D (bit mask)
.alias DEBUG_DEBUGOUT $D07D  ; VIC-IV debug value read-back (read only)
.alias DEBUGOUT $D07D  ; VIC-IV debug value read-back (read only)
.alias DEBUG_DEBUGX $D07D  ; VIC-IV debug X position (LSB) (write only)
.alias DEBUGX $D07D  ; VIC-IV debug X position (LSB) (write only)
.alias DEBUG_DEBUGY $D07E  ; VIC-IV debug Y position (LSB)
.alias DEBUGY $D07E  ; VIC-IV debug Y position (LSB)
.alias DEBUG_DEBUGX_ADDR $D07F  ; VIC-IV debug X position (MSB) (address)
.alias DEBUGX_ADDR $D07F  ; VIC-IV debug X position (MSB) (address)
.alias DEBUG_DEBUGX_MASK 15  ; VIC-IV debug X position (MSB) (bit mask)
.alias DEBUGX_MASK 15  ; VIC-IV debug X position (MSB) (bit mask)
.alias DEBUG_DEBUGY_ADDR $D07F  ; VIC-IV debug Y position (MSB) (address)
.alias DEBUGY_ADDR $D07F  ; VIC-IV debug Y position (MSB) (address)
.alias DEBUG_DEBUGY_MASK 240  ; VIC-IV debug Y position (MSB) (bit mask)
.alias DEBUGY_MASK 240  ; VIC-IV debug Y position (MSB) (bit mask)
.alias DEBUG_DEBUGOOF_ADDR $D07F  ; VIC-IV debug out-of-frame signal enable (address)
.alias DEBUGOOF_ADDR $D07F  ; VIC-IV debug out-of-frame signal enable (address)
.alias DEBUG_DEBUGOOF_MASK 128  ; VIC-IV debug out-of-frame signal enable (bit mask)
.alias DEBUGOOF_MASK 128  ; VIC-IV debug out-of-frame signal enable (bit mask)
.alias FDC_DS_ADDR $D080  ; Drive select (0 to 7). Internal drive is 0. Second floppy drive on internal cable is 1. Other values reserved for C1565 external drive interface. (address)
.alias DS_ADDR $D080  ; Drive select (0 to 7). Internal drive is 0. Second floppy drive on internal cable is 1. Other values reserved for C1565 external drive interface. (address)
.alias FDC_DS_MASK 7  ; Drive select (0 to 7). Internal drive is 0. Second floppy drive on internal cable is 1. Other values reserved for C1565 external drive interface. (bit mask)
.alias DS_MASK 7  ; Drive select (0 to 7). Internal drive is 0. Second floppy drive on internal cable is 1. Other values reserved for C1565 external drive interface. (bit mask)
.alias FDC_SIDE_ADDR $D080  ; Directly controls the SIDE signal to the floppy drive, i.e., selecting which side of the media is active. (address)
.alias SIDE_ADDR $D080  ; Directly controls the SIDE signal to the floppy drive, i.e., selecting which side of the media is active. (address)
.alias FDC_SIDE_MASK 8  ; Directly controls the SIDE signal to the floppy drive, i.e., selecting which side of the media is active. (bit mask)
.alias SIDE_MASK 8  ; Directly controls the SIDE signal to the floppy drive, i.e., selecting which side of the media is active. (bit mask)
.alias FDC_SWAP_ADDR $D080  ; Swap upper and lower halves of data buffer (i.e. invert bit 8 of the sector buffer) (address)
.alias SWAP_ADDR $D080  ; Swap upper and lower halves of data buffer (i.e. invert bit 8 of the sector buffer) (address)
.alias FDC_SWAP_MASK 16  ; Swap upper and lower halves of data buffer (i.e. invert bit 8 of the sector buffer) (bit mask)
.alias SWAP_MASK 16  ; Swap upper and lower halves of data buffer (i.e. invert bit 8 of the sector buffer) (bit mask)
.alias FDC_MOTOR_ADDR $D080  ; Activates drive motor and LED (unless LED signal is also set, causing the drive LED to blink) (address)
.alias MOTOR_ADDR $D080  ; Activates drive motor and LED (unless LED signal is also set, causing the drive LED to blink) (address)
.alias FDC_MOTOR_MASK 32  ; Activates drive motor and LED (unless LED signal is also set, causing the drive LED to blink) (bit mask)
.alias MOTOR_MASK 32  ; Activates drive motor and LED (unless LED signal is also set, causing the drive LED to blink) (bit mask)
.alias FDC_LED_ADDR $D080  ; Drive LED blinks when set (address)
.alias FDC_LED_MASK 64  ; Drive LED blinks when set (bit mask)
.alias FDC_IRQ_ADDR $D080  ; When set, enables interrupts to occur. Clearing clears any pending interrupt and disables interrupts until set again. (address)
.alias FDC_IRQ_MASK 128  ; When set, enables interrupts to occur. Clearing clears any pending interrupt and disables interrupts until set again. (bit mask)
.alias FDC_COMMAND $D081  ; F011 FDC command register
.alias FDC_NOBUF_ADDR $D081  ; Reset the sector buffer read/write pointers (address)
.alias NOBUF_ADDR $D081  ; Reset the sector buffer read/write pointers (address)
.alias FDC_NOBUF_MASK 1  ; Reset the sector buffer read/write pointers (bit mask)
.alias NOBUF_MASK 1  ; Reset the sector buffer read/write pointers (bit mask)
.alias FDC_ALT_ADDR $D081  ; Selects alternate DPLL read recovery method (not implemented) (address)
.alias ALT_ADDR $D081  ; Selects alternate DPLL read recovery method (not implemented) (address)
.alias FDC_ALT_MASK 2  ; Selects alternate DPLL read recovery method (not implemented) (bit mask)
.alias ALT_MASK 2  ; Selects alternate DPLL read recovery method (not implemented) (bit mask)
.alias FDC_ALGO_ADDR $D081  ; Selects reading and writing algorithm (currently ignored). (address)
.alias ALGO_ADDR $D081  ; Selects reading and writing algorithm (currently ignored). (address)
.alias FDC_ALGO_MASK 4  ; Selects reading and writing algorithm (currently ignored). (bit mask)
.alias ALGO_MASK 4  ; Selects reading and writing algorithm (currently ignored). (bit mask)
.alias FDC_DIR_ADDR $D081  ; Sets the stepping direction (inward vs (address)
.alias DIR_ADDR $D081  ; Sets the stepping direction (inward vs (address)
.alias FDC_DIR_MASK 8  ; Sets the stepping direction (inward vs (bit mask)
.alias DIR_MASK 8  ; Sets the stepping direction (inward vs (bit mask)
.alias FDC_STEP_ADDR $D081  ; Writing 1 causes the head to step in the indicated direction (address)
.alias STEP_ADDR $D081  ; Writing 1 causes the head to step in the indicated direction (address)
.alias FDC_STEP_MASK 16  ; Writing 1 causes the head to step in the indicated direction (bit mask)
.alias STEP_MASK 16  ; Writing 1 causes the head to step in the indicated direction (bit mask)
.alias FDC_FREE_ADDR $D081  ; Command is a free-format (low level) operation (address)
.alias FREE_ADDR $D081  ; Command is a free-format (low level) operation (address)
.alias FDC_FREE_MASK 32  ; Command is a free-format (low level) operation (bit mask)
.alias FREE_MASK 32  ; Command is a free-format (low level) operation (bit mask)
.alias FDC_RDCMD_ADDR $D081  ; Command is a read operation if set (address)
.alias RDCMD_ADDR $D081  ; Command is a read operation if set (address)
.alias FDC_RDCMD_MASK 64  ; Command is a read operation if set (bit mask)
.alias RDCMD_MASK 64  ; Command is a read operation if set (bit mask)
.alias FDC_WRCMD_ADDR $D081  ; Command is a write operation if set (address)
.alias WRCMD_ADDR $D081  ; Command is a write operation if set (address)
.alias FDC_WRCMD_MASK 128  ; Command is a write operation if set (bit mask)
.alias WRCMD_MASK 128  ; Command is a write operation if set (bit mask)
.alias FDC_TK0_ADDR $D082  ; F011 Head is over track 0 flag (read only) (address)
.alias TK0_ADDR $D082  ; F011 Head is over track 0 flag (read only) (address)
.alias FDC_TK0_MASK 1  ; F011 Head is over track 0 flag (read only) (bit mask)
.alias TK0_MASK 1  ; F011 Head is over track 0 flag (read only) (bit mask)
.alias FDC_PROT_ADDR $D082  ; F011 Disk write protect flag (read only) (address)
.alias PROT_ADDR $D082  ; F011 Disk write protect flag (read only) (address)
.alias FDC_PROT_MASK 2  ; F011 Disk write protect flag (read only) (bit mask)
.alias PROT_MASK 2  ; F011 Disk write protect flag (read only) (bit mask)
.alias FDC_LOST_ADDR $D082  ; F011 LOST flag (data was lost during transfer, i.e., CPU did not read data fast enough) (read only) (address)
.alias LOST_ADDR $D082  ; F011 LOST flag (data was lost during transfer, i.e., CPU did not read data fast enough) (read only) (address)
.alias FDC_LOST_MASK 4  ; F011 LOST flag (data was lost during transfer, i.e., CPU did not read data fast enough) (read only) (bit mask)
.alias LOST_MASK 4  ; F011 LOST flag (data was lost during transfer, i.e., CPU did not read data fast enough) (read only) (bit mask)
.alias FDC_CRC_ADDR $D082  ; F011 FDC CRC check failure flag (read only) (address)
.alias CRC_ADDR $D082  ; F011 FDC CRC check failure flag (read only) (address)
.alias FDC_CRC_MASK 8  ; F011 FDC CRC check failure flag (read only) (bit mask)
.alias CRC_MASK 8  ; F011 FDC CRC check failure flag (read only) (bit mask)
.alias FDC_RNF_ADDR $D082  ; F011 FDC Request Not Found (RNF), i.e., a sector read or write operation did not find the requested sector (read only) (address)
.alias RNF_ADDR $D082  ; F011 FDC Request Not Found (RNF), i.e., a sector read or write operation did not find the requested sector (read only) (address)
.alias FDC_RNF_MASK 16  ; F011 FDC Request Not Found (RNF), i.e., a sector read or write operation did not find the requested sector (read only) (bit mask)
.alias RNF_MASK 16  ; F011 FDC Request Not Found (RNF), i.e., a sector read or write operation did not find the requested sector (read only) (bit mask)
.alias FDC_EQ_ADDR $D082  ; F011 FDC CPU and disk pointers to sector buffer are equal, indicating that the sector buffer is either full or empty. (read only) (address)
.alias EQ_ADDR $D082  ; F011 FDC CPU and disk pointers to sector buffer are equal, indicating that the sector buffer is either full or empty. (read only) (address)
.alias FDC_EQ_MASK 32  ; F011 FDC CPU and disk pointers to sector buffer are equal, indicating that the sector buffer is either full or empty. (read only) (bit mask)
.alias EQ_MASK 32  ; F011 FDC CPU and disk pointers to sector buffer are equal, indicating that the sector buffer is either full or empty. (read only) (bit mask)
.alias FDC_DRQ_ADDR $D082  ; F011 FDC DRQ flag (one or more bytes of data are ready) (read only) (address)
.alias DRQ_ADDR $D082  ; F011 FDC DRQ flag (one or more bytes of data are ready) (read only) (address)
.alias FDC_DRQ_MASK 64  ; F011 FDC DRQ flag (one or more bytes of data are ready) (read only) (bit mask)
.alias DRQ_MASK 64  ; F011 FDC DRQ flag (one or more bytes of data are ready) (read only) (bit mask)
.alias FDC_BUSY_ADDR $D082  ; F011 FDC busy flag (command is being executed) (read only) (address)
.alias BUSY_ADDR $D082  ; F011 FDC busy flag (command is being executed) (read only) (address)
.alias FDC_BUSY_MASK 128  ; F011 FDC busy flag (command is being executed) (read only) (bit mask)
.alias BUSY_MASK 128  ; F011 FDC busy flag (command is being executed) (read only) (bit mask)
.alias FDC_DSKCHG_ADDR $D083  ; F011 disk change sense (read only) (address)
.alias DSKCHG_ADDR $D083  ; F011 disk change sense (read only) (address)
.alias FDC_DSKCHG_MASK 1  ; F011 disk change sense (read only) (bit mask)
.alias DSKCHG_MASK 1  ; F011 disk change sense (read only) (bit mask)
.alias C65_FDC_IRQ_ADDR $D083  ; The floppy controller has generated an interrupt (read only). Note that interrupts are not currently implemented on the 45GS27. (address)
.alias C65_FDC_IRQ_MASK 2  ; The floppy controller has generated an interrupt (read only). Note that interrupts are not currently implemented on the 45GS27. (bit mask)
.alias FDC_INDEX_ADDR $D083  ; F011 Index hole sense (read only) (address)
.alias INDEX_ADDR $D083  ; F011 Index hole sense (read only) (address)
.alias FDC_INDEX_MASK 4  ; F011 Index hole sense (read only) (bit mask)
.alias INDEX_MASK 4  ; F011 Index hole sense (read only) (bit mask)
.alias FDC_DISKIN_ADDR $D083  ; F011 Disk sense (read only) (address)
.alias DISKIN_ADDR $D083  ; F011 Disk sense (read only) (address)
.alias FDC_DISKIN_MASK 8  ; F011 Disk sense (read only) (bit mask)
.alias DISKIN_MASK 8  ; F011 Disk sense (read only) (bit mask)
.alias FDC_WGATE_ADDR $D083  ; F011 write gate flag. Indicates that the drive is currently writing to media. Bad things may happen if a write transaction is aborted (read only) (address)
.alias WGATE_ADDR $D083  ; F011 write gate flag. Indicates that the drive is currently writing to media. Bad things may happen if a write transaction is aborted (read only) (address)
.alias FDC_WGATE_MASK 16  ; F011 write gate flag. Indicates that the drive is currently writing to media. Bad things may happen if a write transaction is aborted (read only) (bit mask)
.alias WGATE_MASK 16  ; F011 write gate flag. Indicates that the drive is currently writing to media. Bad things may happen if a write transaction is aborted (read only) (bit mask)
.alias FDC_RUN_ADDR $D083  ; F011 Successive match. A synonym of RDREQ on the 45IO47 (read only) (address)
.alias RUN_ADDR $D083  ; F011 Successive match. A synonym of RDREQ on the 45IO47 (read only) (address)
.alias FDC_RUN_MASK 32  ; F011 Successive match. A synonym of RDREQ on the 45IO47 (read only) (bit mask)
.alias RUN_MASK 32  ; F011 Successive match. A synonym of RDREQ on the 45IO47 (read only) (bit mask)
.alias FDC_WTREQ_ADDR $D083  ; F011 Write Request flag, i.e., the requested sector was found during a write operation (read only) (address)
.alias WTREQ_ADDR $D083  ; F011 Write Request flag, i.e., the requested sector was found during a write operation (read only) (address)
.alias FDC_WTREQ_MASK 64  ; F011 Write Request flag, i.e., the requested sector was found during a write operation (read only) (bit mask)
.alias WTREQ_MASK 64  ; F011 Write Request flag, i.e., the requested sector was found during a write operation (read only) (bit mask)
.alias FDC_RDREQ_ADDR $D083  ; F011 Read Request flag, i.e., the requested sector was found during a read operation (read only) (address)
.alias RDREQ_ADDR $D083  ; F011 Read Request flag, i.e., the requested sector was found during a read operation (read only) (address)
.alias FDC_RDREQ_MASK 128  ; F011 Read Request flag, i.e., the requested sector was found during a read operation (read only) (bit mask)
.alias RDREQ_MASK 128  ; F011 Read Request flag, i.e., the requested sector was found during a read operation (read only) (bit mask)
.alias FDC_TRACK $D084  ; F011 FDC track selection register
.alias TRACK $D084  ; F011 FDC track selection register
.alias FDC_SECTOR $D085  ; F011 FDC sector selection register
.alias SECTOR $D085  ; F011 FDC sector selection register
.alias FDC_SIDE $D086  ; F011 FDC side selection register
.alias SIDE $D086  ; F011 FDC side selection register
.alias FDC_DATA $D087  ; F011 FDC data register (read/write) for accessing the floppy controller's 512 byte sector buffer
.alias FDC_CLOCK $D088  ; Set or read the clock pattern to be used when writing address and data marks. Should normally be left $FF
.alias CLOCK $D088  ; Set or read the clock pattern to be used when writing address and data marks. Should normally be left $FF
.alias FDC_STEP $D089  ; Set or read the track stepping rate in 62.5 microsecond steps (normally 128, i.e., 8 milliseconds).
.alias STEP $D089  ; Set or read the track stepping rate in 62.5 microsecond steps (normally 128, i.e., 8 milliseconds).
.alias FDC_PCODE $D08A  ; (Read only) returns the protection code of the most recently read sector. Was intended for rudimentary copy protection. Not implemented.
.alias PCODE $D08A  ; (Read only) returns the protection code of the most recently read sector. Was intended for rudimentary copy protection. Not implemented.
.alias SUMMARY_REC $D0A0  ; Reserved for C65 RAM Expansion Controller.
.alias REC $D0A0  ; Reserved for C65 RAM Expansion Controller.
.alias VIC3_PALRED $D100  ; red palette values (reversed nybl order)
.alias PALRED $D100  ; red palette values (reversed nybl order)
.alias VIC3_PALGREEN $D200  ; green palette values (reversed nybl order)
.alias PALGREEN $D200  ; green palette values (reversed nybl order)
.alias VIC3_PALBLUE $D300  ; blue palette values (reversed nybl order)
.alias PALBLUE $D300  ; blue palette values (reversed nybl order)
.alias ETHCOMMAND_DEBUGVIC $D4  ; Select VIC-IV debug stream via ethernet when \$D6E1.3 is set
.alias DEBUGVIC $D4  ; Select VIC-IV debug stream via ethernet when \$D6E1.3 is set
.alias UART_DATA $D600  ; UART data register (read or write)
.alias UART_RXRDY_ADDR $D601  ; UART RX byte ready flag (clear by reading \$D600) (address)
.alias RXRDY_ADDR $D601  ; UART RX byte ready flag (clear by reading \$D600) (address)
.alias UART_RXRDY_MASK 1  ; UART RX byte ready flag (clear by reading \$D600) (bit mask)
.alias RXRDY_MASK 1  ; UART RX byte ready flag (clear by reading \$D600) (bit mask)
.alias UART_RXOVRRUN_ADDR $D601  ; UART RX overrun flag (clear by reading \$D600) (address)
.alias RXOVRRUN_ADDR $D601  ; UART RX overrun flag (clear by reading \$D600) (address)
.alias UART_RXOVRRUN_MASK 2  ; UART RX overrun flag (clear by reading \$D600) (bit mask)
.alias RXOVRRUN_MASK 2  ; UART RX overrun flag (clear by reading \$D600) (bit mask)
.alias UART_PTYERR_ADDR $D601  ; UART RX parity error flag (clear by reading \$D600) (address)
.alias PTYERR_ADDR $D601  ; UART RX parity error flag (clear by reading \$D600) (address)
.alias UART_PTYERR_MASK 4  ; UART RX parity error flag (clear by reading \$D600) (bit mask)
.alias PTYERR_MASK 4  ; UART RX parity error flag (clear by reading \$D600) (bit mask)
.alias UART_FRMERR_ADDR $D601  ; UART RX framing error flag (clear by reading \$D600) (address)
.alias FRMERR_ADDR $D601  ; UART RX framing error flag (clear by reading \$D600) (address)
.alias UART_FRMERR_MASK 8  ; UART RX framing error flag (clear by reading \$D600) (bit mask)
.alias FRMERR_MASK 8  ; UART RX framing error flag (clear by reading \$D600) (bit mask)
.alias UART_PTYEVEN_ADDR $D602  ; UART Parity: 1=even, 0=odd (address)
.alias PTYEVEN_ADDR $D602  ; UART Parity: 1=even, 0=odd (address)
.alias UART_PTYEVEN_MASK 1  ; UART Parity: 1=even, 0=odd (bit mask)
.alias PTYEVEN_MASK 1  ; UART Parity: 1=even, 0=odd (bit mask)
.alias UART_PTYEN_ADDR $D602  ; UART Parity enable: 1=enabled (address)
.alias PTYEN_ADDR $D602  ; UART Parity enable: 1=enabled (address)
.alias UART_PTYEN_MASK 2  ; UART Parity enable: 1=enabled (bit mask)
.alias PTYEN_MASK 2  ; UART Parity enable: 1=enabled (bit mask)
.alias UART_CHARSZ_ADDR $D602  ; UART character size: 00=8, 01=7, 10=6, 11=5 bits per byte (address)
.alias CHARSZ_ADDR $D602  ; UART character size: 00=8, 01=7, 10=6, 11=5 bits per byte (address)
.alias UART_CHARSZ_MASK 12  ; UART character size: 00=8, 01=7, 10=6, 11=5 bits per byte (bit mask)
.alias CHARSZ_MASK 12  ; UART character size: 00=8, 01=7, 10=6, 11=5 bits per byte (bit mask)
.alias UART_SYNCMOD_ADDR $D602  ; UART synchronisation mode flags (00=RX \& TX both async, 01=RX sync, TX async, 1x=TX sync, RX async (unused on the MEGA65) (address)
.alias SYNCMOD_ADDR $D602  ; UART synchronisation mode flags (00=RX \& TX both async, 01=RX sync, TX async, 1x=TX sync, RX async (unused on the MEGA65) (address)
.alias UART_SYNCMOD_MASK 48  ; UART synchronisation mode flags (00=RX \& TX both async, 01=RX sync, TX async, 1x=TX sync, RX async (unused on the MEGA65) (bit mask)
.alias SYNCMOD_MASK 48  ; UART synchronisation mode flags (00=RX \& TX both async, 01=RX sync, TX async, 1x=TX sync, RX async (unused on the MEGA65) (bit mask)
.alias UART_RXEN_ADDR $D602  ; UART enable receive (address)
.alias RXEN_ADDR $D602  ; UART enable receive (address)
.alias UART_RXEN_MASK 64  ; UART enable receive (bit mask)
.alias RXEN_MASK 64  ; UART enable receive (bit mask)
.alias UART_TXEN_ADDR $D602  ; UART enable transmit (address)
.alias TXEN_ADDR $D602  ; UART enable transmit (address)
.alias UART_TXEN_MASK 128  ; UART enable transmit (bit mask)
.alias TXEN_MASK 128  ; UART enable transmit (bit mask)
.alias UART_DIVISOR $D603  ; UART baud rate divisor (16 bit). Baud rate = 7.09375MHz / DIVISOR, unless MEGA65 fast UART mode is enabled, in which case baud rate = 80MHz / DIVISOR
.alias C65_UART_DIVISOR $D604  ; UART baud rate divisor (16 bit). Baud rate = 7.09375MHz / DIVISOR, unless MEGA65 fast UART mode is enabled, in which case baud rate = 80MHz / DIVISOR
.alias UART_IMRXNMI_ADDR $D605  ; UART interrupt mask: NMI on RX (not yet implemented on the MEGA65) (address)
.alias IMRXNMI_ADDR $D605  ; UART interrupt mask: NMI on RX (not yet implemented on the MEGA65) (address)
.alias UART_IMRXNMI_MASK 16  ; UART interrupt mask: NMI on RX (not yet implemented on the MEGA65) (bit mask)
.alias IMRXNMI_MASK 16  ; UART interrupt mask: NMI on RX (not yet implemented on the MEGA65) (bit mask)
.alias UART_IMTXNMI_ADDR $D605  ; UART interrupt mask: NMI on TX (not yet implemented on the MEGA65) (address)
.alias IMTXNMI_ADDR $D605  ; UART interrupt mask: NMI on TX (not yet implemented on the MEGA65) (address)
.alias UART_IMTXNMI_MASK 32  ; UART interrupt mask: NMI on TX (not yet implemented on the MEGA65) (bit mask)
.alias IMTXNMI_MASK 32  ; UART interrupt mask: NMI on TX (not yet implemented on the MEGA65) (bit mask)
.alias UART_IMRXIRQ_ADDR $D605  ; UART interrupt mask: IRQ on RX (not yet implemented on the MEGA65) (address)
.alias IMRXIRQ_ADDR $D605  ; UART interrupt mask: IRQ on RX (not yet implemented on the MEGA65) (address)
.alias UART_IMRXIRQ_MASK 64  ; UART interrupt mask: IRQ on RX (not yet implemented on the MEGA65) (bit mask)
.alias IMRXIRQ_MASK 64  ; UART interrupt mask: IRQ on RX (not yet implemented on the MEGA65) (bit mask)
.alias UART_IMTXIRQ_ADDR $D605  ; UART interrupt mask: IRQ on TX (not yet implemented on the MEGA65) (address)
.alias IMTXIRQ_ADDR $D605  ; UART interrupt mask: IRQ on TX (not yet implemented on the MEGA65) (address)
.alias UART_IMTXIRQ_MASK 128  ; UART interrupt mask: IRQ on TX (not yet implemented on the MEGA65) (bit mask)
.alias IMTXIRQ_MASK 128  ; UART interrupt mask: IRQ on TX (not yet implemented on the MEGA65) (bit mask)
.alias UART_IFRXNMI_ADDR $D606  ; UART interrupt flag: NMI on RX (not yet implemented on the MEGA65) (address)
.alias IFRXNMI_ADDR $D606  ; UART interrupt flag: NMI on RX (not yet implemented on the MEGA65) (address)
.alias UART_IFRXNMI_MASK 16  ; UART interrupt flag: NMI on RX (not yet implemented on the MEGA65) (bit mask)
.alias IFRXNMI_MASK 16  ; UART interrupt flag: NMI on RX (not yet implemented on the MEGA65) (bit mask)
.alias UART_IFTXNMI_ADDR $D606  ; UART interrupt flag: NMI on TX (not yet implemented on the MEGA65) (address)
.alias IFTXNMI_ADDR $D606  ; UART interrupt flag: NMI on TX (not yet implemented on the MEGA65) (address)
.alias UART_IFTXNMI_MASK 32  ; UART interrupt flag: NMI on TX (not yet implemented on the MEGA65) (bit mask)
.alias IFTXNMI_MASK 32  ; UART interrupt flag: NMI on TX (not yet implemented on the MEGA65) (bit mask)
.alias UART_IFRXIRQ_ADDR $D606  ; UART interrupt flag: IRQ on RX (not yet implemented on the MEGA65) (address)
.alias IFRXIRQ_ADDR $D606  ; UART interrupt flag: IRQ on RX (not yet implemented on the MEGA65) (address)
.alias UART_IFRXIRQ_MASK 64  ; UART interrupt flag: IRQ on RX (not yet implemented on the MEGA65) (bit mask)
.alias IFRXIRQ_MASK 64  ; UART interrupt flag: IRQ on RX (not yet implemented on the MEGA65) (bit mask)
.alias UART_IFTXIRQ_ADDR $D606  ; UART interrupt flag: IRQ on TX (not yet implemented on the MEGA65) (address)
.alias IFTXIRQ_ADDR $D606  ; UART interrupt flag: IRQ on TX (not yet implemented on the MEGA65) (address)
.alias UART_IFTXIRQ_MASK 128  ; UART interrupt flag: IRQ on TX (not yet implemented on the MEGA65) (bit mask)
.alias IFTXIRQ_MASK 128  ; UART interrupt flag: IRQ on TX (not yet implemented on the MEGA65) (bit mask)
.alias UART_CAPLOCK_ADDR $D607  ; C65 capslock key sense (address)
.alias CAPLOCK_ADDR $D607  ; C65 capslock key sense (address)
.alias UART_CAPLOCK_MASK 1  ; C65 capslock key sense (bit mask)
.alias CAPLOCK_MASK 1  ; C65 capslock key sense (bit mask)
.alias UART_KEYCOL8_ADDR $D607  ; C65 keyboard column 8 select (address)
.alias KEYCOL8_ADDR $D607  ; C65 keyboard column 8 select (address)
.alias UART_KEYCOL8_MASK 2  ; C65 keyboard column 8 select (bit mask)
.alias KEYCOL8_MASK 2  ; C65 keyboard column 8 select (bit mask)
.alias UART_PORTEDDR_ADDR $D608  ; C65 keyboard extra lines Data Direction Register (DDR) (address)
.alias PORTEDDR_ADDR $D608  ; C65 keyboard extra lines Data Direction Register (DDR) (address)
.alias UART_PORTEDDR_MASK 3  ; C65 keyboard extra lines Data Direction Register (DDR) (bit mask)
.alias PORTEDDR_MASK 3  ; C65 keyboard extra lines Data Direction Register (DDR) (bit mask)
.alias UARTMISC_UFAST_ADDR $D609  ; C65 UART BAUD clock source: 1 = 7.09375MHz, 0 = 80MHz (VIC-IV pixel clock) (address)
.alias UFAST_ADDR $D609  ; C65 UART BAUD clock source: 1 = 7.09375MHz, 0 = 80MHz (VIC-IV pixel clock) (address)
.alias UARTMISC_UFAST_MASK 1  ; C65 UART BAUD clock source: 1 = 7.09375MHz, 0 = 80MHz (VIC-IV pixel clock) (bit mask)
.alias UFAST_MASK 1  ; C65 UART BAUD clock source: 1 = 7.09375MHz, 0 = 80MHz (VIC-IV pixel clock) (bit mask)
.alias UARTMISC_PORTF_ADDR $D60B  ; PMOD port A on FPGA board (data) (Nexys4 boards only) (address)
.alias PORTF_ADDR $D60B  ; PMOD port A on FPGA board (data) (Nexys4 boards only) (address)
.alias UARTMISC_PORTF_MASK 63  ; PMOD port A on FPGA board (data) (Nexys4 boards only) (bit mask)
.alias PORTF_MASK 63  ; PMOD port A on FPGA board (data) (Nexys4 boards only) (bit mask)
.alias UARTMISC_OSKZON_ADDR $D60B  ; Display hardware zoom of region under first touch point always (address)
.alias OSKZON_ADDR $D60B  ; Display hardware zoom of region under first touch point always (address)
.alias UARTMISC_OSKZON_MASK 64  ; Display hardware zoom of region under first touch point always (bit mask)
.alias OSKZON_MASK 64  ; Display hardware zoom of region under first touch point always (bit mask)
.alias UARTMISC_OSKZEN_ADDR $D60B  ; Display hardware zoom of region under first touch point for on-screen keyboard (address)
.alias OSKZEN_ADDR $D60B  ; Display hardware zoom of region under first touch point for on-screen keyboard (address)
.alias UARTMISC_OSKZEN_MASK 128  ; Display hardware zoom of region under first touch point for on-screen keyboard (bit mask)
.alias OSKZEN_MASK 128  ; Display hardware zoom of region under first touch point for on-screen keyboard (bit mask)
.alias UARTMISC_PORTFDDR_ADDR $D60C  ; PMOD port A on FPGA board (DDR) (address)
.alias UARTMISC_PORTFDDR_MASK 63  ; PMOD port A on FPGA board (DDR) (bit mask)
.alias GS_UARTMISC_PORTFDDR_ADDR $D60C  ; On Screen Keyboard (OSK) Zoom Control Data Direction Register (DDR). Must be set to output to control these features. (address)
.alias GS_UARTMISC_PORTFDDR_MASK 192  ; On Screen Keyboard (OSK) Zoom Control Data Direction Register (DDR). Must be set to output to control these features. (bit mask)
.alias UARTMISC_CONN41_ADDR $D60D  ; Internal 1541 drive connect (1=connect internal 1541 drive to IEC bus) (address)
.alias CONN41_ADDR $D60D  ; Internal 1541 drive connect (1=connect internal 1541 drive to IEC bus) (address)
.alias UARTMISC_CONN41_MASK 1  ; Internal 1541 drive connect (1=connect internal 1541 drive to IEC bus) (bit mask)
.alias CONN41_MASK 1  ; Internal 1541 drive connect (1=connect internal 1541 drive to IEC bus) (bit mask)
.alias UARTMISC_RST41_ADDR $D60D  ; Internal 1541 drive reset (1=reset, 0=operate) (address)
.alias RST41_ADDR $D60D  ; Internal 1541 drive reset (1=reset, 0=operate) (address)
.alias UARTMISC_RST41_MASK 2  ; Internal 1541 drive reset (1=reset, 0=operate) (bit mask)
.alias RST41_MASK 2  ; Internal 1541 drive reset (1=reset, 0=operate) (bit mask)
.alias UARTMISC_SDDATA_ADDR $D60D  ; SD card MOSI/MISO (address)
.alias SDDATA_ADDR $D60D  ; SD card MOSI/MISO (address)
.alias UARTMISC_SDDATA_MASK 4  ; SD card MOSI/MISO (bit mask)
.alias SDDATA_MASK 4  ; SD card MOSI/MISO (bit mask)
.alias UARTMISC_SDCLK_ADDR $D60D  ; SD card SCLK (address)
.alias SDCLK_ADDR $D60D  ; SD card SCLK (address)
.alias UARTMISC_SDCLK_MASK 8  ; SD card SCLK (bit mask)
.alias SDCLK_MASK 8  ; SD card SCLK (bit mask)
.alias UARTMISC_SDCS_ADDR $D60D  ; SD card CS_BO (address)
.alias SDCS_ADDR $D60D  ; SD card CS_BO (address)
.alias UARTMISC_SDCS_MASK 16  ; SD card CS_BO (bit mask)
.alias SDCS_MASK 16  ; SD card CS_BO (bit mask)
.alias UARTMISC_SDBSH_ADDR $D60D  ; Enable SD card bitbash mode (address)
.alias SDBSH_ADDR $D60D  ; Enable SD card bitbash mode (address)
.alias UARTMISC_SDBSH_MASK 32  ; Enable SD card bitbash mode (bit mask)
.alias SDBSH_MASK 32  ; Enable SD card bitbash mode (bit mask)
.alias UARTMISC_HDSDA_ADDR $D60D  ; HDMI I2C control interface SDA data line (address)
.alias HDSDA_ADDR $D60D  ; HDMI I2C control interface SDA data line (address)
.alias UARTMISC_HDSDA_MASK 64  ; HDMI I2C control interface SDA data line (bit mask)
.alias HDSDA_MASK 64  ; HDMI I2C control interface SDA data line (bit mask)
.alias UARTMISC_HDSCL_ADDR $D60D  ; HDMI I2C control interface SCL clock (address)
.alias HDSCL_ADDR $D60D  ; HDMI I2C control interface SCL clock (address)
.alias UARTMISC_HDSCL_MASK 128  ; HDMI I2C control interface SCL clock (bit mask)
.alias HDSCL_MASK 128  ; HDMI I2C control interface SCL clock (bit mask)
.alias UARTMISC_BASHDDR $D60E  ; Data Direction Register (DDR) for \$D60D bit bashing port.
.alias BASHDDR $D60E  ; Data Direction Register (DDR) for \$D60D bit bashing port.
.alias UARTMISC_KEYLEFT_ADDR $D60F  ; Directly read C65 Cursor left key (address)
.alias KEYLEFT_ADDR $D60F  ; Directly read C65 Cursor left key (address)
.alias UARTMISC_KEYLEFT_MASK 1  ; Directly read C65 Cursor left key (bit mask)
.alias KEYLEFT_MASK 1  ; Directly read C65 Cursor left key (bit mask)
.alias UARTMISC_KEYUP_ADDR $D60F  ; Directly read C65 Cursor up key (address)
.alias KEYUP_ADDR $D60F  ; Directly read C65 Cursor up key (address)
.alias UARTMISC_KEYUP_MASK 2  ; Directly read C65 Cursor up key (bit mask)
.alias KEYUP_MASK 2  ; Directly read C65 Cursor up key (bit mask)
.alias UARTMISC_REALHW_ADDR $D60F  ; Set to 1 if the MEGA65 is running on real hardware, set to 0 if emulated (Xemu) or simulated (ghdl) (address)
.alias REALHW_ADDR $D60F  ; Set to 1 if the MEGA65 is running on real hardware, set to 0 if emulated (Xemu) or simulated (ghdl) (address)
.alias UARTMISC_REALHW_MASK 32  ; Set to 1 if the MEGA65 is running on real hardware, set to 0 if emulated (Xemu) or simulated (ghdl) (bit mask)
.alias REALHW_MASK 32  ; Set to 1 if the MEGA65 is running on real hardware, set to 0 if emulated (Xemu) or simulated (ghdl) (bit mask)
.alias UARTMISC_OSKDIM_ADDR $D60F  ; Light or heavy dimming of background material behind on-screen keyboard (address)
.alias OSKDIM_ADDR $D60F  ; Light or heavy dimming of background material behind on-screen keyboard (address)
.alias UARTMISC_OSKDIM_MASK 64  ; Light or heavy dimming of background material behind on-screen keyboard (bit mask)
.alias OSKDIM_MASK 64  ; Light or heavy dimming of background material behind on-screen keyboard (bit mask)
.alias UARTMISC_ACCESSKEY_ADDR $D60F  ; Enable accessible keyboard input via joystick port 2 fire button (address)
.alias ACCESSKEY_ADDR $D60F  ; Enable accessible keyboard input via joystick port 2 fire button (address)
.alias UARTMISC_ACCESSKEY_MASK 128  ; Enable accessible keyboard input via joystick port 2 fire button (bit mask)
.alias ACCESSKEY_MASK 128  ; Enable accessible keyboard input via joystick port 2 fire button (bit mask)
.alias UARTMISC_ASCIIKEY $D610  ; Last key press as ASCII (hardware accelerated keyboard scanner). Write to clear event ready for next.
.alias ASCIIKEY $D610  ; Last key press as ASCII (hardware accelerated keyboard scanner). Write to clear event ready for next.
.alias UARTMISC_MRSHFT_ADDR $D611  ; Right shift key state (hardware accelerated keyboard scanner). (address)
.alias MRSHFT_ADDR $D611  ; Right shift key state (hardware accelerated keyboard scanner). (address)
.alias UARTMISC_MRSHFT_MASK 1  ; Right shift key state (hardware accelerated keyboard scanner). (bit mask)
.alias MRSHFT_MASK 1  ; Right shift key state (hardware accelerated keyboard scanner). (bit mask)
.alias UARTMISC_MLSHFT_ADDR $D611  ; Left shift key state (hardware accelerated keyboard scanner). (address)
.alias MLSHFT_ADDR $D611  ; Left shift key state (hardware accelerated keyboard scanner). (address)
.alias UARTMISC_MLSHFT_MASK 2  ; Left shift key state (hardware accelerated keyboard scanner). (bit mask)
.alias MLSHFT_MASK 2  ; Left shift key state (hardware accelerated keyboard scanner). (bit mask)
.alias UARTMISC_MCTRL_ADDR $D611  ; CTRL key state (hardware accelerated keyboard scanner). (address)
.alias MCTRL_ADDR $D611  ; CTRL key state (hardware accelerated keyboard scanner). (address)
.alias UARTMISC_MCTRL_MASK 4  ; CTRL key state (hardware accelerated keyboard scanner). (bit mask)
.alias MCTRL_MASK 4  ; CTRL key state (hardware accelerated keyboard scanner). (bit mask)
.alias UARTMISC_MMEGA_ADDR $D611  ; MEGA/C= key state (hardware accelerated keyboard scanner). (address)
.alias MMEGA_ADDR $D611  ; MEGA/C= key state (hardware accelerated keyboard scanner). (address)
.alias UARTMISC_MMEGA_MASK 8  ; MEGA/C= key state (hardware accelerated keyboard scanner). (bit mask)
.alias MMEGA_MASK 8  ; MEGA/C= key state (hardware accelerated keyboard scanner). (bit mask)
.alias UARTMISC_MALT_ADDR $D611  ; ALT key state (hardware accelerated keyboard scanner). (address)
.alias MALT_ADDR $D611  ; ALT key state (hardware accelerated keyboard scanner). (address)
.alias UARTMISC_MALT_MASK 16  ; ALT key state (hardware accelerated keyboard scanner). (bit mask)
.alias MALT_MASK 16  ; ALT key state (hardware accelerated keyboard scanner). (bit mask)
.alias UARTMISC_MSCRL_ADDR $D611  ; NOSCRL key state (hardware accelerated keyboard scanner). (address)
.alias MSCRL_ADDR $D611  ; NOSCRL key state (hardware accelerated keyboard scanner). (address)
.alias UARTMISC_MSCRL_MASK 32  ; NOSCRL key state (hardware accelerated keyboard scanner). (bit mask)
.alias MSCRL_MASK 32  ; NOSCRL key state (hardware accelerated keyboard scanner). (bit mask)
.alias UARTMISC_MCAPS_ADDR $D611  ; CAPS LOCK key state (hardware accelerated keyboard scanner). (address)
.alias MCAPS_ADDR $D611  ; CAPS LOCK key state (hardware accelerated keyboard scanner). (address)
.alias UARTMISC_MCAPS_MASK 64  ; CAPS LOCK key state (hardware accelerated keyboard scanner). (bit mask)
.alias MCAPS_MASK 64  ; CAPS LOCK key state (hardware accelerated keyboard scanner). (bit mask)
.alias UARTMISC_WGTKEY_ADDR $D612  ; Enable widget board keyboard/joystick input (address)
.alias WGTKEY_ADDR $D612  ; Enable widget board keyboard/joystick input (address)
.alias UARTMISC_WGTKEY_MASK 1  ; Enable widget board keyboard/joystick input (bit mask)
.alias WGTKEY_MASK 1  ; Enable widget board keyboard/joystick input (bit mask)
.alias UARTMISC_PS2KEY_ADDR $D612  ; Enable ps2 keyboard/joystick input (address)
.alias PS2KEY_ADDR $D612  ; Enable ps2 keyboard/joystick input (address)
.alias UARTMISC_PS2KEY_MASK 2  ; Enable ps2 keyboard/joystick input (bit mask)
.alias PS2KEY_MASK 2  ; Enable ps2 keyboard/joystick input (bit mask)
.alias UARTMISC_PHYKEY_ADDR $D612  ; Enable physical keyboard input (address)
.alias PHYKEY_ADDR $D612  ; Enable physical keyboard input (address)
.alias UARTMISC_PHYKEY_MASK 4  ; Enable physical keyboard input (bit mask)
.alias PHYKEY_MASK 4  ; Enable physical keyboard input (bit mask)
.alias UARTMISC_VRTKEY_ADDR $D612  ; Enable virtual/snythetic keyboard input (address)
.alias VRTKEY_ADDR $D612  ; Enable virtual/snythetic keyboard input (address)
.alias UARTMISC_VRTKEY_MASK 8  ; Enable virtual/snythetic keyboard input (bit mask)
.alias VRTKEY_MASK 8  ; Enable virtual/snythetic keyboard input (bit mask)
.alias UARTMISC_OSKDEBUG_ADDR $D612  ; Debug OSK overlay (WRITE ONLY) (address)
.alias OSKDEBUG_ADDR $D612  ; Debug OSK overlay (WRITE ONLY) (address)
.alias UARTMISC_OSKDEBUG_MASK 16  ; Debug OSK overlay (WRITE ONLY) (bit mask)
.alias OSKDEBUG_MASK 16  ; Debug OSK overlay (WRITE ONLY) (bit mask)
.alias UARTMISC_PS2JOY_ADDR $D612  ; Enable PS/2 / USB keyboard simulated joystick input (address)
.alias PS2JOY_ADDR $D612  ; Enable PS/2 / USB keyboard simulated joystick input (address)
.alias UARTMISC_PS2JOY_MASK 16  ; Enable PS/2 / USB keyboard simulated joystick input (bit mask)
.alias PS2JOY_MASK 16  ; Enable PS/2 / USB keyboard simulated joystick input (bit mask)
.alias UARTMISC_JOYSWAP_ADDR $D612  ; Exchange joystick ports 1 \& 2 (address)
.alias JOYSWAP_ADDR $D612  ; Exchange joystick ports 1 \& 2 (address)
.alias UARTMISC_JOYSWAP_MASK 32  ; Exchange joystick ports 1 \& 2 (bit mask)
.alias JOYSWAP_MASK 32  ; Exchange joystick ports 1 \& 2 (bit mask)
.alias UARTMISC_LJOYA_ADDR $D612  ; Rotate inputs of joystick A by 180 degrees (for left handed use) (address)
.alias LJOYA_ADDR $D612  ; Rotate inputs of joystick A by 180 degrees (for left handed use) (address)
.alias UARTMISC_LJOYA_MASK 64  ; Rotate inputs of joystick A by 180 degrees (for left handed use) (bit mask)
.alias LJOYA_MASK 64  ; Rotate inputs of joystick A by 180 degrees (for left handed use) (bit mask)
.alias UARTMISC_LJOYB_ADDR $D612  ; Rotate inputs of joystick B by 180 degrees (for left handed use) (address)
.alias LJOYB_ADDR $D612  ; Rotate inputs of joystick B by 180 degrees (for left handed use) (address)
.alias UARTMISC_LJOYB_MASK 128  ; Rotate inputs of joystick B by 180 degrees (for left handed use) (bit mask)
.alias LJOYB_MASK 128  ; Rotate inputs of joystick B by 180 degrees (for left handed use) (bit mask)
.alias DEBUG_CRTACSCNT $D613  ; Count of cartridge port memory accesses (read only)
.alias CRTACSCNT $D613  ; Count of cartridge port memory accesses (read only)
.alias DEBUG_KEYMATRIXPEEK $D614  ; 8-bit segment of combined keyboard matrix (READ)
.alias KEYMATRIXPEEK $D614  ; 8-bit segment of combined keyboard matrix (READ)
.alias UARTMISC_VIRTKEY1_ADDR $D615  ; Set to \$7F for no key down, else specify virtual key press. (address)
.alias VIRTKEY1_ADDR $D615  ; Set to \$7F for no key down, else specify virtual key press. (address)
.alias UARTMISC_VIRTKEY1_MASK 127  ; Set to \$7F for no key down, else specify virtual key press. (bit mask)
.alias VIRTKEY1_MASK 127  ; Set to \$7F for no key down, else specify virtual key press. (bit mask)
.alias UARTMISC_OSKEN_ADDR $D615  ; Enable display of on-screen keyboard composited overlay (address)
.alias OSKEN_ADDR $D615  ; Enable display of on-screen keyboard composited overlay (address)
.alias UARTMISC_OSKEN_MASK 128  ; Enable display of on-screen keyboard composited overlay (bit mask)
.alias OSKEN_MASK 128  ; Enable display of on-screen keyboard composited overlay (bit mask)
.alias UARTMISC_VIRTKEY2_ADDR $D616  ; Set to \$7F for no key down, else specify 2nd virtual key press. (address)
.alias VIRTKEY2_ADDR $D616  ; Set to \$7F for no key down, else specify 2nd virtual key press. (address)
.alias UARTMISC_VIRTKEY2_MASK 127  ; Set to \$7F for no key down, else specify 2nd virtual key press. (bit mask)
.alias VIRTKEY2_MASK 127  ; Set to \$7F for no key down, else specify 2nd virtual key press. (bit mask)
.alias UARTMISC_OSKALT_ADDR $D616  ; Display alternate on-screen keyboard layout (typically dial pad for MEGA65 telephone) (address)
.alias OSKALT_ADDR $D616  ; Display alternate on-screen keyboard layout (typically dial pad for MEGA65 telephone) (address)
.alias UARTMISC_OSKALT_MASK 128  ; Display alternate on-screen keyboard layout (typically dial pad for MEGA65 telephone) (bit mask)
.alias OSKALT_MASK 128  ; Display alternate on-screen keyboard layout (typically dial pad for MEGA65 telephone) (bit mask)
.alias UARTMISC_VIRTKEY3_ADDR $D617  ; Set to \$7F for no key down, else specify 3nd virtual key press. (address)
.alias VIRTKEY3_ADDR $D617  ; Set to \$7F for no key down, else specify 3nd virtual key press. (address)
.alias UARTMISC_VIRTKEY3_MASK 127  ; Set to \$7F for no key down, else specify 3nd virtual key press. (bit mask)
.alias VIRTKEY3_MASK 127  ; Set to \$7F for no key down, else specify 3nd virtual key press. (bit mask)
.alias UARTMISC_OSKTOP_ADDR $D617  ; 1=Display on-screen keyboard at top, 0=Disply on-screen keyboard at bottom of screen. (address)
.alias OSKTOP_ADDR $D617  ; 1=Display on-screen keyboard at top, 0=Disply on-screen keyboard at bottom of screen. (address)
.alias UARTMISC_OSKTOP_MASK 128  ; 1=Display on-screen keyboard at top, 0=Disply on-screen keyboard at bottom of screen. (bit mask)
.alias OSKTOP_MASK 128  ; 1=Display on-screen keyboard at top, 0=Disply on-screen keyboard at bottom of screen. (bit mask)
.alias UARTMISC_KSCNRATE $D618  ; Physical keyboard scan rate (\$00=50MHz, \$FF=~200KHz)
.alias KSCNRATE $D618  ; Physical keyboard scan rate (\$00=50MHz, \$FF=~200KHz)
.alias UARTMISC_UNUSED $D619  ; port o output value
.alias UNUSED $D619  ; port o output value
.alias UARTMISC_SYSCTL $D61A  ; System control flags (target specific)
.alias SYSCTL $D61A  ; System control flags (target specific)
.alias SYSCTL_AUDMUTE_ADDR $D61A  ; Mute digital video audio (MEGA65 R2 only) (address)
.alias AUDMUTE_ADDR $D61A  ; Mute digital video audio (MEGA65 R2 only) (address)
.alias SYSCTL_AUDMUTE_MASK 1  ; Mute digital video audio (MEGA65 R2 only) (bit mask)
.alias AUDMUTE_MASK 1  ; Mute digital video audio (MEGA65 R2 only) (bit mask)
.alias SYSCTL_DVI_ADDR $D61A  ; Control digital video as DVI (disables audio) (address)
.alias DVI_ADDR $D61A  ; Control digital video as DVI (disables audio) (address)
.alias SYSCTL_DVI_MASK 2  ; Control digital video as DVI (disables audio) (bit mask)
.alias DVI_MASK 2  ; Control digital video as DVI (disables audio) (bit mask)
.alias SYSCTL_AUDDBG_ADDR $D61A  ; Visualise audio samples (DEBUG) (address)
.alias AUDDBG_ADDR $D61A  ; Visualise audio samples (DEBUG) (address)
.alias SYSCTL_AUDDBG_MASK 4  ; Visualise audio samples (DEBUG) (bit mask)
.alias AUDDBG_MASK 4  ; Visualise audio samples (DEBUG) (bit mask)
.alias SYSCTL_AUD48K_ADDR $D61A  ; Select 48KHz or 44.1KHz digital video audio sample rate (address)
.alias AUD48K_ADDR $D61A  ; Select 48KHz or 44.1KHz digital video audio sample rate (address)
.alias SYSCTL_AUD48K_MASK 8  ; Select 48KHz or 44.1KHz digital video audio sample rate (bit mask)
.alias AUD48K_MASK 8  ; Select 48KHz or 44.1KHz digital video audio sample rate (bit mask)
.alias SYSCTL_LED_ADDR $D61A  ; Control LED next to U1 on mother board (address)
.alias SYSCTL_LED_MASK 16  ; Control LED next to U1 on mother board (bit mask)
.alias SYSCTL_AUDINV_ADDR $D61A  ; Invert digital video audio sample values (address)
.alias AUDINV_ADDR $D61A  ; Invert digital video audio sample values (address)
.alias SYSCTL_AUDINV_MASK 128  ; Invert digital video audio sample values (bit mask)
.alias AUDINV_MASK 128  ; Invert digital video audio sample values (bit mask)
.alias DEBUG_AMIMOUSDETECT $D61B  ; READ 1351/amiga mouse auto detection DEBUG
.alias AMIMOUSDETECT $D61B  ; READ 1351/amiga mouse auto detection DEBUG
.alias DEBUG__1541PCLSB $D61C  ; internal 1541 PC LSB
.alias _1541PCLSB $D61C  ; internal 1541 PC LSB
.alias UARTMISC_Keyboard_ADDR $D61D  ; LED register select (R,G,B channels x 4 = 0 to 11) (address)
.alias UARTMISC_Keyboard_MASK 127  ; LED register select (R,G,B channels x 4 = 0 to 11) (bit mask)
.alias GS_UARTMISC_Keyboard_ADDR $D61D  ; LED control enable (address)
.alias GS_UARTMISC_Keyboard_MASK 128  ; LED control enable (bit mask)
.alias UARTMISC_Keyboard $D61E  ; register value (write only)
.alias Keyboard $D61E  ; register value (write only)
.alias DEBUG_BUCKYCOPY $D61F  ; DUPLICATE Modifier key state (hardware accelerated keyboard scanner).
.alias BUCKYCOPY $D61F  ; DUPLICATE Modifier key state (hardware accelerated keyboard scanner).
.alias UARTMISC_POTAX $D620  ; Read Port A paddle X, without having to fiddle with SID/CIA settings.
.alias POTAX $D620  ; Read Port A paddle X, without having to fiddle with SID/CIA settings.
.alias UARTMISC_POTAY $D621  ; Read Port A paddle Y, without having to fiddle with SID/CIA settings.
.alias POTAY $D621  ; Read Port A paddle Y, without having to fiddle with SID/CIA settings.
.alias UARTMISC_POTBX $D622  ; Read Port B paddle X, without having to fiddle with SID/CIA settings.
.alias POTBX $D622  ; Read Port B paddle X, without having to fiddle with SID/CIA settings.
.alias UARTMISC_POTBY $D623  ; Read Port B paddle Y, without having to fiddle with SID/CIA settings.
.alias POTBY $D623  ; Read Port B paddle Y, without having to fiddle with SID/CIA settings.
.alias DEBUG_POTDEBUG $D624  ; READ ONLY flags for paddles. See c65uart.vhdl for more information.
.alias POTDEBUG $D624  ; READ ONLY flags for paddles. See c65uart.vhdl for more information.
.alias UARTMISC_J21L $D625  ; J21 pins 1 -- 6, 9 -- 10 input/output values
.alias J21L $D625  ; J21 pins 1 -- 6, 9 -- 10 input/output values
.alias UARTMISC_J21H $D626  ; J21 pins 11 -- 14 input/output values
.alias J21H $D626  ; J21 pins 11 -- 14 input/output values
.alias UARTMISC_J21LDDR $D627  ; J21 pins 1 -- 6, 9 -- 10 data direction register
.alias J21LDDR $D627  ; J21 pins 1 -- 6, 9 -- 10 data direction register
.alias UARTMISC_J21HDDR $D628  ; J21 pins 11 -- 14 data direction register
.alias J21HDDR $D628  ; J21 pins 11 -- 14 data direction register
.alias UARTMISC_M65MODEL $D629  ; MEGA65 model ID. Can be used to determine the model of MEGA65 a programme is running on, e.g., to enable touch controls on MEGAphone.
.alias M65MODEL $D629  ; MEGA65 model ID. Can be used to determine the model of MEGA65 a programme is running on, e.g., to enable touch controls on MEGAphone.
.alias KBD_FWDATEL $D62A  ; LSB of keyboard firmware date stamp (days since 1 Jan 2020)
.alias KBD_FWDATEH $D62B  ; MSB of keyboard firmware date stamp (days since 1 Jan 2020)
.alias KBD_FWGIT0 $D62C  ; LSB of keyboard firmware git commit
.alias GS_KBD_FWGIT0 $D62D  ; 2nd byte of keyboard firmware git commit
.alias GS_KBD_FWGIT0_2 $D62E  ; 3rd byte of keyboard firmware git commit
.alias GS_KBD_FWGIT0_3 $D62F  ; MSB of keyboard firmware git commit
.alias FPGA_FWDATEL $D630  ; LSB of MEGA65 FPGA design date stamp (days since 1 Jan 2020)
.alias FPGA_FWDATEH $D631  ; MSB of MEGA65 FPGA design date stamp (days since 1 Jan 2020)
.alias FPGA_FWGIT0 $D632  ; LSB of MEGA65 FPGA design git commit
.alias GS_FPGA_FWGIT0 $D633  ; 2nd byte of MEGA65 FPGA design git commit
.alias GS_FPGA_FWGIT0_2 $D634  ; 3rd byte of MEGA65 FPGA design git commit
.alias GS_FPGA_FWGIT0_3 $D635  ; MSB of MEGA65 FPGA design git commit
.alias AUXFPGA_FWDATEL $D636  ; LSB of Auxilliary (MAX10) FPGA design date stamp (days since 1 Jan 2020)
.alias AUXFPGA_MFWDATEH $D637  ; MSB of Auxilliary (MAX10) FPGA design date stamp (days since 1 Jan 2020)
.alias MFWDATEH $D637  ; MSB of Auxilliary (MAX10) FPGA design date stamp (days since 1 Jan 2020)
.alias AUXFPGA_FWGIT0 $D638  ; LSB of Auxilliary (MAX10) FPGA design git commit
.alias GS_AUXFPGA_FWGIT0 $D639  ; 2nd byte of Auxilliary (MAX10) FPGA design git commit
.alias GS_AUXFPGA_FWGIT0_2 $D63A  ; 3rd byte of Auxilliary (MAX10) FPGA design git commit
.alias GS_AUXFPGA_FWGIT0_3 $D63B  ; MSB of Auxilliary (MAX10) FPGA design git commit
.alias SID_SIDMODE_ADDR $D63C  ; Select SID mode: 0=6581, 1=8580 (address)
.alias SIDMODE_ADDR $D63C  ; Select SID mode: 0=6581, 1=8580 (address)
.alias SID_SIDMODE_MASK 15  ; Select SID mode: 0=6581, 1=8580 (bit mask)
.alias SIDMODE_MASK 15  ; Select SID mode: 0=6581, 1=8580 (bit mask)
.alias AUDIOMIX_DCTRKEN_ADDR $D63C  ; Enable DC offset subtraction in audio mixer (address)
.alias DCTRKEN_ADDR $D63C  ; Enable DC offset subtraction in audio mixer (address)
.alias AUDIOMIX_DCTRKEN_MASK 16  ; Enable DC offset subtraction in audio mixer (bit mask)
.alias DCTRKEN_MASK 16  ; Enable DC offset subtraction in audio mixer (bit mask)
.alias DEBUG_RESETSRC_ADDR $D63C  ; Source of last CPU reset (address)
.alias RESETSRC_ADDR $D63C  ; Source of last CPU reset (address)
.alias DEBUG_RESETSRC_MASK 224  ; Source of last CPU reset (bit mask)
.alias RESETSRC_MASK 224  ; Source of last CPU reset (bit mask)
.alias AUDIOMIX_DCTIME $D63D  ; Audio mixer DC-estimation time step. Lower values = faster updating of DC estimation, at the cost of making low-frequencies quieter.
.alias DCTIME $D63D  ; Audio mixer DC-estimation time step. Lower values = faster updating of DC estimation, at the cost of making low-frequencies quieter.
.alias CPU_HTRAP00 $D640  ; Writing triggers hypervisor trap \$XX
.alias HTRAP00 $D640  ; Writing triggers hypervisor trap \$XX
.alias HCPU_REGA $D640  ; Hypervisor A register storage
.alias REGA $D640  ; Hypervisor A register storage
.alias CPU_HTRAP01 $D641  ; @HTRAPXX
.alias HTRAP01 $D641  ; @HTRAPXX
.alias HCPU_REGX $D641  ; Hypervisor X register storage
.alias REGX $D641  ; Hypervisor X register storage
.alias CPU_HTRAP02 $D642  ; @HTRAPXX
.alias HTRAP02 $D642  ; @HTRAPXX
.alias CPU_HTRAP03 $D643  ; @HTRAPXX
.alias HTRAP03 $D643  ; @HTRAPXX
.alias HCPU_REGZ $D643  ; Hypervisor Z register storage
.alias REGZ $D643  ; Hypervisor Z register storage
.alias CPU_HTRAP04 $D644  ; @HTRAPXX
.alias HTRAP04 $D644  ; @HTRAPXX
.alias HCPU_REGB $D644  ; Hypervisor B register storage
.alias REGB $D644  ; Hypervisor B register storage
.alias CPU_HTRAP05 $D645  ; @HTRAPXX
.alias HTRAP05 $D645  ; @HTRAPXX
.alias HCPU_SPL $D645  ; Hypervisor SPL register storage
.alias SPL $D645  ; Hypervisor SPL register storage
.alias CPU_HTRAP06 $D646  ; @HTRAPXX
.alias HTRAP06 $D646  ; @HTRAPXX
.alias HCPU_SPH $D646  ; Hypervisor SPH register storage
.alias SPH $D646  ; Hypervisor SPH register storage
.alias CPU_HTRAP07 $D647  ; @HTRAPXX
.alias HTRAP07 $D647  ; @HTRAPXX
.alias HCPU_PFLAGS $D647  ; Hypervisor P register storage
.alias PFLAGS $D647  ; Hypervisor P register storage
.alias CPU_HTRAP08 $D648  ; @HTRAPXX
.alias HTRAP08 $D648  ; @HTRAPXX
.alias HCPU_PCL $D648  ; Hypervisor PC-low register storage
.alias PCL $D648  ; Hypervisor PC-low register storage
.alias CPU_HTRAP09 $D649  ; @HTRAPXX
.alias HTRAP09 $D649  ; @HTRAPXX
.alias HCPU_PCH $D649  ; Hypervisor PC-high register storage
.alias PCH $D649  ; Hypervisor PC-high register storage
.alias CPU_HTRAP0A $D64A  ; @HTRAPXX
.alias HTRAP0A $D64A  ; @HTRAPXX
.alias HCPU_MAPLO $D64A  ; Hypervisor MAPLO register storage (high bits)
.alias CPU_HTRAP0B $D64B  ; @HTRAPXX
.alias HTRAP0B $D64B  ; @HTRAPXX
.alias GS_HCPU_MAPLO $D64B  ; Hypervisor MAPLO register storage (low bits)
.alias CPU_HTRAP0C $D64C  ; @HTRAPXX
.alias HTRAP0C $D64C  ; @HTRAPXX
.alias HCPU_MAPHI $D64C  ; Hypervisor MAPHI register storage (high bits)
.alias CPU_HTRAP0D $D64D  ; @HTRAPXX
.alias HTRAP0D $D64D  ; @HTRAPXX
.alias GS_HCPU_MAPHI $D64D  ; Hypervisor MAPHI register storage (low bits)
.alias CPU_HTRAP0E $D64E  ; @HTRAPXX
.alias HTRAP0E $D64E  ; @HTRAPXX
.alias HCPU_MAPLOMB $D64E  ; Hypervisor MAPLO mega-byte number register storage
.alias MAPLOMB $D64E  ; Hypervisor MAPLO mega-byte number register storage
.alias CPU_HTRAP0F $D64F  ; @HTRAPXX
.alias HTRAP0F $D64F  ; @HTRAPXX
.alias HCPU_MAPHIMB $D64F  ; Hypervisor MAPHI mega-byte number register storage
.alias MAPHIMB $D64F  ; Hypervisor MAPHI mega-byte number register storage
.alias CPU_HTRAP10 $D650  ; @HTRAPXX
.alias HTRAP10 $D650  ; @HTRAPXX
.alias HCPU_PORT00 $D650  ; Hypervisor CPU port \$00 value
.alias PORT00 $D650  ; Hypervisor CPU port \$00 value
.alias CPU_HTRAP11 $D651  ; @HTRAPXX
.alias HTRAP11 $D651  ; @HTRAPXX
.alias HCPU_PORT01 $D651  ; Hypervisor CPU port \$01 value
.alias PORT01 $D651  ; Hypervisor CPU port \$01 value
.alias CPU_HTRAP12 $D652  ; @HTRAPXX
.alias HTRAP12 $D652  ; @HTRAPXX
.alias HCPU_VICMODE_ADDR $D652  ; VIC-II/VIC-III/VIC-IV mode select (address)
.alias VICMODE_ADDR $D652  ; VIC-II/VIC-III/VIC-IV mode select (address)
.alias HCPU_VICMODE_MASK 3  ; VIC-II/VIC-III/VIC-IV mode select (bit mask)
.alias VICMODE_MASK 3  ; VIC-II/VIC-III/VIC-IV mode select (bit mask)
.alias HCPU_EXSID_ADDR $D652  ; 0=Use internal SIDs, 1=Use external(1) SIDs (address)
.alias EXSID_ADDR $D652  ; 0=Use internal SIDs, 1=Use external(1) SIDs (address)
.alias HCPU_EXSID_MASK 4  ; 0=Use internal SIDs, 1=Use external(1) SIDs (bit mask)
.alias EXSID_MASK 4  ; 0=Use internal SIDs, 1=Use external(1) SIDs (bit mask)
.alias CPU_HTRAP13 $D653  ; @HTRAPXX
.alias HTRAP13 $D653  ; @HTRAPXX
.alias HCPU_DMASRCMB $D653  ; Hypervisor DMAgic source MB
.alias DMASRCMB $D653  ; Hypervisor DMAgic source MB
.alias CPU_HTRAP14 $D654  ; @HTRAPXX
.alias HTRAP14 $D654  ; @HTRAPXX
.alias HCPU_DMADSTMB $D654  ; Hypervisor DMAgic destination MB
.alias DMADSTMB $D654  ; Hypervisor DMAgic destination MB
.alias CPU_HTRAP15 $D655  ; @HTRAPXX
.alias HTRAP15 $D655  ; @HTRAPXX
.alias HCPU_DMALADDR $D655  ; Hypervisor DMAGic list address bits 0-7
.alias CPU_HTRAP16 $D656  ; @HTRAPXX
.alias HTRAP16 $D656  ; @HTRAPXX
.alias GS_HCPU_DMALADDR $D656  ; Hypervisor DMAGic list address bits 15-8
.alias CPU_HTRAP17 $D657  ; @HTRAPXX
.alias HTRAP17 $D657  ; @HTRAPXX
.alias GS_HCPU_DMALADDR_2 $D657  ; Hypervisor DMAGic list address bits 23-16
.alias CPU_HTRAP18 $D658  ; @HTRAPXX
.alias HTRAP18 $D658  ; @HTRAPXX
.alias GS_HCPU_DMALADDR_3 $D658  ; Hypervisor DMAGic list address bits 27-24
.alias CPU_HTRAP19 $D659  ; @HTRAPXX
.alias HTRAP19 $D659  ; @HTRAPXX
.alias HCPU_VFLOP_ADDR $D659  ; 1=Virtualise SD/Floppy0 access (usually for access via serial debugger interface) (address)
.alias HCPU_VFLOP_MASK 1  ; 1=Virtualise SD/Floppy0 access (usually for access via serial debugger interface) (bit mask)
.alias GS_HCPU_VFLOP_ADDR $D659  ; 1=Virtualise SD/Floppy1 access (usually for access via serial debugger interface) (address)
.alias GS_HCPU_VFLOP_MASK 2  ; 1=Virtualise SD/Floppy1 access (usually for access via serial debugger interface) (bit mask)
.alias CPU_HTRAP1A $D65A  ; @HTRAPXX
.alias HTRAP1A $D65A  ; @HTRAPXX
.alias CPU_HTRAP1B $D65B  ; @HTRAPXX
.alias HTRAP1B $D65B  ; @HTRAPXX
.alias CPU_HTRAP1C $D65C  ; @HTRAPXX
.alias HTRAP1C $D65C  ; @HTRAPXX
.alias CPU_HTRAP1D $D65D  ; @HTRAPXX
.alias HTRAP1D $D65D  ; @HTRAPXX
.alias CPU_HTRAP1E $D65E  ; @HTRAPXX
.alias HTRAP1E $D65E  ; @HTRAPXX
.alias CPU_HTRAP1F $D65F  ; @HTRAPXX
.alias HTRAP1F $D65F  ; @HTRAPXX
.alias CPU_HTRAP20 $D660  ; @HTRAPXX
.alias HTRAP20 $D660  ; @HTRAPXX
.alias CPU_HTRAP21 $D661  ; @HTRAPXX
.alias HTRAP21 $D661  ; @HTRAPXX
.alias CPU_HTRAP22 $D662  ; @HTRAPXX
.alias HTRAP22 $D662  ; @HTRAPXX
.alias CPU_HTRAP23 $D663  ; @HTRAPXX
.alias HTRAP23 $D663  ; @HTRAPXX
.alias CPU_HTRAP24 $D664  ; @HTRAPXX
.alias HTRAP24 $D664  ; @HTRAPXX
.alias CPU_HTRAP25 $D665  ; @HTRAPXX
.alias HTRAP25 $D665  ; @HTRAPXX
.alias CPU_HTRAP26 $D666  ; @HTRAPXX
.alias HTRAP26 $D666  ; @HTRAPXX
.alias CPU_HTRAP27 $D667  ; @HTRAPXX
.alias HTRAP27 $D667  ; @HTRAPXX
.alias CPU_HTRAP28 $D668  ; @HTRAPXX
.alias HTRAP28 $D668  ; @HTRAPXX
.alias CPU_HTRAP29 $D669  ; @HTRAPXX
.alias HTRAP29 $D669  ; @HTRAPXX
.alias CPU_HTRAP2A $D66A  ; @HTRAPXX
.alias HTRAP2A $D66A  ; @HTRAPXX
.alias CPU_HTRAP2B $D66B  ; @HTRAPXX
.alias HTRAP2B $D66B  ; @HTRAPXX
.alias CPU_HTRAP2C $D66C  ; @HTRAPXX
.alias HTRAP2C $D66C  ; @HTRAPXX
.alias CPU_HTRAP2D $D66D  ; @HTRAPXX
.alias HTRAP2D $D66D  ; @HTRAPXX
.alias CPU_HTRAP2E $D66E  ; @HTRAPXX
.alias HTRAP2E $D66E  ; @HTRAPXX
.alias CPU_HTRAP2F $D66F  ; @HTRAPXX
.alias HTRAP2F $D66F  ; @HTRAPXX
.alias CPU_HTRAP30 $D670  ; @HTRAPXX
.alias HTRAP30 $D670  ; @HTRAPXX
.alias HCPU_GEORAMBASE $D670  ; Hypervisor GeoRAM base address (x MB)
.alias GEORAMBASE $D670  ; Hypervisor GeoRAM base address (x MB)
.alias CPU_HTRAP31 $D671  ; @HTRAPXX
.alias HTRAP31 $D671  ; @HTRAPXX
.alias HCPU_GEORAMMASK $D671  ; Hypervisor GeoRAM address mask (applied to GeoRAM block register)
.alias GEORAMMASK $D671  ; Hypervisor GeoRAM address mask (applied to GeoRAM block register)
.alias CPU_HTRAP32 $D672  ; @HTRAPXX
.alias HTRAP32 $D672  ; @HTRAPXX
.alias HCPU_MATRIXEN_ADDR $D672  ; Enable composited Matrix Mode, and disable UART access to serial monitor. (address)
.alias MATRIXEN_ADDR $D672  ; Enable composited Matrix Mode, and disable UART access to serial monitor. (address)
.alias HCPU_MATRIXEN_MASK 64  ; Enable composited Matrix Mode, and disable UART access to serial monitor. (bit mask)
.alias MATRIXEN_MASK 64  ; Enable composited Matrix Mode, and disable UART access to serial monitor. (bit mask)
.alias CPU_HTRAP33 $D673  ; @HTRAPXX
.alias HTRAP33 $D673  ; @HTRAPXX
.alias CPU_HTRAP34 $D674  ; @HTRAPXX
.alias HTRAP34 $D674  ; @HTRAPXX
.alias CPU_HTRAP35 $D675  ; @HTRAPXX
.alias HTRAP35 $D675  ; @HTRAPXX
.alias CPU_HTRAP36 $D676  ; @HTRAPXX
.alias HTRAP36 $D676  ; @HTRAPXX
.alias CPU_HTRAP37 $D677  ; @HTRAPXX
.alias HTRAP37 $D677  ; @HTRAPXX
.alias CPU_HTRAP38 $D678  ; @HTRAPXX
.alias HTRAP38 $D678  ; @HTRAPXX
.alias CPU_HTRAP39 $D679  ; @HTRAPXX
.alias HTRAP39 $D679  ; @HTRAPXX
.alias CPU_HTRAP3A $D67A  ; @HTRAPXX
.alias HTRAP3A $D67A  ; @HTRAPXX
.alias CPU_HTRAP3B $D67B  ; @HTRAPXX
.alias HTRAP3B $D67B  ; @HTRAPXX
.alias CPU_HTRAP3C $D67C  ; @HTRAPXX
.alias HTRAP3C $D67C  ; @HTRAPXX
.alias HCPU_UARTDATA_ADDR $D67C  ; (write) Hypervisor write serial output to UART monitor (address)
.alias UARTDATA_ADDR $D67C  ; (write) Hypervisor write serial output to UART monitor (address)
.alias HCPU_UARTDATA_MASK 255  ; (write) Hypervisor write serial output to UART monitor (bit mask)
.alias UARTDATA_MASK 255  ; (write) Hypervisor write serial output to UART monitor (bit mask)
.alias CPU_HTRAP3D $D67D  ; @HTRAPXX
.alias HTRAP3D $D67D  ; @HTRAPXX
.alias HCPU_WATCHDOG $D67D  ; Hypervisor watchdog register: writing any value clears the watch dog
.alias WATCHDOG $D67D  ; Hypervisor watchdog register: writing any value clears the watch dog
.alias HCPU_RSVD_ADDR $D67D  ; RESERVED (address)
.alias RSVD_ADDR $D67D  ; RESERVED (address)
.alias HCPU_RSVD_MASK 1  ; RESERVED (bit mask)
.alias RSVD_MASK 1  ; RESERVED (bit mask)
.alias HCPU_JMP32EN_ADDR $D67D  ; Hypervisor enable 32-bit JMP/JSR etc (address)
.alias JMP32EN_ADDR $D67D  ; Hypervisor enable 32-bit JMP/JSR etc (address)
.alias HCPU_JMP32EN_MASK 2  ; Hypervisor enable 32-bit JMP/JSR etc (bit mask)
.alias JMP32EN_MASK 2  ; Hypervisor enable 32-bit JMP/JSR etc (bit mask)
.alias HCPU_ROMPROT_ADDR $D67D  ; Hypervisor write protect C65 ROM \$20000-\$3FFFF (address)
.alias ROMPROT_ADDR $D67D  ; Hypervisor write protect C65 ROM \$20000-\$3FFFF (address)
.alias HCPU_ROMPROT_MASK 4  ; Hypervisor write protect C65 ROM \$20000-\$3FFFF (bit mask)
.alias ROMPROT_MASK 4  ; Hypervisor write protect C65 ROM \$20000-\$3FFFF (bit mask)
.alias HCPU_ASCFAST_ADDR $D67D  ; Hypervisor enable ASC/DIN CAPS LOCK key to enable/disable CPU slow-down in C64/C128/C65 modes (address)
.alias ASCFAST_ADDR $D67D  ; Hypervisor enable ASC/DIN CAPS LOCK key to enable/disable CPU slow-down in C64/C128/C65 modes (address)
.alias HCPU_ASCFAST_MASK 8  ; Hypervisor enable ASC/DIN CAPS LOCK key to enable/disable CPU slow-down in C64/C128/C65 modes (bit mask)
.alias ASCFAST_MASK 8  ; Hypervisor enable ASC/DIN CAPS LOCK key to enable/disable CPU slow-down in C64/C128/C65 modes (bit mask)
.alias HCPU_CPUFAST_ADDR $D67D  ; Hypervisor force CPU to 48MHz for userland (userland can override via POKE0) (address)
.alias CPUFAST_ADDR $D67D  ; Hypervisor force CPU to 48MHz for userland (userland can override via POKE0) (address)
.alias HCPU_CPUFAST_MASK 16  ; Hypervisor force CPU to 48MHz for userland (userland can override via POKE0) (bit mask)
.alias CPUFAST_MASK 16  ; Hypervisor force CPU to 48MHz for userland (userland can override via POKE0) (bit mask)
.alias HCPU_F4502_ADDR $D67D  ; Hypervisor force CPU to 4502 personality, even in C64 IO mode. (address)
.alias F4502_ADDR $D67D  ; Hypervisor force CPU to 4502 personality, even in C64 IO mode. (address)
.alias HCPU_F4502_MASK 32  ; Hypervisor force CPU to 4502 personality, even in C64 IO mode. (bit mask)
.alias F4502_MASK 32  ; Hypervisor force CPU to 4502 personality, even in C64 IO mode. (bit mask)
.alias HCPU_PIRQ_ADDR $D67D  ; Hypervisor flag to indicate if an IRQ is pending on exit from the hypervisor / set 1 to force IRQ/NMI deferal for 1,024 cycles on exit from hypervisor. (address)
.alias PIRQ_ADDR $D67D  ; Hypervisor flag to indicate if an IRQ is pending on exit from the hypervisor / set 1 to force IRQ/NMI deferal for 1,024 cycles on exit from hypervisor. (address)
.alias HCPU_PIRQ_MASK 64  ; Hypervisor flag to indicate if an IRQ is pending on exit from the hypervisor / set 1 to force IRQ/NMI deferal for 1,024 cycles on exit from hypervisor. (bit mask)
.alias PIRQ_MASK 64  ; Hypervisor flag to indicate if an IRQ is pending on exit from the hypervisor / set 1 to force IRQ/NMI deferal for 1,024 cycles on exit from hypervisor. (bit mask)
.alias HCPU_PNMI_ADDR $D67D  ; Hypervisor flag to indicate if an NMI is pending on exit from the hypervisor. (address)
.alias PNMI_ADDR $D67D  ; Hypervisor flag to indicate if an NMI is pending on exit from the hypervisor. (address)
.alias HCPU_PNMI_MASK 128  ; Hypervisor flag to indicate if an NMI is pending on exit from the hypervisor. (bit mask)
.alias PNMI_MASK 128  ; Hypervisor flag to indicate if an NMI is pending on exit from the hypervisor. (bit mask)
.alias CPU_HTRAP3E $D67E  ; @HTRAPXX
.alias HTRAP3E $D67E  ; @HTRAPXX
.alias HCPU_HICKED $D67E  ; Hypervisor already-upgraded bit (writing sets permanently)
.alias HICKED $D67E  ; Hypervisor already-upgraded bit (writing sets permanently)
.alias CPU_HTRAP3F $D67F  ; @HTRAPXX
.alias HTRAP3F $D67F  ; @HTRAPXX
.alias HCPU_ENTEREXIT $D67F  ; Writing trigger return from hypervisor
.alias ENTEREXIT $D67F  ; Writing trigger return from hypervisor
.alias SD_CMDANDSTAT $D680  ; SD controller status/command
.alias CMDANDSTAT $D680  ; SD controller status/command
.alias SD_SECTOR0 $D681  ; SD controller SD sector address (LSB)
.alias SECTOR0 $D681  ; SD controller SD sector address (LSB)
.alias SD_SECTOR1 $D682  ; SD controller SD sector address (2nd byte)
.alias SECTOR1 $D682  ; SD controller SD sector address (2nd byte)
.alias SD_SECTOR2 $D683  ; SD controller SD sector address (3rd byte)
.alias SECTOR2 $D683  ; SD controller SD sector address (3rd byte)
.alias SD_SECTOR3 $D684  ; SD controller SD sector address (MSB)
.alias SECTOR3 $D684  ; SD controller SD sector address (MSB)
.alias SD_FILLVAL $D686  ; WRITE ONLY set fill byte for use in fill mode, instead of SD buffer data
.alias FILLVAL $D686  ; WRITE ONLY set fill byte for use in fill mode, instead of SD buffer data
.alias SD_BUFBIT8_ADDR $D689  ; (read only) reads bit 8 of the sector buffer pointer (address)
.alias BUFBIT8_ADDR $D689  ; (read only) reads bit 8 of the sector buffer pointer (address)
.alias SD_BUFBIT8_MASK 1  ; (read only) reads bit 8 of the sector buffer pointer (bit mask)
.alias BUFBIT8_MASK 1  ; (read only) reads bit 8 of the sector buffer pointer (bit mask)
.alias SD_BUFFFULL_ADDR $D689  ; (read only) if set, indicates that the sector buffer is full and has not yet been read (address)
.alias BUFFFULL_ADDR $D689  ; (read only) if set, indicates that the sector buffer is full and has not yet been read (address)
.alias SD_BUFFFULL_MASK 2  ; (read only) if set, indicates that the sector buffer is full and has not yet been read (bit mask)
.alias BUFFFULL_MASK 2  ; (read only) if set, indicates that the sector buffer is full and has not yet been read (bit mask)
.alias SD_HNDSHK_ADDR $D689  ; Set/read SD card sd_handshake signal (address)
.alias HNDSHK_ADDR $D689  ; Set/read SD card sd_handshake signal (address)
.alias SD_HNDSHK_MASK 4  ; Set/read SD card sd_handshake signal (bit mask)
.alias HNDSHK_MASK 4  ; Set/read SD card sd_handshake signal (bit mask)
.alias SD_DRDY_ADDR $D689  ; SD Card Data Ready indication (address)
.alias DRDY_ADDR $D689  ; SD Card Data Ready indication (address)
.alias SD_DRDY_MASK 8  ; SD Card Data Ready indication (bit mask)
.alias DRDY_MASK 8  ; SD Card Data Ready indication (bit mask)
.alias SD_RESERVED_ADDR $D689  ; Reserved (address)
.alias SD_RESERVED_MASK 16  ; Reserved (bit mask)
.alias SD_FDCSWAP_ADDR $D689  ; Set to swap floppy drive 0 (the internal drive) and drive 1 (the drive on the 2nd position on the internal floppy cable). (address)
.alias FDCSWAP_ADDR $D689  ; Set to swap floppy drive 0 (the internal drive) and drive 1 (the drive on the 2nd position on the internal floppy cable). (address)
.alias SD_FDCSWAP_MASK 32  ; Set to swap floppy drive 0 (the internal drive) and drive 1 (the drive on the 2nd position on the internal floppy cable). (bit mask)
.alias FDCSWAP_MASK 32  ; Set to swap floppy drive 0 (the internal drive) and drive 1 (the drive on the 2nd position on the internal floppy cable). (bit mask)
.alias SD_BUFFSEL_ADDR $D689  ; Set to switch sector buffer to view SD card direct access, clear for access to the F011 FDC sector buffer. (address)
.alias BUFFSEL_ADDR $D689  ; Set to switch sector buffer to view SD card direct access, clear for access to the F011 FDC sector buffer. (address)
.alias SD_BUFFSEL_MASK 128  ; Set to switch sector buffer to view SD card direct access, clear for access to the F011 FDC sector buffer. (bit mask)
.alias BUFFSEL_MASK 128  ; Set to switch sector buffer to view SD card direct access, clear for access to the F011 FDC sector buffer. (bit mask)
.alias SD_CDC00_ADDR $D68A  ; (read only) Set if colour RAM at $DC00 (address)
.alias CDC00_ADDR $D68A  ; (read only) Set if colour RAM at $DC00 (address)
.alias SD_CDC00_MASK 1  ; (read only) Set if colour RAM at $DC00 (bit mask)
.alias CDC00_MASK 1  ; (read only) Set if colour RAM at $DC00 (bit mask)
.alias SD_VICIII_ADDR $D68A  ; (read only) Set if VIC-IV or ethernet IO bank visible (address)
.alias VICIII_ADDR $D68A  ; (read only) Set if VIC-IV or ethernet IO bank visible (address)
.alias SD_VICIII_MASK 2  ; (read only) Set if VIC-IV or ethernet IO bank visible (bit mask)
.alias VICIII_MASK 2  ; (read only) Set if VIC-IV or ethernet IO bank visible (bit mask)
.alias SD_VFDC0_ADDR $D68A  ; (read only) Set if drive 0 is virtualised (sectors delivered via serial monitor interface) (address)
.alias VFDC0_ADDR $D68A  ; (read only) Set if drive 0 is virtualised (sectors delivered via serial monitor interface) (address)
.alias SD_VFDC0_MASK 4  ; (read only) Set if drive 0 is virtualised (sectors delivered via serial monitor interface) (bit mask)
.alias VFDC0_MASK 4  ; (read only) Set if drive 0 is virtualised (sectors delivered via serial monitor interface) (bit mask)
.alias SD_VFDC1_ADDR $D68A  ; (read only) Set if drive 1 is virtualised (sectors delivered via serial monitor interface) (address)
.alias VFDC1_ADDR $D68A  ; (read only) Set if drive 1 is virtualised (sectors delivered via serial monitor interface) (address)
.alias SD_VFDC1_MASK 8  ; (read only) Set if drive 1 is virtualised (sectors delivered via serial monitor interface) (bit mask)
.alias VFDC1_MASK 8  ; (read only) Set if drive 1 is virtualised (sectors delivered via serial monitor interface) (bit mask)
.alias SDFDC_D0IMG_ADDR $D68B  ; F011 drive 0 use disk image if set, otherwise use real floppy drive. (address)
.alias D0IMG_ADDR $D68B  ; F011 drive 0 use disk image if set, otherwise use real floppy drive. (address)
.alias SDFDC_D0IMG_MASK 1  ; F011 drive 0 use disk image if set, otherwise use real floppy drive. (bit mask)
.alias D0IMG_MASK 1  ; F011 drive 0 use disk image if set, otherwise use real floppy drive. (bit mask)
.alias SDFDC_D0P_ADDR $D68B  ; F011 drive 0 media present (address)
.alias D0P_ADDR $D68B  ; F011 drive 0 media present (address)
.alias SDFDC_D0P_MASK 2  ; F011 drive 0 media present (bit mask)
.alias D0P_MASK 2  ; F011 drive 0 media present (bit mask)
.alias SDFDC_D0WP_ADDR $D68B  ; Write enable F011 drive 0 (address)
.alias D0WP_ADDR $D68B  ; Write enable F011 drive 0 (address)
.alias SDFDC_D0WP_MASK 4  ; Write enable F011 drive 0 (bit mask)
.alias D0WP_MASK 4  ; Write enable F011 drive 0 (bit mask)
.alias SDFDC_D1IMG_ADDR $D68B  ; F011 drive 1 use disk image if set, otherwise use real floppy drive. (address)
.alias D1IMG_ADDR $D68B  ; F011 drive 1 use disk image if set, otherwise use real floppy drive. (address)
.alias SDFDC_D1IMG_MASK 8  ; F011 drive 1 use disk image if set, otherwise use real floppy drive. (bit mask)
.alias D1IMG_MASK 8  ; F011 drive 1 use disk image if set, otherwise use real floppy drive. (bit mask)
.alias SDFDC_D1P_ADDR $D68B  ; F011 drive 1 media present (address)
.alias D1P_ADDR $D68B  ; F011 drive 1 media present (address)
.alias SDFDC_D1P_MASK 16  ; F011 drive 1 media present (bit mask)
.alias D1P_MASK 16  ; F011 drive 1 media present (bit mask)
.alias SDFDC_D1WP_ADDR $D68B  ; Write enable F011 drive 1 (address)
.alias D1WP_ADDR $D68B  ; Write enable F011 drive 1 (address)
.alias SDFDC_D1WP_MASK 32  ; Write enable F011 drive 1 (bit mask)
.alias D1WP_MASK 32  ; Write enable F011 drive 1 (bit mask)
.alias F011_MDISK0_ADDR $D68B  ; Enable 64MiB ``MEGA Disk'' for F011 emulated drive 0 (address)
.alias F011_MDISK0_MASK 64  ; Enable 64MiB ``MEGA Disk'' for F011 emulated drive 0 (bit mask)
.alias SDFDC_D0MD_ADDR $D68B  ; F011 drive 0 disk image is 64MiB mega image if set (otherwise 800KiB 1581 image) (address)
.alias D0MD_ADDR $D68B  ; F011 drive 0 disk image is 64MiB mega image if set (otherwise 800KiB 1581 image) (address)
.alias SDFDC_D0MD_MASK 64  ; F011 drive 0 disk image is 64MiB mega image if set (otherwise 800KiB 1581 image) (bit mask)
.alias D0MD_MASK 64  ; F011 drive 0 disk image is 64MiB mega image if set (otherwise 800KiB 1581 image) (bit mask)
.alias GS_F011_MDISK0_ADDR $D68B  ; Enable 64MiB ``MEGA Disk'' for F011 emulated drive 1 (address)
.alias GS_F011_MDISK0_MASK 128  ; Enable 64MiB ``MEGA Disk'' for F011 emulated drive 1 (bit mask)
.alias SDFDC_D1MD_ADDR $D68B  ; F011 drive 1 disk image is 64MiB mega image if set (otherwise 800KiB 1581 image) (address)
.alias D1MD_ADDR $D68B  ; F011 drive 1 disk image is 64MiB mega image if set (otherwise 800KiB 1581 image) (address)
.alias SDFDC_D1MD_MASK 128  ; F011 drive 1 disk image is 64MiB mega image if set (otherwise 800KiB 1581 image) (bit mask)
.alias D1MD_MASK 128  ; F011 drive 1 disk image is 64MiB mega image if set (otherwise 800KiB 1581 image) (bit mask)
.alias F011_DISKADDR0 $D68C  ; Diskimage sector number (bits 0-7)
.alias DISKADDR0 $D68C  ; Diskimage sector number (bits 0-7)
.alias SDFDC_D0STARTSEC0 $D68C  ; F011 drive 0 disk image address on SD card (LSB)
.alias D0STARTSEC0 $D68C  ; F011 drive 0 disk image address on SD card (LSB)
.alias F011_DISKADDR1 $D68D  ; Diskimage sector number (bits 8-15)
.alias DISKADDR1 $D68D  ; Diskimage sector number (bits 8-15)
.alias SDFDC_D0STARTSEC1 $D68D  ; F011 drive 0 disk image address on SD card (2nd byte)
.alias D0STARTSEC1 $D68D  ; F011 drive 0 disk image address on SD card (2nd byte)
.alias F011_DISKADDR2 $D68E  ; Diskimage sector number (bits 16-23)
.alias DISKADDR2 $D68E  ; Diskimage sector number (bits 16-23)
.alias SDFDC_D0STARTSEC2 $D68E  ; F011 drive 0 disk image address on SD card (3rd byte)
.alias D0STARTSEC2 $D68E  ; F011 drive 0 disk image address on SD card (3rd byte)
.alias F011_DISKADDR3 $D68F  ; Diskimage sector number (bits 24-31)
.alias DISKADDR3 $D68F  ; Diskimage sector number (bits 24-31)
.alias SDFDC_D0STARTSEC3 $D68F  ; F011 drive 0 disk image address on SD card (MSB)
.alias D0STARTSEC3 $D68F  ; F011 drive 0 disk image address on SD card (MSB)
.alias F011_DISK2ADDR0 $D690  ; Diskimage 2 sector number (bits 0-7)
.alias DISK2ADDR0 $D690  ; Diskimage 2 sector number (bits 0-7)
.alias SDFDC_D1STARTSEC0 $D690  ; F011 drive 1 disk image address on SD card (LSB)
.alias D1STARTSEC0 $D690  ; F011 drive 1 disk image address on SD card (LSB)
.alias F011_DISK2ADDR1 $D691  ; Diskimage 2 sector number (bits 8-15)
.alias DISK2ADDR1 $D691  ; Diskimage 2 sector number (bits 8-15)
.alias SDFDC_D1STARTSEC1 $D691  ; F011 drive 1 disk image address on SD card (2nd byte)
.alias D1STARTSEC1 $D691  ; F011 drive 1 disk image address on SD card (2nd byte)
.alias F011_DISK2ADDR2 $D692  ; Diskimage 2 sector number (bits 16-23)
.alias DISK2ADDR2 $D692  ; Diskimage 2 sector number (bits 16-23)
.alias SDFDC_D1STARTSEC2 $D692  ; F011 drive 1 disk image address on SD card (3rd byte)
.alias D1STARTSEC2 $D692  ; F011 drive 1 disk image address on SD card (3rd byte)
.alias F011_DISK2ADDR3 $D693  ; Diskimage 2 sector number (bits 24-31)
.alias DISK2ADDR3 $D693  ; Diskimage 2 sector number (bits 24-31)
.alias SDFDC_D1STARTSEC3 $D693  ; F011 drive 1 disk image address on SD card (MSB)
.alias D1STARTSEC3 $D693  ; F011 drive 1 disk image address on SD card (MSB)
.alias F011_AUTOTUNE $D696  ; Enable automatic track seeking for sector reads and writes
.alias AUTOTUNE $D696  ; Enable automatic track seeking for sector reads and writes
.alias DEBUG_J21INL $D69B  ; Status of M65 R3 J21 pins
.alias J21INL $D69B  ; Status of M65 R3 J21 pins
.alias DEBUG_J21INH $D69C  ; Status of M65 R3 J21 pins
.alias J21INH $D69C  ; Status of M65 R3 J21 pins
.alias DEBUG_DIPSW $D69D  ; Status of M65 R3 DIP switches
.alias DIPSW $D69D  ; Status of M65 R3 DIP switches
.alias DEBUG_SWSTATUS $D69E  ; Status of switches 0 to 7
.alias GS_DEBUG_SWSTATUS $D69F  ; Status of switches 8 to 15
.alias FDC_DBGWGATE_ADDR $D6A0  ; Control floppy drive SIDE1 line (address)
.alias FDC_DBGWGATE_MASK 1  ; Control floppy drive SIDE1 line (bit mask)
.alias GS_FDC_DBGWGATE_ADDR $D6A0  ; Control floppy drive WGATE line (address)
.alias GS_FDC_DBGWGATE_MASK 2  ; Control floppy drive WGATE line (bit mask)
.alias FDC_DBGWDATA_ADDR $D6A0  ; Control floppy drive WDATA line (address)
.alias DBGWDATA_ADDR $D6A0  ; Control floppy drive WDATA line (address)
.alias FDC_DBGWDATA_MASK 4  ; Control floppy drive WDATA line (bit mask)
.alias DBGWDATA_MASK 4  ; Control floppy drive WDATA line (bit mask)
.alias FDC_DBGDIR_ADDR $D6A0  ; Control floppy drive STEP line (address)
.alias FDC_DBGDIR_MASK 8  ; Control floppy drive STEP line (bit mask)
.alias GS_FDC_DBGDIR_ADDR $D6A0  ; Control floppy drive STEPDIR line (address)
.alias GS_FDC_DBGDIR_MASK 16  ; Control floppy drive STEPDIR line (bit mask)
.alias FDC_DBGMOTORA_ADDR $D6A0  ; Control floppy drive SELECT line (address)
.alias FDC_DBGMOTORA_MASK 32  ; Control floppy drive SELECT line (bit mask)
.alias GS_FDC_DBGMOTORA_ADDR $D6A0  ; Control floppy drive MOTOR line (address)
.alias GS_FDC_DBGMOTORA_MASK 64  ; Control floppy drive MOTOR line (bit mask)
.alias FDC_DENSITY_ADDR $D6A0  ; Control floppy drive density select line (address)
.alias DENSITY_ADDR $D6A0  ; Control floppy drive density select line (address)
.alias FDC_DENSITY_MASK 128  ; Control floppy drive density select line (bit mask)
.alias DENSITY_MASK 128  ; Control floppy drive density select line (bit mask)
.alias F011_DRV0EN_ADDR $D6A1  ; Use real floppy drive instead of SD card for 1st floppy drive (address)
.alias DRV0EN_ADDR $D6A1  ; Use real floppy drive instead of SD card for 1st floppy drive (address)
.alias F011_DRV0EN_MASK 1  ; Use real floppy drive instead of SD card for 1st floppy drive (bit mask)
.alias DRV0EN_MASK 1  ; Use real floppy drive instead of SD card for 1st floppy drive (bit mask)
.alias SDFDC_USEREAL0_ADDR $D6A1  ; Use real floppy drive for drive 0 if set (read-only, except for from hypervisor) (address)
.alias USEREAL0_ADDR $D6A1  ; Use real floppy drive for drive 0 if set (read-only, except for from hypervisor) (address)
.alias SDFDC_USEREAL0_MASK 1  ; Use real floppy drive for drive 0 if set (read-only, except for from hypervisor) (bit mask)
.alias USEREAL0_MASK 1  ; Use real floppy drive for drive 0 if set (read-only, except for from hypervisor) (bit mask)
.alias SDFDC_TARGANY_ADDR $D6A1  ; Read next sector under head if set, ignoring the requested side, track and sector number. (address)
.alias TARGANY_ADDR $D6A1  ; Read next sector under head if set, ignoring the requested side, track and sector number. (address)
.alias SDFDC_TARGANY_MASK 2  ; Read next sector under head if set, ignoring the requested side, track and sector number. (bit mask)
.alias TARGANY_MASK 2  ; Read next sector under head if set, ignoring the requested side, track and sector number. (bit mask)
.alias F011_DRV2EN_ADDR $D6A1  ; Use real floppy drive instead of SD card for 2nd floppy drive (address)
.alias DRV2EN_ADDR $D6A1  ; Use real floppy drive instead of SD card for 2nd floppy drive (address)
.alias F011_DRV2EN_MASK 4  ; Use real floppy drive instead of SD card for 2nd floppy drive (bit mask)
.alias DRV2EN_MASK 4  ; Use real floppy drive instead of SD card for 2nd floppy drive (bit mask)
.alias SDFDC_USEREAL1_ADDR $D6A1  ; Use real floppy drive for drive 1 if set (read-only, except for from hypervisor) (address)
.alias USEREAL1_ADDR $D6A1  ; Use real floppy drive for drive 1 if set (read-only, except for from hypervisor) (address)
.alias SDFDC_USEREAL1_MASK 4  ; Use real floppy drive for drive 1 if set (read-only, except for from hypervisor) (bit mask)
.alias USEREAL1_MASK 4  ; Use real floppy drive for drive 1 if set (read-only, except for from hypervisor) (bit mask)
.alias SDFDC_SILENT_ADDR $D6A1  ; Disable floppy spinning and tracking for SD card operations. (address)
.alias SILENT_ADDR $D6A1  ; Disable floppy spinning and tracking for SD card operations. (address)
.alias SDFDC_SILENT_MASK 8  ; Disable floppy spinning and tracking for SD card operations. (bit mask)
.alias SILENT_MASK 8  ; Disable floppy spinning and tracking for SD card operations. (bit mask)
.alias FDC_DATARATE $D6A2  ; Set number of bus cycles per floppy magnetic interval (decrease to increase data rate)
.alias DATARATE $D6A2  ; Set number of bus cycles per floppy magnetic interval (decrease to increase data rate)
.alias MISCIO_WHEEL3TARGET_ADDR $D6AC  ; Select audio channel volume to be set by thumb wheel #3 (address)
.alias WHEEL3TARGET_ADDR $D6AC  ; Select audio channel volume to be set by thumb wheel #3 (address)
.alias MISCIO_WHEEL3TARGET_MASK 15  ; Select audio channel volume to be set by thumb wheel #3 (bit mask)
.alias WHEEL3TARGET_MASK 15  ; Select audio channel volume to be set by thumb wheel #3 (bit mask)
.alias MISCIO_WHEELBRIGHTEN_ADDR $D6AC  ; Enable control of LCD panel brightness via thumb wheel (address)
.alias WHEELBRIGHTEN_ADDR $D6AC  ; Enable control of LCD panel brightness via thumb wheel (address)
.alias MISCIO_WHEELBRIGHTEN_MASK 128  ; Enable control of LCD panel brightness via thumb wheel (bit mask)
.alias WHEELBRIGHTEN_MASK 128  ; Enable control of LCD panel brightness via thumb wheel (bit mask)
.alias MISCIO_WHEEL1TARGET_ADDR $D6AD  ; Select audio channel volume to be set by thumb wheel #1 (address)
.alias WHEEL1TARGET_ADDR $D6AD  ; Select audio channel volume to be set by thumb wheel #1 (address)
.alias MISCIO_WHEEL1TARGET_MASK 15  ; Select audio channel volume to be set by thumb wheel #1 (bit mask)
.alias WHEEL1TARGET_MASK 15  ; Select audio channel volume to be set by thumb wheel #1 (bit mask)
.alias MISCIO_WHEEL2TARGET_ADDR $D6AD  ; Select audio channel volume to be set by thumb wheel #2 (address)
.alias WHEEL2TARGET_ADDR $D6AD  ; Select audio channel volume to be set by thumb wheel #2 (address)
.alias MISCIO_WHEEL2TARGET_MASK 240  ; Select audio channel volume to be set by thumb wheel #2 (bit mask)
.alias WHEEL2TARGET_MASK 240  ; Select audio channel volume to be set by thumb wheel #2 (bit mask)
.alias SD_FDC_ENC_ADDR $D6AE  ; Select floppy encoding (0=MFM, 1=RLL2,7, F=Raw encoding) (address)
.alias FDC_ENC_ADDR $D6AE  ; Select floppy encoding (0=MFM, 1=RLL2,7, F=Raw encoding) (address)
.alias SD_FDC_ENC_MASK 15  ; Select floppy encoding (0=MFM, 1=RLL2,7, F=Raw encoding) (bit mask)
.alias FDC_ENC_MASK 15  ; Select floppy encoding (0=MFM, 1=RLL2,7, F=Raw encoding) (bit mask)
.alias SD_AUTO_2XSEL_ADDR $D6AE  ; Automatically select DD or HD decoder for last sector display (address)
.alias AUTO_2XSEL_ADDR $D6AE  ; Automatically select DD or HD decoder for last sector display (address)
.alias SD_AUTO_2XSEL_MASK 16  ; Automatically select DD or HD decoder for last sector display (bit mask)
.alias AUTO_2XSEL_MASK 16  ; Automatically select DD or HD decoder for last sector display (bit mask)
.alias SD_FDC_VARSPD_ADDR $D6AE  ; Enable automatic variable speed selection for floppy controller using Track Information Blocks on MEGA65 HD floppies (address)
.alias FDC_VARSPD_ADDR $D6AE  ; Enable automatic variable speed selection for floppy controller using Track Information Blocks on MEGA65 HD floppies (address)
.alias SD_FDC_VARSPD_MASK 32  ; Enable automatic variable speed selection for floppy controller using Track Information Blocks on MEGA65 HD floppies (bit mask)
.alias FDC_VARSPD_MASK 32  ; Enable automatic variable speed selection for floppy controller using Track Information Blocks on MEGA65 HD floppies (bit mask)
.alias SD_FDC_2XSEL_ADDR $D6AE  ; Select HD decoder for last sector display (address)
.alias FDC_2XSEL_ADDR $D6AE  ; Select HD decoder for last sector display (address)
.alias SD_FDC_2XSEL_MASK 64  ; Select HD decoder for last sector display (bit mask)
.alias FDC_2XSEL_MASK 64  ; Select HD decoder for last sector display (bit mask)
.alias SD_FDC_TIBEN_ADDR $D6AE  ; Enable use of Track Info Block settings (address)
.alias FDC_TIBEN_ADDR $D6AE  ; Enable use of Track Info Block settings (address)
.alias SD_FDC_TIBEN_MASK 128  ; Enable use of Track Info Block settings (bit mask)
.alias FDC_TIBEN_MASK 128  ; Enable use of Track Info Block settings (bit mask)
.alias SD_VR_FOUND_ADDR $D6AF  ; Manually set f011_rsector_found signal (indented for virtual F011 mode only) (address)
.alias VR_FOUND_ADDR $D6AF  ; Manually set f011_rsector_found signal (indented for virtual F011 mode only) (address)
.alias SD_VR_FOUND_MASK 1  ; Manually set f011_rsector_found signal (indented for virtual F011 mode only) (bit mask)
.alias VR_FOUND_MASK 1  ; Manually set f011_rsector_found signal (indented for virtual F011 mode only) (bit mask)
.alias SD_VW_FOUND_ADDR $D6AF  ; Manually set f011_wsector_found signal (indented for virtual F011 mode only) (address)
.alias VW_FOUND_ADDR $D6AF  ; Manually set f011_wsector_found signal (indented for virtual F011 mode only) (address)
.alias SD_VW_FOUND_MASK 2  ; Manually set f011_wsector_found signal (indented for virtual F011 mode only) (bit mask)
.alias VW_FOUND_MASK 2  ; Manually set f011_wsector_found signal (indented for virtual F011 mode only) (bit mask)
.alias SD_VEQ_INH_ADDR $D6AF  ; Manually set f011_eq_inhibit signal (indented for virtual F011 mode only) (address)
.alias VEQ_INH_ADDR $D6AF  ; Manually set f011_eq_inhibit signal (indented for virtual F011 mode only) (address)
.alias SD_VEQ_INH_MASK 4  ; Manually set f011_eq_inhibit signal (indented for virtual F011 mode only) (bit mask)
.alias VEQ_INH_MASK 4  ; Manually set f011_eq_inhibit signal (indented for virtual F011 mode only) (bit mask)
.alias SD_VRNF_ADDR $D6AF  ; Manually set f011_rnf signal (indented for virtual F011 mode only) (address)
.alias VRNF_ADDR $D6AF  ; Manually set f011_rnf signal (indented for virtual F011 mode only) (address)
.alias SD_VRNF_MASK 8  ; Manually set f011_rnf signal (indented for virtual F011 mode only) (bit mask)
.alias VRNF_MASK 8  ; Manually set f011_rnf signal (indented for virtual F011 mode only) (bit mask)
.alias SD_VDRQ_ADDR $D6AF  ; Manually set f011_drq signal (indented for virtual F011 mode only) (address)
.alias VDRQ_ADDR $D6AF  ; Manually set f011_drq signal (indented for virtual F011 mode only) (address)
.alias SD_VDRQ_MASK 16  ; Manually set f011_drq signal (indented for virtual F011 mode only) (bit mask)
.alias VDRQ_MASK 16  ; Manually set f011_drq signal (indented for virtual F011 mode only) (bit mask)
.alias SD_VLOST_ADDR $D6AF  ; Manually set f011_lost signal (indented for virtual F011 mode only) (address)
.alias VLOST_ADDR $D6AF  ; Manually set f011_lost signal (indented for virtual F011 mode only) (address)
.alias SD_VLOST_MASK 32  ; Manually set f011_lost signal (indented for virtual F011 mode only) (bit mask)
.alias VLOST_MASK 32  ; Manually set f011_lost signal (indented for virtual F011 mode only) (bit mask)
.alias TOUCH_EV1_ADDR $D6B0  ; Touch event 1 is valid (address)
.alias EV1_ADDR $D6B0  ; Touch event 1 is valid (address)
.alias TOUCH_EV1_MASK 1  ; Touch event 1 is valid (bit mask)
.alias EV1_MASK 1  ; Touch event 1 is valid (bit mask)
.alias TOUCH_EV2_ADDR $D6B0  ; Touch event 2 is valid (address)
.alias EV2_ADDR $D6B0  ; Touch event 2 is valid (address)
.alias TOUCH_EV2_MASK 2  ; Touch event 2 is valid (bit mask)
.alias EV2_MASK 2  ; Touch event 2 is valid (bit mask)
.alias TOUCH_UPDN1_ADDR $D6B0  ; Touch event 1 up/down state (address)
.alias UPDN1_ADDR $D6B0  ; Touch event 1 up/down state (address)
.alias TOUCH_UPDN1_MASK 12  ; Touch event 1 up/down state (bit mask)
.alias UPDN1_MASK 12  ; Touch event 1 up/down state (bit mask)
.alias TOUCH_UPDN2_ADDR $D6B0  ; Touch event 2 up/down state (address)
.alias UPDN2_ADDR $D6B0  ; Touch event 2 up/down state (address)
.alias TOUCH_UPDN2_MASK 48  ; Touch event 2 up/down state (bit mask)
.alias UPDN2_MASK 48  ; Touch event 2 up/down state (bit mask)
.alias MISCIO_TCHFLX_ADDR $D6B0  ; Flip X axis of touch interface if set (address)
.alias MISCIO_TCHFLX_MASK 64  ; Flip X axis of touch interface if set (bit mask)
.alias TOUCH_XINV_ADDR $D6B0  ; Invert horizontal axis (address)
.alias XINV_ADDR $D6B0  ; Invert horizontal axis (address)
.alias TOUCH_XINV_MASK 64  ; Invert horizontal axis (bit mask)
.alias XINV_MASK 64  ; Invert horizontal axis (bit mask)
.alias GS_MISCIO_TCHFLX_ADDR $D6B0  ; Flip Y axis of touch interface if set (address)
.alias GS_MISCIO_TCHFLX_MASK 128  ; Flip Y axis of touch interface if set (bit mask)
.alias TOUCH_YINV_ADDR $D6B0  ; Invert vertical axis (address)
.alias YINV_ADDR $D6B0  ; Invert vertical axis (address)
.alias TOUCH_YINV_MASK 128  ; Invert vertical axis (bit mask)
.alias YINV_MASK 128  ; Invert vertical axis (bit mask)
.alias MISCIO_TCHXSCALE $D6B1  ; Set X scale value for touch interface (LSB)
.alias TOUCH_CALXSCALELSB $D6B1  ; Touch pad X scaling LSB
.alias CALXSCALELSB $D6B1  ; Touch pad X scaling LSB
.alias GS_MISCIO_TCHXSCALE $D6B2  ; Set X scale value for touch interface (MSB)
.alias TOUCH_CALXSCALEMSB $D6B2  ; Touch pad X scaling MSB
.alias CALXSCALEMSB $D6B2  ; Touch pad X scaling MSB
.alias MISCIO_TCHYSCALE $D6B3  ; Set Y scale value for touch interface (LSB)
.alias TOUCH_CALYSCALELSB $D6B3  ; Touch pad Y scaling LSB
.alias CALYSCALELSB $D6B3  ; Touch pad Y scaling LSB
.alias GS_MISCIO_TCHYSCALE $D6B4  ; Set Y scale value for touch interface (MSB)
.alias TOUCH_CALYSCALEMSB $D6B4  ; Touch pad Y scaling MSB
.alias CALYSCALEMSB $D6B4  ; Touch pad Y scaling MSB
.alias MISCIO_TCHXDELTA $D6B5  ; Set X delta value for touch interface (LSB)
.alias TOUCH_CALXDELTALSB $D6B5  ; Touch pad X delta LSB
.alias CALXDELTALSB $D6B5  ; Touch pad X delta LSB
.alias MISCIO_TCHYDELTA $D6B7  ; Set Y delta value for touch interface (LSB)
.alias TOUCH_CALYDELTALSB $D6B7  ; Touch pad Y delta LSB
.alias CALYDELTALSB $D6B7  ; Touch pad Y delta LSB
.alias GS_MISCIO_TCHYDELTA $D6B8  ; Set Y delta value for touch interface (MSB)
.alias TOUCH_CALYDELTAMSB $D6B8  ; Touch pad Y delta MSB
.alias CALYDELTAMSB $D6B8  ; Touch pad Y delta MSB
.alias TOUCH_TOUCH1XLSB $D6B9  ; Touch pad touch #1 X LSB
.alias TOUCH1XLSB $D6B9  ; Touch pad touch #1 X LSB
.alias TOUCH_TOUCH1YLSB $D6BA  ; Touch pad touch #1 Y LSB
.alias TOUCH1YLSB $D6BA  ; Touch pad touch #1 Y LSB
.alias GS_MISCIO_TCHXDELTA $D6BB  ; Set X delta value for touch interface (MSB)
.alias TOUCH_TOUCH1XMSB_ADDR $D6BB  ; Touch pad touch \#1 X MSBs (address)
.alias TOUCH1XMSB_ADDR $D6BB  ; Touch pad touch \#1 X MSBs (address)
.alias TOUCH_TOUCH1XMSB_MASK 3  ; Touch pad touch \#1 X MSBs (bit mask)
.alias TOUCH1XMSB_MASK 3  ; Touch pad touch \#1 X MSBs (bit mask)
.alias TOUCH_TOUCH1YMSB_ADDR $D6BB  ; Touch pad touch \#1 Y MSBs (address)
.alias TOUCH1YMSB_ADDR $D6BB  ; Touch pad touch \#1 Y MSBs (address)
.alias TOUCH_TOUCH1YMSB_MASK 48  ; Touch pad touch \#1 Y MSBs (bit mask)
.alias TOUCH1YMSB_MASK 48  ; Touch pad touch \#1 Y MSBs (bit mask)
.alias TOUCH_TOUCH2XLSB $D6BC  ; Touch pad touch \#2 X LSB
.alias TOUCH2XLSB $D6BC  ; Touch pad touch \#2 X LSB
.alias TOUCH_TOUCH2YLSB $D6BD  ; Touch pad touch \#2 Y LSB
.alias TOUCH2YLSB $D6BD  ; Touch pad touch \#2 Y LSB
.alias TOUCH_TOUCH2XMSB_ADDR $D6BE  ; Touch pad touch \#2 X MSBs (address)
.alias TOUCH2XMSB_ADDR $D6BE  ; Touch pad touch \#2 X MSBs (address)
.alias TOUCH_TOUCH2XMSB_MASK 3  ; Touch pad touch \#2 X MSBs (bit mask)
.alias TOUCH2XMSB_MASK 3  ; Touch pad touch \#2 X MSBs (bit mask)
.alias TOUCH_TOUCH2YMSB_ADDR $D6BE  ; Touch pad touch \#2 Y MSBs (address)
.alias TOUCH2YMSB_ADDR $D6BE  ; Touch pad touch \#2 Y MSBs (address)
.alias TOUCH_TOUCH2YMSB_MASK 48  ; Touch pad touch \#2 Y MSBs (bit mask)
.alias TOUCH2YMSB_MASK 48  ; Touch pad touch \#2 Y MSBs (bit mask)
.alias MISCIO_TCHBYTENUM_ADDR $D6BF  ; Select byte number for touch panel communications instrumentation (address)
.alias TCHBYTENUM_ADDR $D6BF  ; Select byte number for touch panel communications instrumentation (address)
.alias MISCIO_TCHBYTENUM_MASK 127  ; Select byte number for touch panel communications instrumentation (bit mask)
.alias TCHBYTENUM_MASK 127  ; Select byte number for touch panel communications instrumentation (bit mask)
.alias MISCIO_TCHI2CEN_ADDR $D6BF  ; Enable/disable touch panel I2C communications (address)
.alias TCHI2CEN_ADDR $D6BF  ; Enable/disable touch panel I2C communications (address)
.alias MISCIO_TCHI2CEN_MASK 128  ; Enable/disable touch panel I2C communications (bit mask)
.alias TCHI2CEN_MASK 128  ; Enable/disable touch panel I2C communications (bit mask)
.alias TOUCH_GESTUREDIR_ADDR $D6C0  ; Touch pad gesture directions (left,right,up,down) (address)
.alias GESTUREDIR_ADDR $D6C0  ; Touch pad gesture directions (left,right,up,down) (address)
.alias TOUCH_GESTUREDIR_MASK 15  ; Touch pad gesture directions (left,right,up,down) (bit mask)
.alias GESTUREDIR_MASK 15  ; Touch pad gesture directions (left,right,up,down) (bit mask)
.alias TOUCH_GESTUREID_ADDR $D6C0  ; Touch pad gesture ID (address)
.alias GESTUREID_ADDR $D6C0  ; Touch pad gesture ID (address)
.alias TOUCH_GESTUREID_MASK 240  ; Touch pad gesture ID (bit mask)
.alias GESTUREID_MASK 240  ; Touch pad gesture ID (bit mask)
.alias FPGA_REGNUM $D6C4  ; Select ICAPE2 FPGA configuration register for reading WRITE ONLY
.alias REGNUM $D6C4  ; Select ICAPE2 FPGA configuration register for reading WRITE ONLY
.alias FPGA_REGVAL $D6C4  ; Value of selected ICAPE2 register (least significant byte)
.alias GS_FPGA_REGVAL $D6C5  ; Value of selected ICAPE2 register
.alias GS_FPGA_REGVAL_2 $D6C6  ; Value of selected ICAPE2 register
.alias GS_FPGA_REGVAL_3 $D6C7  ; Value of selected ICAPE2 register (most significant byte)
.alias FPGA_BOOTADDR0 $D6C8  ; Address of bitstream in boot flash for reconfiguration (least significant byte)
.alias BOOTADDR0 $D6C8  ; Address of bitstream in boot flash for reconfiguration (least significant byte)
.alias FPGA_BOOTADDR1 $D6C9  ; Address of bitstream in boot flash for reconfiguration
.alias BOOTADDR1 $D6C9  ; Address of bitstream in boot flash for reconfiguration
.alias FPGA_BOOTADDR2 $D6CA  ; Address of bitstream in boot flash for reconfiguration
.alias BOOTADDR2 $D6CA  ; Address of bitstream in boot flash for reconfiguration
.alias FPGA_BOOTADDR3 $D6CB  ; Address of bitstream in boot flash for reconfiguration (most significant byte)
.alias BOOTADDR3 $D6CB  ; Address of bitstream in boot flash for reconfiguration (most significant byte)
.alias QSPI_DB_ADDR $D6CC  ; Data bits for QSPI flash interface (read/write) (address)
.alias DB_ADDR $D6CC  ; Data bits for QSPI flash interface (read/write) (address)
.alias QSPI_DB_MASK 15  ; Data bits for QSPI flash interface (read/write) (bit mask)
.alias DB_MASK 15  ; Data bits for QSPI flash interface (read/write) (bit mask)
.alias QSPI_RESERVED_ADDR $D6CC  ; (set to 0) (address)
.alias QSPI_RESERVED_MASK 16  ; (set to 0) (bit mask)
.alias QSPI_CLOCK_ADDR $D6CC  ; Clock output line for QSPI flash (address)
.alias QSPI_CLOCK_MASK 32  ; Clock output line for QSPI flash (bit mask)
.alias QSPI_CSN_ADDR $D6CC  ; Active-low chip-select for QSPI flash (address)
.alias CSN_ADDR $D6CC  ; Active-low chip-select for QSPI flash (address)
.alias QSPI_CSN_MASK 64  ; Active-low chip-select for QSPI flash (bit mask)
.alias CSN_MASK 64  ; Active-low chip-select for QSPI flash (bit mask)
.alias QSPI_TRI_ADDR $D6CC  ; Tristate DB0-3 (address)
.alias TRI_ADDR $D6CC  ; Tristate DB0-3 (address)
.alias QSPI_TRI_MASK 128  ; Tristate DB0-3 (bit mask)
.alias TRI_MASK 128  ; Tristate DB0-3 (bit mask)
.alias QSPI_CLOCKRUN_ADDR $D6CD  ; Set to cause QSPI clock to free run at CPU clock frequency. (address)
.alias CLOCKRUN_ADDR $D6CD  ; Set to cause QSPI clock to free run at CPU clock frequency. (address)
.alias QSPI_CLOCKRUN_MASK 1  ; Set to cause QSPI clock to free run at CPU clock frequency. (bit mask)
.alias CLOCKRUN_MASK 1  ; Set to cause QSPI clock to free run at CPU clock frequency. (bit mask)
.alias GS_QSPI_CLOCK_ADDR $D6CD  ; Alternate address for direct manipulation of QSPI CLOCK (address)
.alias GS_QSPI_CLOCK_MASK 2  ; Alternate address for direct manipulation of QSPI CLOCK (bit mask)
.alias FPGA_RECONFTRIG $D6CF  ; Write $42 to Trigger FPGA reconfiguration to switch to alternate bitstream.
.alias RECONFTRIG $D6CF  ; Write $42 to Trigger FPGA reconfiguration to switch to alternate bitstream.
.alias MISC_I2CBUSSELECT $D6D0  ; I2C bus select (bus 0 = temp sensor on Nexys4 boardS)
.alias I2CBUSSELECT $D6D0  ; I2C bus select (bus 0 = temp sensor on Nexys4 boardS)
.alias MISCIO_I2CBUSSEL $D6D0  ; Select I2C bus number (I2C busses vary between MEGA65 and MEGAphone variants)
.alias I2CBUSSEL $D6D0  ; Select I2C bus number (I2C busses vary between MEGA65 and MEGAphone variants)
.alias MISCIO_I2CRST_ADDR $D6D1  ; I2C reset (address)
.alias I2CRST_ADDR $D6D1  ; I2C reset (address)
.alias MISCIO_I2CRST_MASK 1  ; I2C reset (bit mask)
.alias I2CRST_MASK 1  ; I2C reset (bit mask)
.alias MISCIO_I2CL_ADDR $D6D1  ; I2C command latch write strobe (write 1 to trigger command) (address)
.alias I2CL_ADDR $D6D1  ; I2C command latch write strobe (write 1 to trigger command) (address)
.alias MISCIO_I2CL_MASK 2  ; I2C command latch write strobe (write 1 to trigger command) (bit mask)
.alias I2CL_MASK 2  ; I2C command latch write strobe (write 1 to trigger command) (bit mask)
.alias MISCIO_I2CRW_ADDR $D6D1  ; I2C Select read (1) or write (0) (address)
.alias I2CRW_ADDR $D6D1  ; I2C Select read (1) or write (0) (address)
.alias MISCIO_I2CRW_MASK 4  ; I2C Select read (1) or write (0) (bit mask)
.alias I2CRW_MASK 4  ; I2C Select read (1) or write (0) (bit mask)
.alias MISCIO_I2CSW_ADDR $D6D1  ; I2C bus 1 swap SDA/SCL pins (address)
.alias I2CSW_ADDR $D6D1  ; I2C bus 1 swap SDA/SCL pins (address)
.alias MISCIO_I2CSW_MASK 32  ; I2C bus 1 swap SDA/SCL pins (bit mask)
.alias I2CSW_MASK 32  ; I2C bus 1 swap SDA/SCL pins (bit mask)
.alias MISCIO_I2CBSY_ADDR $D6D1  ; I2C busy flag (address)
.alias I2CBSY_ADDR $D6D1  ; I2C busy flag (address)
.alias MISCIO_I2CBSY_MASK 64  ; I2C busy flag (bit mask)
.alias I2CBSY_MASK 64  ; I2C busy flag (bit mask)
.alias MISCIO_I2CERR_ADDR $D6D1  ; I2C ack error (address)
.alias I2CERR_ADDR $D6D1  ; I2C ack error (address)
.alias MISCIO_I2CERR_MASK 128  ; I2C ack error (bit mask)
.alias I2CERR_MASK 128  ; I2C ack error (bit mask)
.alias MISCIO_I2CADDR_ADDR $D6D2  ; I2C address (address)
.alias I2CADDR_ADDR $D6D2  ; I2C address (address)
.alias MISCIO_I2CADDR_MASK 254  ; I2C address (bit mask)
.alias I2CADDR_MASK 254  ; I2C address (bit mask)
.alias MISCIO_I2CWDATA $D6D3  ; I2C data write register
.alias I2CWDATA $D6D3  ; I2C data write register
.alias MISCIO_I2CRDATA $D6D4  ; I2C data read register
.alias I2CRDATA $D6D4  ; I2C data read register
.alias MISC_SDDEBUGERRLSB $D6DA  ; DEBUG SD card last error code LSB
.alias SDDEBUGERRLSB $D6DA  ; DEBUG SD card last error code LSB
.alias MISC_SDDEBUGERRMSB $D6DB  ; DEBUG SD card last error code MSB
.alias SDDEBUGERRMSB $D6DB  ; DEBUG SD card last error code MSB
.alias FPGA_FPGATEMPLSB $D6DE  ; FPGA die temperature sensor (lower nybl)
.alias FPGATEMPLSB $D6DE  ; FPGA die temperature sensor (lower nybl)
.alias FPGA_FPGATEMPMSB $D6DF  ; FPGA die temperature sensor (upper byte)
.alias FPGATEMPMSB $D6DF  ; FPGA die temperature sensor (upper byte)
.alias ETH_RST_ADDR $D6E0  ; Write 0 to hold ethernet controller under reset (address)
.alias ETH_RST_MASK 1  ; Write 0 to hold ethernet controller under reset (bit mask)
.alias ETH_TXRST_ADDR $D6E0  ; Write 0 to hold ethernet controller transmit sub-system under reset (address)
.alias TXRST_ADDR $D6E0  ; Write 0 to hold ethernet controller transmit sub-system under reset (address)
.alias ETH_TXRST_MASK 2  ; Write 0 to hold ethernet controller transmit sub-system under reset (bit mask)
.alias TXRST_MASK 2  ; Write 0 to hold ethernet controller transmit sub-system under reset (bit mask)
.alias ETH_DRXD_ADDR $D6E0  ; Read ethernet RX bits currently on the wire (address)
.alias DRXD_ADDR $D6E0  ; Read ethernet RX bits currently on the wire (address)
.alias ETH_DRXD_MASK 4  ; Read ethernet RX bits currently on the wire (bit mask)
.alias DRXD_MASK 4  ; Read ethernet RX bits currently on the wire (bit mask)
.alias ETH_DRXDV_ADDR $D6E0  ; Read ethernet RX data valid (debug) (address)
.alias DRXDV_ADDR $D6E0  ; Read ethernet RX data valid (debug) (address)
.alias ETH_DRXDV_MASK 8  ; Read ethernet RX data valid (debug) (bit mask)
.alias DRXDV_MASK 8  ; Read ethernet RX data valid (debug) (bit mask)
.alias ETH_KEYEN_ADDR $D6E0  ; Allow remote keyboard input via magic ethernet frames (address)
.alias KEYEN_ADDR $D6E0  ; Allow remote keyboard input via magic ethernet frames (address)
.alias ETH_KEYEN_MASK 16  ; Allow remote keyboard input via magic ethernet frames (bit mask)
.alias KEYEN_MASK 16  ; Allow remote keyboard input via magic ethernet frames (bit mask)
.alias ETH_RXBLKD_ADDR $D6E0  ; Indicate if ethernet RX is blocked until RX buffers freed (address)
.alias RXBLKD_ADDR $D6E0  ; Indicate if ethernet RX is blocked until RX buffers freed (address)
.alias ETH_RXBLKD_MASK 64  ; Indicate if ethernet RX is blocked until RX buffers freed (bit mask)
.alias RXBLKD_MASK 64  ; Indicate if ethernet RX is blocked until RX buffers freed (bit mask)
.alias ETH_TXIDLE_ADDR $D6E0  ; Ethernet transmit side is idle, i.e., a packet can be sent. (address)
.alias TXIDLE_ADDR $D6E0  ; Ethernet transmit side is idle, i.e., a packet can be sent. (address)
.alias ETH_TXIDLE_MASK 128  ; Ethernet transmit side is idle, i.e., a packet can be sent. (bit mask)
.alias TXIDLE_MASK 128  ; Ethernet transmit side is idle, i.e., a packet can be sent. (bit mask)
.alias ETH_RXBF_ADDR $D6E1  ; Number of free receive buffers (address)
.alias RXBF_ADDR $D6E1  ; Number of free receive buffers (address)
.alias ETH_RXBF_MASK 6  ; Number of free receive buffers (bit mask)
.alias RXBF_MASK 6  ; Number of free receive buffers (bit mask)
.alias ETH_STRM_ADDR $D6E1  ; Enable streaming of CPU instruction stream or VIC-IV display on ethernet (address)
.alias STRM_ADDR $D6E1  ; Enable streaming of CPU instruction stream or VIC-IV display on ethernet (address)
.alias ETH_STRM_MASK 8  ; Enable streaming of CPU instruction stream or VIC-IV display on ethernet (bit mask)
.alias STRM_MASK 8  ; Enable streaming of CPU instruction stream or VIC-IV display on ethernet (bit mask)
.alias ETH_TXQ_ADDR $D6E1  ; Ethernet TX IRQ status (address)
.alias TXQ_ADDR $D6E1  ; Ethernet TX IRQ status (address)
.alias ETH_TXQ_MASK 16  ; Ethernet TX IRQ status (bit mask)
.alias TXQ_MASK 16  ; Ethernet TX IRQ status (bit mask)
.alias ETH_RXQ_ADDR $D6E1  ; Ethernet RX IRQ status (address)
.alias RXQ_ADDR $D6E1  ; Ethernet RX IRQ status (address)
.alias ETH_RXQ_MASK 32  ; Ethernet RX IRQ status (bit mask)
.alias RXQ_MASK 32  ; Ethernet RX IRQ status (bit mask)
.alias ETH_TXQEN_ADDR $D6E1  ; Enable ethernet TX IRQ (address)
.alias TXQEN_ADDR $D6E1  ; Enable ethernet TX IRQ (address)
.alias ETH_TXQEN_MASK 64  ; Enable ethernet TX IRQ (bit mask)
.alias TXQEN_MASK 64  ; Enable ethernet TX IRQ (bit mask)
.alias ETH_RXQEN_ADDR $D6E1  ; Enable ethernet RX IRQ (address)
.alias RXQEN_ADDR $D6E1  ; Enable ethernet RX IRQ (address)
.alias ETH_RXQEN_MASK 128  ; Enable ethernet RX IRQ (bit mask)
.alias RXQEN_MASK 128  ; Enable ethernet RX IRQ (bit mask)
.alias ETH_TXSZLSB $D6E2  ; TX Packet size (low byte)
.alias TXSZLSB $D6E2  ; TX Packet size (low byte)
.alias ETH_TXSZMSB $D6E3  ; TX Packet size (high byte)
.alias TXSZMSB $D6E3  ; TX Packet size (high byte)
.alias ETH_COMMAND $D6E4  ; Ethernet command register (write only)
.alias ETH_NOPROM_ADDR $D6E5  ; Ethernet disable promiscuous mode (address)
.alias NOPROM_ADDR $D6E5  ; Ethernet disable promiscuous mode (address)
.alias ETH_NOPROM_MASK 1  ; Ethernet disable promiscuous mode (bit mask)
.alias NOPROM_MASK 1  ; Ethernet disable promiscuous mode (bit mask)
.alias ETH_NOCRC_ADDR $D6E5  ; Disable CRC check for received packets (address)
.alias NOCRC_ADDR $D6E5  ; Disable CRC check for received packets (address)
.alias ETH_NOCRC_MASK 2  ; Disable CRC check for received packets (bit mask)
.alias NOCRC_MASK 2  ; Disable CRC check for received packets (bit mask)
.alias ETH_TXPH_ADDR $D6E5  ; Ethernet TX clock phase adjust (address)
.alias TXPH_ADDR $D6E5  ; Ethernet TX clock phase adjust (address)
.alias ETH_TXPH_MASK 12  ; Ethernet TX clock phase adjust (bit mask)
.alias TXPH_MASK 12  ; Ethernet TX clock phase adjust (bit mask)
.alias ETH_BCST_ADDR $D6E5  ; Accept broadcast frames (address)
.alias BCST_ADDR $D6E5  ; Accept broadcast frames (address)
.alias ETH_BCST_MASK 16  ; Accept broadcast frames (bit mask)
.alias BCST_MASK 16  ; Accept broadcast frames (bit mask)
.alias ETH_MCST_ADDR $D6E5  ; Accept multicast frames (address)
.alias MCST_ADDR $D6E5  ; Accept multicast frames (address)
.alias ETH_MCST_MASK 32  ; Accept multicast frames (bit mask)
.alias MCST_MASK 32  ; Accept multicast frames (bit mask)
.alias ETH_RXPH_ADDR $D6E5  ; Ethernet RX clock phase adjust (address)
.alias RXPH_ADDR $D6E5  ; Ethernet RX clock phase adjust (address)
.alias ETH_RXPH_MASK 192  ; Ethernet RX clock phase adjust (bit mask)
.alias RXPH_MASK 192  ; Ethernet RX clock phase adjust (bit mask)
.alias ETH_MIIMREG_ADDR $D6E6  ; Ethernet MIIM register number (address)
.alias MIIMREG_ADDR $D6E6  ; Ethernet MIIM register number (address)
.alias ETH_MIIMREG_MASK 31  ; Ethernet MIIM register number (bit mask)
.alias MIIMREG_MASK 31  ; Ethernet MIIM register number (bit mask)
.alias ETH_MIIMPHY_ADDR $D6E6  ; Ethernet MIIM PHY number (use 0 for Nexys4, 1 for MEGA65 r1 PCBs) (address)
.alias MIIMPHY_ADDR $D6E6  ; Ethernet MIIM PHY number (use 0 for Nexys4, 1 for MEGA65 r1 PCBs) (address)
.alias ETH_MIIMPHY_MASK 224  ; Ethernet MIIM PHY number (use 0 for Nexys4, 1 for MEGA65 r1 PCBs) (bit mask)
.alias MIIMPHY_MASK 224  ; Ethernet MIIM PHY number (use 0 for Nexys4, 1 for MEGA65 r1 PCBs) (bit mask)
.alias ETH_MIIMVLSB $D6E7  ; Ethernet MIIM register value (LSB)
.alias MIIMVLSB $D6E7  ; Ethernet MIIM register value (LSB)
.alias ETH_MIIMVMSB $D6E8  ; Ethernet MIIM register value (MSB)
.alias MIIMVMSB $D6E8  ; Ethernet MIIM register value (MSB)
.alias ETH_MACADDR1 $D6E9  ; Ethernet MAC address
.alias MACADDR1 $D6E9  ; Ethernet MAC address
.alias ETH_MACADDR2 $D6EA  ; @MACADDRX
.alias MACADDR2 $D6EA  ; @MACADDRX
.alias ETH_MACADDR3 $D6EB  ; @MACADDRX
.alias MACADDR3 $D6EB  ; @MACADDRX
.alias ETH_MACADDR4 $D6EC  ; @MACADDRX
.alias MACADDR4 $D6EC  ; @MACADDRX
.alias ETH_MACADDR5 $D6ED  ; @MACADDRX
.alias MACADDR5 $D6ED  ; @MACADDRX
.alias ETH_MACADDR6 $D6EE  ; @MACADDRX
.alias MACADDR6 $D6EE  ; @MACADDRX
.alias ETH_DBGRXWCOUNT $D6EF  ; DEBUG show number of writes to eth RX buffer
.alias DBGRXWCOUNT $D6EF  ; DEBUG show number of writes to eth RX buffer
.alias ETH_DBGTXSTAT $D6EF  ; DEBUG show current ethernet TX state
.alias DBGTXSTAT $D6EF  ; DEBUG show current ethernet TX state
.alias MISC_LCDBRIGHTNESS $D6F0  ; LCD panel brightness control
.alias LCDBRIGHTNESS $D6F0  ; LCD panel brightness control
.alias MISCIO_LCDBRIGHT $D6F0  ; LCD panel brightness control
.alias LCDBRIGHT $D6F0  ; LCD panel brightness control
.alias MISC_FPGABUTTONS $D6F2  ; Read FPGA five-way buttons
.alias FPGABUTTONS $D6F2  ; Read FPGA five-way buttons
.alias MISC_ACCELBITBASH $D6F3  ; Accelerometer bit-bash interface
.alias ACCELBITBASH $D6F3  ; Accelerometer bit-bash interface
.alias MISCIO_ACCELBASH $D6F3  ; Accelerometer bit-bashing port (debug only)
.alias ACCELBASH $D6F3  ; Accelerometer bit-bashing port (debug only)
.alias AUDIO_MIXREGSEL $D6F4  ; Audio Mixer register select
.alias MIXREGSEL $D6F4  ; Audio Mixer register select
.alias AUDIOMIX_REGSEL $D6F4  ; Audio Mixer register select
.alias REGSEL $D6F4  ; Audio Mixer register select
.alias AUDIO_MIXREGDATA $D6F5  ; Audio Mixer register read port
.alias MIXREGDATA $D6F5  ; Audio Mixer register read port
.alias AUDIOMIX_REGWDATA $D6F5  ; Audio Mixer register write port
.alias REGWDATA $D6F5  ; Audio Mixer register write port
.alias MISC_PS2KEYSCANLSB $D6F6  ; Keyboard scan code reader (lower byte)
.alias PS2KEYSCANLSB $D6F6  ; Keyboard scan code reader (lower byte)
.alias MISC_PS2KEYSCANMSB $D6F7  ; Keyboard scan code reader (upper nybl)
.alias PS2KEYSCANMSB $D6F7  ; Keyboard scan code reader (upper nybl)
.alias AUDIO_DIGILEFTLSB $D6F8  ; Digital audio, left channel, LSB
.alias DIGILEFTLSB $D6F8  ; Digital audio, left channel, LSB
.alias AUDIO_DIGILLSB $D6F8  ; 16-bit digital audio out (left LSB)
.alias DIGILLSB $D6F8  ; 16-bit digital audio out (left LSB)
.alias AUDIO_DIGILEFTMSB $D6F9  ; Digital audio, left channel, MSB
.alias DIGILEFTMSB $D6F9  ; Digital audio, left channel, MSB
.alias AUDIO_DIGILMSB $D6F9  ; 16-bit digital audio out (left MSB)
.alias DIGILMSB $D6F9  ; 16-bit digital audio out (left MSB)
.alias AUDIO_DIGIRIGHTLSB $D6FA  ; Digital audio, left channel, LSB
.alias DIGIRIGHTLSB $D6FA  ; Digital audio, left channel, LSB
.alias AUDIO_DIGIRLSB $D6FA  ; 16-bit digital audio out (right LSB)
.alias DIGIRLSB $D6FA  ; 16-bit digital audio out (right LSB)
.alias AUDIO_DIGIRIGHTMSB $D6FB  ; Digital audio, left channel, MSB
.alias DIGIRIGHTMSB $D6FB  ; Digital audio, left channel, MSB
.alias AUDIO_DIGIRMSB $D6FB  ; 16-bit digital audio out (right MSB)
.alias DIGIRMSB $D6FB  ; 16-bit digital audio out (right MSB)
.alias AUDIO_READBACKLSB $D6FC  ; audio read-back LSB (source selected by $D6F4)
.alias READBACKLSB $D6FC  ; audio read-back LSB (source selected by $D6F4)
.alias AUDIO_READBACKMSB $D6FD  ; audio read-back MSB (source selected by $D6F4)
.alias READBACKMSB $D6FD  ; audio read-back MSB (source selected by $D6F4)
.alias DMA_ADDRLSBTRIG $D700  ; DMAgic DMA list address LSB, and trigger DMA (when written)
.alias ADDRLSBTRIG $D700  ; DMAgic DMA list address LSB, and trigger DMA (when written)
.alias DMA_ADDRMSB $D701  ; DMA list address high byte (address bits 8 -- 15).
.alias ADDRMSB $D701  ; DMA list address high byte (address bits 8 -- 15).
.alias DMA_ADDRBANK $D702  ; DMA list address bank (address bits 16 -- 22). Writing clears \$D704.
.alias ADDRBANK $D702  ; DMA list address bank (address bits 16 -- 22). Writing clears \$D704.
.alias DMA_EN018B_ADDR $D703  ; DMA enable F018B mode (adds sub-command byte) (address)
.alias EN018B_ADDR $D703  ; DMA enable F018B mode (adds sub-command byte) (address)
.alias DMA_EN018B_MASK 1  ; DMA enable F018B mode (adds sub-command byte) (bit mask)
.alias EN018B_MASK 1  ; DMA enable F018B mode (adds sub-command byte) (bit mask)
.alias DMA_ADDRMB $D704  ; DMA list address mega-byte
.alias ADDRMB $D704  ; DMA list address mega-byte
.alias DMA_ETRIG $D705  ; Set low-order byte of DMA list address, and trigger Enhanced DMA job, with list address specified as 28-bit flat address (uses DMA option list)
.alias ETRIG $D705  ; Set low-order byte of DMA list address, and trigger Enhanced DMA job, with list address specified as 28-bit flat address (uses DMA option list)
.alias DMA_ETRIGMAPD $D706  ; Set low-order byte of DMA list address, and trigger Enhanced DMA job, with list in current CPU memory map (uses DMA option list)
.alias ETRIGMAPD $D706  ; Set low-order byte of DMA list address, and trigger Enhanced DMA job, with list in current CPU memory map (uses DMA option list)
.alias DMA_ADDRLSB $D70E  ; DMA list address low byte (address bits 0 -- 7) WITHOUT STARTING A DMA JOB (used by Hypervisor for unfreezing DMA-using tasks)
.alias ADDRLSB $D70E  ; DMA list address low byte (address bits 0 -- 7) WITHOUT STARTING A DMA JOB (used by Hypervisor for unfreezing DMA-using tasks)
.alias MATH_MULBUSY_ADDR $D70F  ; Set if hardware multiplier is busy (address)
.alias MULBUSY_ADDR $D70F  ; Set if hardware multiplier is busy (address)
.alias MATH_MULBUSY_MASK 64  ; Set if hardware multiplier is busy (bit mask)
.alias MULBUSY_MASK 64  ; Set if hardware multiplier is busy (bit mask)
.alias MATH_DIVBUSY_ADDR $D70F  ; Set if hardware divider is busy (address)
.alias DIVBUSY_ADDR $D70F  ; Set if hardware divider is busy (address)
.alias MATH_DIVBUSY_MASK 128  ; Set if hardware divider is busy (bit mask)
.alias DIVBUSY_MASK 128  ; Set if hardware divider is busy (bit mask)
.alias CPU_BADLEN_ADDR $D710  ; Enable badline emulation (address)
.alias BADLEN_ADDR $D710  ; Enable badline emulation (address)
.alias CPU_BADLEN_MASK 1  ; Enable badline emulation (bit mask)
.alias BADLEN_MASK 1  ; Enable badline emulation (bit mask)
.alias CPU_SLIEN_ADDR $D710  ; Enable 6502-style slow (7 cycle) interrupts (address)
.alias SLIEN_ADDR $D710  ; Enable 6502-style slow (7 cycle) interrupts (address)
.alias CPU_SLIEN_MASK 2  ; Enable 6502-style slow (7 cycle) interrupts (bit mask)
.alias SLIEN_MASK 2  ; Enable 6502-style slow (7 cycle) interrupts (bit mask)
.alias MISC_VDCSEN_ADDR $D710  ; Enable VDC inteface simulation (address)
.alias VDCSEN_ADDR $D710  ; Enable VDC inteface simulation (address)
.alias MISC_VDCSEN_MASK 4  ; Enable VDC inteface simulation (bit mask)
.alias VDCSEN_MASK 4  ; Enable VDC inteface simulation (bit mask)
.alias CPU_BRCOST_ADDR $D710  ; 1=charge extra cycle(s) for branches taken (address)
.alias BRCOST_ADDR $D710  ; 1=charge extra cycle(s) for branches taken (address)
.alias CPU_BRCOST_MASK 8  ; 1=charge extra cycle(s) for branches taken (bit mask)
.alias BRCOST_MASK 8  ; 1=charge extra cycle(s) for branches taken (bit mask)
.alias CPU_BADEXTRA_ADDR $D710  ; Cost of badlines minus 40. ie. 00=40 cycles, 11 = 43 cycles. (address)
.alias BADEXTRA_ADDR $D710  ; Cost of badlines minus 40. ie. 00=40 cycles, 11 = 43 cycles. (address)
.alias CPU_BADEXTRA_MASK 48  ; Cost of badlines minus 40. ie. 00=40 cycles, 11 = 43 cycles. (bit mask)
.alias BADEXTRA_MASK 48  ; Cost of badlines minus 40. ie. 00=40 cycles, 11 = 43 cycles. (bit mask)
.alias DMA_AUD_BLKTO_ADDR $D711  ; Audio DMA block timeout (read only) DEBUG (address)
.alias AUD_BLKTO_ADDR $D711  ; Audio DMA block timeout (read only) DEBUG (address)
.alias DMA_AUD_BLKTO_MASK 7  ; Audio DMA block timeout (read only) DEBUG (bit mask)
.alias AUD_BLKTO_MASK 7  ; Audio DMA block timeout (read only) DEBUG (bit mask)
.alias AUDIO_PWMPDM_ADDR $D711  ; PWM/PDM audio encoding select (address)
.alias PWMPDM_ADDR $D711  ; PWM/PDM audio encoding select (address)
.alias AUDIO_PWMPDM_MASK 8  ; PWM/PDM audio encoding select (bit mask)
.alias PWMPDM_MASK 8  ; PWM/PDM audio encoding select (bit mask)
.alias DMA_NOMIX_ADDR $D711  ; Audio DMA bypasses audio mixer (address)
.alias NOMIX_ADDR $D711  ; Audio DMA bypasses audio mixer (address)
.alias DMA_NOMIX_MASK 16  ; Audio DMA bypasses audio mixer (bit mask)
.alias NOMIX_MASK 16  ; Audio DMA bypasses audio mixer (bit mask)
.alias DMA_AUD_WRBLK_ADDR $D711  ; Audio DMA block writes (samples still get read) (address)
.alias AUD_WRBLK_ADDR $D711  ; Audio DMA block writes (samples still get read) (address)
.alias DMA_AUD_WRBLK_MASK 32  ; Audio DMA block writes (samples still get read) (bit mask)
.alias AUD_WRBLK_MASK 32  ; Audio DMA block writes (samples still get read) (bit mask)
.alias DMA_BLKD_ADDR $D711  ; Audio DMA blocked (read only) DEBUG (address)
.alias BLKD_ADDR $D711  ; Audio DMA blocked (read only) DEBUG (address)
.alias DMA_BLKD_MASK 64  ; Audio DMA blocked (read only) DEBUG (bit mask)
.alias BLKD_MASK 64  ; Audio DMA blocked (read only) DEBUG (bit mask)
.alias DMA_AUDEN_ADDR $D711  ; Enable Audio DMA (address)
.alias AUDEN_ADDR $D711  ; Enable Audio DMA (address)
.alias DMA_AUDEN_MASK 128  ; Enable Audio DMA (bit mask)
.alias AUDEN_MASK 128  ; Enable Audio DMA (bit mask)
.alias DMA_CH0RVOL $D71C  ; Audio DMA channel 0 right channel volume
.alias CH0RVOL $D71C  ; Audio DMA channel 0 right channel volume
.alias DMA_CH1RVOL $D71D  ; Audio DMA channel 1 right channel volume
.alias CH1RVOL $D71D  ; Audio DMA channel 1 right channel volume
.alias DMA_CH2LVOL $D71E  ; Audio DMA channel 2 left channel volume
.alias CH2LVOL $D71E  ; Audio DMA channel 2 left channel volume
.alias DMA_CH3LVOL $D71F  ; Audio DMA channel 3 left channel volume
.alias CH3LVOL $D71F  ; Audio DMA channel 3 left channel volume
.alias DMA_CH0_SBITS_ADDR $D720  ; Audio DMA channel X sample bits (11=16, 10=8, 01=upper nybl, 00=lower nybl) (address)
.alias CH0_SBITS_ADDR $D720  ; Audio DMA channel X sample bits (11=16, 10=8, 01=upper nybl, 00=lower nybl) (address)
.alias DMA_CH0_SBITS_MASK 3  ; Audio DMA channel X sample bits (11=16, 10=8, 01=upper nybl, 00=lower nybl) (bit mask)
.alias CH0_SBITS_MASK 3  ; Audio DMA channel X sample bits (11=16, 10=8, 01=upper nybl, 00=lower nybl) (bit mask)
.alias DMA_CH0_STP_ADDR $D720  ; Audio DMA channel X stop flag (address)
.alias CH0_STP_ADDR $D720  ; Audio DMA channel X stop flag (address)
.alias DMA_CH0_STP_MASK 8  ; Audio DMA channel X stop flag (bit mask)
.alias CH0_STP_MASK 8  ; Audio DMA channel X stop flag (bit mask)
.alias DMA_CH0_SINE_ADDR $D720  ; Audio DMA channel X play 32-sample sine wave instead of DMA data (address)
.alias CH0_SINE_ADDR $D720  ; Audio DMA channel X play 32-sample sine wave instead of DMA data (address)
.alias DMA_CH0_SINE_MASK 16  ; Audio DMA channel X play 32-sample sine wave instead of DMA data (bit mask)
.alias CH0_SINE_MASK 16  ; Audio DMA channel X play 32-sample sine wave instead of DMA data (bit mask)
.alias DMA_CH0_SGN_ADDR $D720  ; Enable Audio DMA channel X signed samples (address)
.alias CH0_SGN_ADDR $D720  ; Enable Audio DMA channel X signed samples (address)
.alias DMA_CH0_SGN_MASK 32  ; Enable Audio DMA channel X signed samples (bit mask)
.alias CH0_SGN_MASK 32  ; Enable Audio DMA channel X signed samples (bit mask)
.alias DMA_CH0_LOOP_ADDR $D720  ; Enable Audio DMA channel X looping (address)
.alias CH0_LOOP_ADDR $D720  ; Enable Audio DMA channel X looping (address)
.alias DMA_CH0_LOOP_MASK 64  ; Enable Audio DMA channel X looping (bit mask)
.alias CH0_LOOP_MASK 64  ; Enable Audio DMA channel X looping (bit mask)
.alias DMA_CH0_EN_ADDR $D720  ; Enable Audio DMA channel X (address)
.alias CH0_EN_ADDR $D720  ; Enable Audio DMA channel X (address)
.alias DMA_CH0_EN_MASK 128  ; Enable Audio DMA channel X (bit mask)
.alias CH0_EN_MASK 128  ; Enable Audio DMA channel X (bit mask)
.alias DMA_CH0BADDRL $D721  ; Audio DMA channel X base address LSB
.alias CH0BADDRL $D721  ; Audio DMA channel X base address LSB
.alias DMA_CH0BADDRC $D722  ; Audio DMA channel X base address middle byte
.alias CH0BADDRC $D722  ; Audio DMA channel X base address middle byte
.alias DMA_CH0BADDRM $D723  ; Audio DMA channel X base address MSB
.alias CH0BADDRM $D723  ; Audio DMA channel X base address MSB
.alias DMA_CH0FREQL $D724  ; Audio DMA channel X frequency LSB
.alias CH0FREQL $D724  ; Audio DMA channel X frequency LSB
.alias DMA_CH0FREQC $D725  ; Audio DMA channel X frequency middle byte
.alias CH0FREQC $D725  ; Audio DMA channel X frequency middle byte
.alias DMA_CH0FREQM $D726  ; Audio DMA channel X frequency MSB
.alias CH0FREQM $D726  ; Audio DMA channel X frequency MSB
.alias DMA_CH0TADDRL $D727  ; Audio DMA channel X top address LSB
.alias CH0TADDRL $D727  ; Audio DMA channel X top address LSB
.alias DMA_CH0TADDRM $D728  ; Audio DMA channel X top address MSB
.alias CH0TADDRM $D728  ; Audio DMA channel X top address MSB
.alias DMA_CH0VOLUME $D729  ; Audio DMA channel X playback volume
.alias CH0VOLUME $D729  ; Audio DMA channel X playback volume
.alias DMA_CH0CURADDRL $D72A  ; Audio DMA channel X current address LSB
.alias CH0CURADDRL $D72A  ; Audio DMA channel X current address LSB
.alias DMA_CH0CURADDRC $D72B  ; Audio DMA channel X current address middle byte
.alias CH0CURADDRC $D72B  ; Audio DMA channel X current address middle byte
.alias DMA_CH0CURADDRM $D72C  ; Audio DMA channel X current address MSB
.alias CH0CURADDRM $D72C  ; Audio DMA channel X current address MSB
.alias DMA_CH0TMRADDRL $D72D  ; Audio DMA channel X timing counter LSB
.alias CH0TMRADDRL $D72D  ; Audio DMA channel X timing counter LSB
.alias DMA_CH0TMRADDRC $D72E  ; Audio DMA channel X timing counter middle byte
.alias CH0TMRADDRC $D72E  ; Audio DMA channel X timing counter middle byte
.alias DMA_CH0TMRADDRM $D72F  ; Audio DMA channel X timing counter MSB
.alias CH0TMRADDRM $D72F  ; Audio DMA channel X timing counter MSB
.alias DMA_CH1_SBITS_ADDR $D730  ; @CHXSBITS (address)
.alias CH1_SBITS_ADDR $D730  ; @CHXSBITS (address)
.alias DMA_CH1_SBITS_MASK 3  ; @CHXSBITS (bit mask)
.alias CH1_SBITS_MASK 3  ; @CHXSBITS (bit mask)
.alias DMA_CH1_STP_ADDR $D730  ; @CHXSTP (address)
.alias CH1_STP_ADDR $D730  ; @CHXSTP (address)
.alias DMA_CH1_STP_MASK 8  ; @CHXSTP (bit mask)
.alias CH1_STP_MASK 8  ; @CHXSTP (bit mask)
.alias DMA_CH1_SINE_ADDR $D730  ; @CHXSINE (address)
.alias CH1_SINE_ADDR $D730  ; @CHXSINE (address)
.alias DMA_CH1_SINE_MASK 16  ; @CHXSINE (bit mask)
.alias CH1_SINE_MASK 16  ; @CHXSINE (bit mask)
.alias DMA_CH1_SGN_ADDR $D730  ; @CHXSGN (address)
.alias CH1_SGN_ADDR $D730  ; @CHXSGN (address)
.alias DMA_CH1_SGN_MASK 32  ; @CHXSGN (bit mask)
.alias CH1_SGN_MASK 32  ; @CHXSGN (bit mask)
.alias DMA_CH1_LOOP_ADDR $D730  ; @CHXLOOP (address)
.alias CH1_LOOP_ADDR $D730  ; @CHXLOOP (address)
.alias DMA_CH1_LOOP_MASK 64  ; @CHXLOOP (bit mask)
.alias CH1_LOOP_MASK 64  ; @CHXLOOP (bit mask)
.alias DMA_CH1_EN_ADDR $D730  ; @CHXEN (address)
.alias CH1_EN_ADDR $D730  ; @CHXEN (address)
.alias DMA_CH1_EN_MASK 128  ; @CHXEN (bit mask)
.alias CH1_EN_MASK 128  ; @CHXEN (bit mask)
.alias DMA_CH1BADDRL $D731  ; @CHXBADDRL
.alias CH1BADDRL $D731  ; @CHXBADDRL
.alias DMA_CH1BADDRC $D732  ; @CHXBADDRC
.alias CH1BADDRC $D732  ; @CHXBADDRC
.alias DMA_CH1BADDRM $D733  ; @CHXBADDRM
.alias CH1BADDRM $D733  ; @CHXBADDRM
.alias DMA_CH1FREQL $D734  ; @CHXFREQL
.alias CH1FREQL $D734  ; @CHXFREQL
.alias DMA_CH1FREQC $D735  ; @CHXFREQC
.alias CH1FREQC $D735  ; @CHXFREQC
.alias DMA_CH1FREQM $D736  ; @CHXFREQM
.alias CH1FREQM $D736  ; @CHXFREQM
.alias DMA_CH1TADDRL $D737  ; @CHXTADDRL
.alias CH1TADDRL $D737  ; @CHXTADDRL
.alias DMA_CH1TADDRM $D738  ; @CHXTADDRM
.alias CH1TADDRM $D738  ; @CHXTADDRM
.alias DMA_CH1VOLUME $D739  ; @CHXVOLUME
.alias CH1VOLUME $D739  ; @CHXVOLUME
.alias DMA_CH1CURADDRL $D73A  ; @CHXCURADDRL
.alias CH1CURADDRL $D73A  ; @CHXCURADDRL
.alias DMA_CH1CURADDRC $D73B  ; @CHXCURADDRC
.alias CH1CURADDRC $D73B  ; @CHXCURADDRC
.alias DMA_CH1CURADDRM $D73C  ; @CHXCURADDRM
.alias CH1CURADDRM $D73C  ; @CHXCURADDRM
.alias DMA_CH1TMRADDRL $D73D  ; @CHXTMRADDRL
.alias CH1TMRADDRL $D73D  ; @CHXTMRADDRL
.alias DMA_CH1TMRADDRC $D73E  ; @CHXTMRADDRC
.alias CH1TMRADDRC $D73E  ; @CHXTMRADDRC
.alias DMA_CH1TMRADDRM $D73F  ; @CHXTMRADDRM
.alias CH1TMRADDRM $D73F  ; @CHXTMRADDRM
.alias DMA_CH2_SBITS_ADDR $D740  ; @CHXSBITS (address)
.alias CH2_SBITS_ADDR $D740  ; @CHXSBITS (address)
.alias DMA_CH2_SBITS_MASK 3  ; @CHXSBITS (bit mask)
.alias CH2_SBITS_MASK 3  ; @CHXSBITS (bit mask)
.alias DMA_CH2_STP_ADDR $D740  ; @CHXSTP (address)
.alias CH2_STP_ADDR $D740  ; @CHXSTP (address)
.alias DMA_CH2_STP_MASK 8  ; @CHXSTP (bit mask)
.alias CH2_STP_MASK 8  ; @CHXSTP (bit mask)
.alias DMA_CH2_SINE_ADDR $D740  ; @CHXSINE (address)
.alias CH2_SINE_ADDR $D740  ; @CHXSINE (address)
.alias DMA_CH2_SINE_MASK 16  ; @CHXSINE (bit mask)
.alias CH2_SINE_MASK 16  ; @CHXSINE (bit mask)
.alias DMA_CH2_SGN_ADDR $D740  ; @CHXSGN (address)
.alias CH2_SGN_ADDR $D740  ; @CHXSGN (address)
.alias DMA_CH2_SGN_MASK 32  ; @CHXSGN (bit mask)
.alias CH2_SGN_MASK 32  ; @CHXSGN (bit mask)
.alias DMA_CH2_LOOP_ADDR $D740  ; @CHXLOOP (address)
.alias CH2_LOOP_ADDR $D740  ; @CHXLOOP (address)
.alias DMA_CH2_LOOP_MASK 64  ; @CHXLOOP (bit mask)
.alias CH2_LOOP_MASK 64  ; @CHXLOOP (bit mask)
.alias DMA_CH2_EN_ADDR $D740  ; @CHXEN (address)
.alias CH2_EN_ADDR $D740  ; @CHXEN (address)
.alias DMA_CH2_EN_MASK 128  ; @CHXEN (bit mask)
.alias CH2_EN_MASK 128  ; @CHXEN (bit mask)
.alias DMA_CH2BADDRL $D741  ; @CHXBADDRL
.alias CH2BADDRL $D741  ; @CHXBADDRL
.alias DMA_CH2BADDRC $D742  ; @CHXBADDRC
.alias CH2BADDRC $D742  ; @CHXBADDRC
.alias DMA_CH2BADDRM $D743  ; @CHXBADDRM
.alias CH2BADDRM $D743  ; @CHXBADDRM
.alias DMA_CH2FREQL $D744  ; @CHXFREQL
.alias CH2FREQL $D744  ; @CHXFREQL
.alias DMA_CH2FREQC $D745  ; @CHXFREQC
.alias CH2FREQC $D745  ; @CHXFREQC
.alias DMA_CH2FREQM $D746  ; @CHXFREQM
.alias CH2FREQM $D746  ; @CHXFREQM
.alias DMA_CH2TADDRL $D747  ; @CHXTADDRL
.alias CH2TADDRL $D747  ; @CHXTADDRL
.alias DMA_CH2TADDRM $D748  ; @CHXTADDRM
.alias CH2TADDRM $D748  ; @CHXTADDRM
.alias DMA_CH2VOLUME $D749  ; @CHXVOLUME
.alias CH2VOLUME $D749  ; @CHXVOLUME
.alias DMA_CH2CURADDRL $D74A  ; @CHXCURADDRL
.alias CH2CURADDRL $D74A  ; @CHXCURADDRL
.alias DMA_CH2CURADDRC $D74B  ; @CHXCURADDRC
.alias CH2CURADDRC $D74B  ; @CHXCURADDRC
.alias DMA_CH2CURADDRM $D74C  ; @CHXCURADDRM
.alias CH2CURADDRM $D74C  ; @CHXCURADDRM
.alias DMA_CH2TMRADDRL $D74D  ; @CHXTMRADDRL
.alias CH2TMRADDRL $D74D  ; @CHXTMRADDRL
.alias DMA_CH2TMRADDRC $D74E  ; @CHXTMRADDRC
.alias CH2TMRADDRC $D74E  ; @CHXTMRADDRC
.alias DMA_CH2TMRADDRM $D74F  ; @CHXTMRADDRM
.alias CH2TMRADDRM $D74F  ; @CHXTMRADDRM
.alias DMA_CH3_SBITS_ADDR $D750  ; @CHXSBITS (address)
.alias CH3_SBITS_ADDR $D750  ; @CHXSBITS (address)
.alias DMA_CH3_SBITS_MASK 3  ; @CHXSBITS (bit mask)
.alias CH3_SBITS_MASK 3  ; @CHXSBITS (bit mask)
.alias DMA_CH3_STP_ADDR $D750  ; @CHXSTP (address)
.alias CH3_STP_ADDR $D750  ; @CHXSTP (address)
.alias DMA_CH3_STP_MASK 8  ; @CHXSTP (bit mask)
.alias CH3_STP_MASK 8  ; @CHXSTP (bit mask)
.alias DMA_CH3_SINE_ADDR $D750  ; @CHXSINE (address)
.alias CH3_SINE_ADDR $D750  ; @CHXSINE (address)
.alias DMA_CH3_SINE_MASK 16  ; @CHXSINE (bit mask)
.alias CH3_SINE_MASK 16  ; @CHXSINE (bit mask)
.alias DMA_CH3_SGN_ADDR $D750  ; @CHXSGN (address)
.alias CH3_SGN_ADDR $D750  ; @CHXSGN (address)
.alias DMA_CH3_SGN_MASK 32  ; @CHXSGN (bit mask)
.alias CH3_SGN_MASK 32  ; @CHXSGN (bit mask)
.alias DMA_CH3_LOOP_ADDR $D750  ; @CHXLOOP (address)
.alias CH3_LOOP_ADDR $D750  ; @CHXLOOP (address)
.alias DMA_CH3_LOOP_MASK 64  ; @CHXLOOP (bit mask)
.alias CH3_LOOP_MASK 64  ; @CHXLOOP (bit mask)
.alias DMA_CH3_EN_ADDR $D750  ; @CHXEN (address)
.alias CH3_EN_ADDR $D750  ; @CHXEN (address)
.alias DMA_CH3_EN_MASK 128  ; @CHXEN (bit mask)
.alias CH3_EN_MASK 128  ; @CHXEN (bit mask)
.alias DMA_CH3BADDRL $D751  ; @CHXBADDRL
.alias CH3BADDRL $D751  ; @CHXBADDRL
.alias DMA_CH3BADDRC $D752  ; @CHXBADDRC
.alias CH3BADDRC $D752  ; @CHXBADDRC
.alias DMA_CH3BADDRM $D753  ; @CHXBADDRM
.alias CH3BADDRM $D753  ; @CHXBADDRM
.alias DMA_CH3FREQL $D754  ; @CHXFREQL
.alias CH3FREQL $D754  ; @CHXFREQL
.alias DMA_CH3FREQC $D755  ; @CHXFREQC
.alias CH3FREQC $D755  ; @CHXFREQC
.alias DMA_CH3FREQM $D756  ; @CHXFREQM
.alias CH3FREQM $D756  ; @CHXFREQM
.alias DMA_CH3TADDRL $D757  ; @CHXTADDRL
.alias CH3TADDRL $D757  ; @CHXTADDRL
.alias DMA_CH3TADDRM $D758  ; @CHXTADDRM
.alias CH3TADDRM $D758  ; @CHXTADDRM
.alias DMA_CH3VOLUME $D759  ; @CHXVOLUME
.alias CH3VOLUME $D759  ; @CHXVOLUME
.alias DMA_CH3CURADDRL $D75A  ; @CHXCURADDRL
.alias CH3CURADDRL $D75A  ; @CHXCURADDRL
.alias DMA_CH3CURADDRC $D75B  ; @CHXCURADDRC
.alias CH3CURADDRC $D75B  ; @CHXCURADDRC
.alias DMA_CH3CURADDRM $D75C  ; @CHXCURADDRM
.alias CH3CURADDRM $D75C  ; @CHXCURADDRM
.alias DMA_CH3TMRADDRL $D75D  ; @CHXTMRADDRL
.alias CH3TMRADDRL $D75D  ; @CHXTMRADDRL
.alias DMA_CH3TMRADDRC $D75E  ; @CHXTMRADDRC
.alias CH3TMRADDRC $D75E  ; @CHXTMRADDRC
.alias DMA_CH3TMRADDRM $D75F  ; @CHXTMRADDRM
.alias CH3TMRADDRM $D75F  ; @CHXTMRADDRM
.alias MATH_DIVOUT $D768  ; 64-bit output of MULTINA $\div$ MULTINB
.alias GS_MATH_DIVOUT $D769  ; 64-bit output of MULTINA $\div$ MULTINB
.alias GS_MATH_DIVOUT_2 $D76A  ; 64-bit output of MULTINA $\div$ MULTINB
.alias GS_MATH_DIVOUT_3 $D76B  ; 64-bit output of MULTINA $\div$ MULTINB
.alias GS_MATH_DIVOUT_4 $D76C  ; 64-bit output of MULTINA $\div$ MULTINB
.alias GS_MATH_DIVOUT_5 $D76D  ; 64-bit output of MULTINA $\div$ MULTINB
.alias GS_MATH_DIVOUT_6 $D76E  ; 64-bit output of MULTINA $\div$ MULTINB
.alias GS_MATH_DIVOUT_7 $D76F  ; 64-bit output of MULTINA $\div$ MULTINB
.alias MATH_MULTINA $D770  ; Multiplier input A / Divider numerator (32 bit)
.alias GS_MATH_MULTINA $D771  ; Multiplier input A / Divider numerator (32 bit)
.alias GS_MATH_MULTINA_2 $D772  ; Multiplier input A / Divider numerator (32 bit)
.alias GS_MATH_MULTINA_3 $D773  ; Multiplier input A / Divider numerator (32 bit)
.alias MATH_MULTINB $D774  ; Multiplier input B / Divider denominator (32 bit)
.alias GS_MATH_MULTINB $D775  ; Multiplier input B / Divider denominator (32 bit)
.alias GS_MATH_MULTINB_2 $D776  ; Multiplier input B / Divider denominator (32 bit)
.alias GS_MATH_MULTINB_3 $D777  ; Multiplier input B / Divider denominator (32 bit)
.alias MATH_MULTOUT $D778  ; 64-bit output of MULTINA $\times$ MULTINB
.alias GS_MATH_MULTOUT $D779  ; 64-bit output of MULTINA $\times$ MULTINB
.alias GS_MATH_MULTOUT_2 $D77A  ; 64-bit output of MULTINA $\times$ MULTINB
.alias GS_MATH_MULTOUT_3 $D77B  ; 64-bit output of MULTINA $\times$ MULTINB
.alias GS_MATH_MULTOUT_4 $D77C  ; 64-bit output of MULTINA $\times$ MULTINB
.alias GS_MATH_MULTOUT_5 $D77D  ; 64-bit output of MULTINA $\times$ MULTINB
.alias GS_MATH_MULTOUT_6 $D77E  ; 64-bit output of MULTINA $\times$ MULTINB
.alias GS_MATH_MULTOUT_7 $D77F  ; 64-bit output of MULTINA $\times$ MULTINB
.alias MATH_MATHIN0 $D780  ; Math unit 32-bit input X
.alias GS_MATH_MATHIN0 $D781  ; @MATHINX
.alias GS_MATH_MATHIN0_2 $D782  ; @MATHINX
.alias GS_MATH_MATHIN0_3 $D783  ; @MATHINX
.alias MATH_MATHIN1 $D784  ; @MATHINX
.alias GS_MATH_MATHIN1 $D785  ; @MATHINX
.alias GS_MATH_MATHIN1_2 $D786  ; @MATHINX
.alias GS_MATH_MATHIN1_3 $D787  ; @MATHINX
.alias MATH_MATHIN2 $D788  ; @MATHINX
.alias GS_MATH_MATHIN2 $D789  ; @MATHINX
.alias GS_MATH_MATHIN2_2 $D78A  ; @MATHINX
.alias GS_MATH_MATHIN2_3 $D78B  ; @MATHINX
.alias MATH_MATHIN3 $D78C  ; @MATHINX
.alias GS_MATH_MATHIN3 $D78D  ; @MATHINX
.alias GS_MATH_MATHIN3_2 $D78E  ; @MATHINX
.alias GS_MATH_MATHIN3_3 $D78F  ; @MATHINX
.alias MATH_MATHIN4 $D790  ; @MATHINX
.alias GS_MATH_MATHIN4 $D791  ; @MATHINX
.alias GS_MATH_MATHIN4_2 $D792  ; @MATHINX
.alias GS_MATH_MATHIN4_3 $D793  ; @MATHINX
.alias MATH_MATHIN5 $D794  ; @MATHINX
.alias GS_MATH_MATHIN5 $D795  ; @MATHINX
.alias GS_MATH_MATHIN5_2 $D796  ; @MATHINX
.alias GS_MATH_MATHIN5_3 $D797  ; @MATHINX
.alias MATH_MATHIN6 $D798  ; @MATHINX
.alias GS_MATH_MATHIN6 $D799  ; @MATHINX
.alias GS_MATH_MATHIN6_2 $D79A  ; @MATHINX
.alias GS_MATH_MATHIN6_3 $D79B  ; @MATHINX
.alias MATH_MATHIN7 $D79C  ; @MATHINX
.alias GS_MATH_MATHIN7 $D79D  ; @MATHINX
.alias GS_MATH_MATHIN7_2 $D79E  ; @MATHINX
.alias GS_MATH_MATHIN7_3 $D79F  ; @MATHINX
.alias MATH_MATHIN8 $D7A0  ; @MATHINX
.alias GS_MATH_MATHIN8 $D7A1  ; @MATHINX
.alias GS_MATH_MATHIN8_2 $D7A2  ; @MATHINX
.alias GS_MATH_MATHIN8_3 $D7A3  ; @MATHINX
.alias MATH_MATHIN9 $D7A4  ; @MATHINX
.alias GS_MATH_MATHIN9 $D7A5  ; @MATHINX
.alias GS_MATH_MATHIN9_2 $D7A6  ; @MATHINX
.alias GS_MATH_MATHIN9_3 $D7A7  ; @MATHINX
.alias MATH_MATHINA $D7A8  ; @MATHINX
.alias GS_MATH_MATHINA $D7A9  ; @MATHINX
.alias GS_MATH_MATHINA_2 $D7AA  ; @MATHINX
.alias GS_MATH_MATHINA_3 $D7AB  ; @MATHINX
.alias MATH_MATHINB $D7AC  ; @MATHINX
.alias GS_MATH_MATHINB $D7AD  ; @MATHINX
.alias GS_MATH_MATHINB_2 $D7AE  ; @MATHINX
.alias GS_MATH_MATHINB_3 $D7AF  ; @MATHINX
.alias MATH_MATHINC $D7B0  ; @MATHINX
.alias GS_MATH_MATHINC $D7B1  ; @MATHINX
.alias GS_MATH_MATHINC_2 $D7B2  ; @MATHINX
.alias GS_MATH_MATHINC_3 $D7B3  ; @MATHINX
.alias MATH_MATHIND $D7B4  ; @MATHINX
.alias GS_MATH_MATHIND $D7B5  ; @MATHINX
.alias GS_MATH_MATHIND_2 $D7B6  ; @MATHINX
.alias GS_MATH_MATHIND_3 $D7B7  ; @MATHINX
.alias MATH_MATHINE $D7B8  ; @MATHINX
.alias GS_MATH_MATHINE $D7B9  ; @MATHINX
.alias GS_MATH_MATHINE_2 $D7BA  ; @MATHINX
.alias GS_MATH_MATHINE_3 $D7BB  ; @MATHINX
.alias MATH_MATHINF $D7BC  ; @MATHINX
.alias GS_MATH_MATHINF $D7BD  ; @MATHINX
.alias GS_MATH_MATHINF_2 $D7BE  ; @MATHINX
.alias GS_MATH_MATHINF_3 $D7BF  ; @MATHINX
.alias MATH_UNIT0INA_ADDR $D7C0  ; Select which of the 16 32-bit math registers is input A for Math Function Unit X. (address)
.alias UNIT0INA_ADDR $D7C0  ; Select which of the 16 32-bit math registers is input A for Math Function Unit X. (address)
.alias MATH_UNIT0INA_MASK 15  ; Select which of the 16 32-bit math registers is input A for Math Function Unit X. (bit mask)
.alias UNIT0INA_MASK 15  ; Select which of the 16 32-bit math registers is input A for Math Function Unit X. (bit mask)
.alias MATH_UNIT0INB_ADDR $D7C0  ; Select which of the 16 32-bit math registers is input B for Math Function Unit X. (address)
.alias UNIT0INB_ADDR $D7C0  ; Select which of the 16 32-bit math registers is input B for Math Function Unit X. (address)
.alias MATH_UNIT0INB_MASK 240  ; Select which of the 16 32-bit math registers is input B for Math Function Unit X. (bit mask)
.alias UNIT0INB_MASK 240  ; Select which of the 16 32-bit math registers is input B for Math Function Unit X. (bit mask)
.alias MATH_UNIT1INA_ADDR $D7C1  ; @UNITXINA (address)
.alias UNIT1INA_ADDR $D7C1  ; @UNITXINA (address)
.alias MATH_UNIT1INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT1INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT1INB_ADDR $D7C1  ; @UNITXINB (address)
.alias UNIT1INB_ADDR $D7C1  ; @UNITXINB (address)
.alias MATH_UNIT1INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT1INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT2INA_ADDR $D7C2  ; @UNITXINA (address)
.alias UNIT2INA_ADDR $D7C2  ; @UNITXINA (address)
.alias MATH_UNIT2INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT2INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT2INB_ADDR $D7C2  ; @UNITXINB (address)
.alias UNIT2INB_ADDR $D7C2  ; @UNITXINB (address)
.alias MATH_UNIT2INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT2INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT3INA_ADDR $D7C3  ; @UNITXINA (address)
.alias UNIT3INA_ADDR $D7C3  ; @UNITXINA (address)
.alias MATH_UNIT3INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT3INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT3INB_ADDR $D7C3  ; @UNITXINB (address)
.alias UNIT3INB_ADDR $D7C3  ; @UNITXINB (address)
.alias MATH_UNIT3INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT3INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT4INA_ADDR $D7C4  ; @UNITXINA (address)
.alias UNIT4INA_ADDR $D7C4  ; @UNITXINA (address)
.alias MATH_UNIT4INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT4INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT4INB_ADDR $D7C4  ; @UNITXINB (address)
.alias UNIT4INB_ADDR $D7C4  ; @UNITXINB (address)
.alias MATH_UNIT4INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT4INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT5INA_ADDR $D7C5  ; @UNITXINA (address)
.alias UNIT5INA_ADDR $D7C5  ; @UNITXINA (address)
.alias MATH_UNIT5INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT5INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT5INB_ADDR $D7C5  ; @UNITXINB (address)
.alias UNIT5INB_ADDR $D7C5  ; @UNITXINB (address)
.alias MATH_UNIT5INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT5INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT6INA_ADDR $D7C6  ; @UNITXINA (address)
.alias UNIT6INA_ADDR $D7C6  ; @UNITXINA (address)
.alias MATH_UNIT6INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT6INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT6INB_ADDR $D7C6  ; @UNITXINB (address)
.alias UNIT6INB_ADDR $D7C6  ; @UNITXINB (address)
.alias MATH_UNIT6INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT6INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT7INA_ADDR $D7C7  ; @UNITXINA (address)
.alias UNIT7INA_ADDR $D7C7  ; @UNITXINA (address)
.alias MATH_UNIT7INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT7INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT7INB_ADDR $D7C7  ; @UNITXINB (address)
.alias UNIT7INB_ADDR $D7C7  ; @UNITXINB (address)
.alias MATH_UNIT7INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT7INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT8INA_ADDR $D7C8  ; @UNITXINA (address)
.alias UNIT8INA_ADDR $D7C8  ; @UNITXINA (address)
.alias MATH_UNIT8INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT8INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT8INB_ADDR $D7C8  ; @UNITXINB (address)
.alias UNIT8INB_ADDR $D7C8  ; @UNITXINB (address)
.alias MATH_UNIT8INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT8INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT9INA_ADDR $D7C9  ; @UNITXINA (address)
.alias UNIT9INA_ADDR $D7C9  ; @UNITXINA (address)
.alias MATH_UNIT9INA_MASK 15  ; @UNITXINA (bit mask)
.alias UNIT9INA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNIT9INB_ADDR $D7C9  ; @UNITXINB (address)
.alias UNIT9INB_ADDR $D7C9  ; @UNITXINB (address)
.alias MATH_UNIT9INB_MASK 240  ; @UNITXINB (bit mask)
.alias UNIT9INB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNITAINA_ADDR $D7CA  ; @UNITXINA (address)
.alias UNITAINA_ADDR $D7CA  ; @UNITXINA (address)
.alias MATH_UNITAINA_MASK 15  ; @UNITXINA (bit mask)
.alias UNITAINA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNITAINB_ADDR $D7CA  ; @UNITXINB (address)
.alias UNITAINB_ADDR $D7CA  ; @UNITXINB (address)
.alias MATH_UNITAINB_MASK 240  ; @UNITXINB (bit mask)
.alias UNITAINB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNITBINA_ADDR $D7CB  ; @UNITXINA (address)
.alias UNITBINA_ADDR $D7CB  ; @UNITXINA (address)
.alias MATH_UNITBINA_MASK 15  ; @UNITXINA (bit mask)
.alias UNITBINA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNITBINB_ADDR $D7CB  ; @UNITXINB (address)
.alias UNITBINB_ADDR $D7CB  ; @UNITXINB (address)
.alias MATH_UNITBINB_MASK 240  ; @UNITXINB (bit mask)
.alias UNITBINB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNITCINA_ADDR $D7CC  ; @UNITXINA (address)
.alias UNITCINA_ADDR $D7CC  ; @UNITXINA (address)
.alias MATH_UNITCINA_MASK 15  ; @UNITXINA (bit mask)
.alias UNITCINA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNITCINB_ADDR $D7CC  ; @UNITXINB (address)
.alias UNITCINB_ADDR $D7CC  ; @UNITXINB (address)
.alias MATH_UNITCINB_MASK 240  ; @UNITXINB (bit mask)
.alias UNITCINB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNITDINA_ADDR $D7CD  ; @UNITXINA (address)
.alias UNITDINA_ADDR $D7CD  ; @UNITXINA (address)
.alias MATH_UNITDINA_MASK 15  ; @UNITXINA (bit mask)
.alias UNITDINA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNITDINB_ADDR $D7CD  ; @UNITXINB (address)
.alias UNITDINB_ADDR $D7CD  ; @UNITXINB (address)
.alias MATH_UNITDINB_MASK 240  ; @UNITXINB (bit mask)
.alias UNITDINB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNITEINA_ADDR $D7CE  ; @UNITXINA (address)
.alias UNITEINA_ADDR $D7CE  ; @UNITXINA (address)
.alias MATH_UNITEINA_MASK 15  ; @UNITXINA (bit mask)
.alias UNITEINA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNITEINB_ADDR $D7CE  ; @UNITXINB (address)
.alias UNITEINB_ADDR $D7CE  ; @UNITXINB (address)
.alias MATH_UNITEINB_MASK 240  ; @UNITXINB (bit mask)
.alias UNITEINB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNITFINA_ADDR $D7CF  ; @UNITXINA (address)
.alias UNITFINA_ADDR $D7CF  ; @UNITXINA (address)
.alias MATH_UNITFINA_MASK 15  ; @UNITXINA (bit mask)
.alias UNITFINA_MASK 15  ; @UNITXINA (bit mask)
.alias MATH_UNITFINB_ADDR $D7CF  ; @UNITXINB (address)
.alias UNITFINB_ADDR $D7CF  ; @UNITXINB (address)
.alias MATH_UNITFINB_MASK 240  ; @UNITXINB (bit mask)
.alias UNITFINB_MASK 240  ; @UNITXINB (bit mask)
.alias MATH_UNIT0OUT_ADDR $D7D0  ; Select which of the 16 32-bit math registers receives the output of Math Function Unit X (address)
.alias UNIT0OUT_ADDR $D7D0  ; Select which of the 16 32-bit math registers receives the output of Math Function Unit X (address)
.alias MATH_UNIT0OUT_MASK 15  ; Select which of the 16 32-bit math registers receives the output of Math Function Unit X (bit mask)
.alias UNIT0OUT_MASK 15  ; Select which of the 16 32-bit math registers receives the output of Math Function Unit X (bit mask)
.alias MATH_U0_LOWOUT_ADDR $D7D0  ; If set, the low-half of the output of Math Function Unit X is written to math register UNITXOUT. (address)
.alias U0_LOWOUT_ADDR $D7D0  ; If set, the low-half of the output of Math Function Unit X is written to math register UNITXOUT. (address)
.alias MATH_U0_LOWOUT_MASK 16  ; If set, the low-half of the output of Math Function Unit X is written to math register UNITXOUT. (bit mask)
.alias U0_LOWOUT_MASK 16  ; If set, the low-half of the output of Math Function Unit X is written to math register UNITXOUT. (bit mask)
.alias MATH_U0_HIOUT_ADDR $D7D0  ; If set, the high-half of the output of Math Function Unit X is written to math register UNITXOUT. (address)
.alias U0_HIOUT_ADDR $D7D0  ; If set, the high-half of the output of Math Function Unit X is written to math register UNITXOUT. (address)
.alias MATH_U0_HIOUT_MASK 32  ; If set, the high-half of the output of Math Function Unit X is written to math register UNITXOUT. (bit mask)
.alias U0_HIOUT_MASK 32  ; If set, the high-half of the output of Math Function Unit X is written to math register UNITXOUT. (bit mask)
.alias MATH_U0_MLADD_ADDR $D7D0  ; If set, Math Function Unit X acts as a 32-bit adder instead of 32-bit multiplier. (address)
.alias U0_MLADD_ADDR $D7D0  ; If set, Math Function Unit X acts as a 32-bit adder instead of 32-bit multiplier. (address)
.alias MATH_U0_MLADD_MASK 64  ; If set, Math Function Unit X acts as a 32-bit adder instead of 32-bit multiplier. (bit mask)
.alias U0_MLADD_MASK 64  ; If set, Math Function Unit X acts as a 32-bit adder instead of 32-bit multiplier. (bit mask)
.alias MATH_U0_LATCH_ADDR $D7D0  ; If set, Math Function Unit X's output is latched. (address)
.alias U0_LATCH_ADDR $D7D0  ; If set, Math Function Unit X's output is latched. (address)
.alias MATH_U0_LATCH_MASK 128  ; If set, Math Function Unit X's output is latched. (bit mask)
.alias U0_LATCH_MASK 128  ; If set, Math Function Unit X's output is latched. (bit mask)
.alias MATH_UNIT1OUT_ADDR $D7D1  ; @UNITXOUT (address)
.alias UNIT1OUT_ADDR $D7D1  ; @UNITXOUT (address)
.alias MATH_UNIT1OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT1OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U1_LOWOUT_ADDR $D7D1  ; @UXLOWOUT (address)
.alias U1_LOWOUT_ADDR $D7D1  ; @UXLOWOUT (address)
.alias MATH_U1_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U1_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U1_HIOUT_ADDR $D7D1  ; @UXHIOUT (address)
.alias U1_HIOUT_ADDR $D7D1  ; @UXHIOUT (address)
.alias MATH_U1_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U1_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U1_MLADD_ADDR $D7D1  ; @UXMLADD (address)
.alias U1_MLADD_ADDR $D7D1  ; @UXMLADD (address)
.alias MATH_U1_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias U1_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias MATH_U1_LATCH_ADDR $D7D1  ; @UXLATCH (address)
.alias U1_LATCH_ADDR $D7D1  ; @UXLATCH (address)
.alias MATH_U1_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U1_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNIT2OUT_ADDR $D7D2  ; @UNITXOUT (address)
.alias UNIT2OUT_ADDR $D7D2  ; @UNITXOUT (address)
.alias MATH_UNIT2OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT2OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U2_LOWOUT_ADDR $D7D2  ; @UXLOWOUT (address)
.alias U2_LOWOUT_ADDR $D7D2  ; @UXLOWOUT (address)
.alias MATH_U2_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U2_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U2_HIOUT_ADDR $D7D2  ; @UXHIOUT (address)
.alias U2_HIOUT_ADDR $D7D2  ; @UXHIOUT (address)
.alias MATH_U2_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U2_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U2_MLADD_ADDR $D7D2  ; @UXMLADD (address)
.alias U2_MLADD_ADDR $D7D2  ; @UXMLADD (address)
.alias MATH_U2_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias U2_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias MATH_U2_LATCH_ADDR $D7D2  ; @UXLATCH (address)
.alias U2_LATCH_ADDR $D7D2  ; @UXLATCH (address)
.alias MATH_U2_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U2_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNIT3OUT_ADDR $D7D3  ; @UNITXOUT (address)
.alias UNIT3OUT_ADDR $D7D3  ; @UNITXOUT (address)
.alias MATH_UNIT3OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT3OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U3_LOWOUT_ADDR $D7D3  ; @UXLOWOUT (address)
.alias U3_LOWOUT_ADDR $D7D3  ; @UXLOWOUT (address)
.alias MATH_U3_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U3_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U3_HIOUT_ADDR $D7D3  ; @UXHIOUT (address)
.alias U3_HIOUT_ADDR $D7D3  ; @UXHIOUT (address)
.alias MATH_U3_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U3_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U3_MLADD_ADDR $D7D3  ; @UXMLADD (address)
.alias U3_MLADD_ADDR $D7D3  ; @UXMLADD (address)
.alias MATH_U3_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias U3_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias MATH_U3_LATCH_ADDR $D7D3  ; @UXLATCH (address)
.alias U3_LATCH_ADDR $D7D3  ; @UXLATCH (address)
.alias MATH_U3_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U3_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNIT4OUT_ADDR $D7D4  ; @UNITXOUT (address)
.alias UNIT4OUT_ADDR $D7D4  ; @UNITXOUT (address)
.alias MATH_UNIT4OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT4OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U4_LOWOUT_ADDR $D7D4  ; @UXLOWOUT (address)
.alias U4_LOWOUT_ADDR $D7D4  ; @UXLOWOUT (address)
.alias MATH_U4_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U4_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U4_HIOUT_ADDR $D7D4  ; @UXHIOUT (address)
.alias U4_HIOUT_ADDR $D7D4  ; @UXHIOUT (address)
.alias MATH_U4_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U4_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U4_MLADD_ADDR $D7D4  ; @UXMLADD (address)
.alias U4_MLADD_ADDR $D7D4  ; @UXMLADD (address)
.alias MATH_U4_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias U4_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias MATH_U4_LATCH_ADDR $D7D4  ; @UXLATCH (address)
.alias U4_LATCH_ADDR $D7D4  ; @UXLATCH (address)
.alias MATH_U4_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U4_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNIT5OUT_ADDR $D7D5  ; @UNITXOUT (address)
.alias UNIT5OUT_ADDR $D7D5  ; @UNITXOUT (address)
.alias MATH_UNIT5OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT5OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U5_LOWOUT_ADDR $D7D5  ; @UXLOWOUT (address)
.alias U5_LOWOUT_ADDR $D7D5  ; @UXLOWOUT (address)
.alias MATH_U5_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U5_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U5_HIOUT_ADDR $D7D5  ; @UXHIOUT (address)
.alias U5_HIOUT_ADDR $D7D5  ; @UXHIOUT (address)
.alias MATH_U5_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U5_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U5_MLADD_ADDR $D7D5  ; @UXMLADD (address)
.alias U5_MLADD_ADDR $D7D5  ; @UXMLADD (address)
.alias MATH_U5_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias U5_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias MATH_U5_LATCH_ADDR $D7D5  ; @UXLATCH (address)
.alias U5_LATCH_ADDR $D7D5  ; @UXLATCH (address)
.alias MATH_U5_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U5_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNIT6OUT_ADDR $D7D6  ; @UNITXOUT (address)
.alias UNIT6OUT_ADDR $D7D6  ; @UNITXOUT (address)
.alias MATH_UNIT6OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT6OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U6_LOWOUT_ADDR $D7D6  ; @UXLOWOUT (address)
.alias U6_LOWOUT_ADDR $D7D6  ; @UXLOWOUT (address)
.alias MATH_U6_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U6_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U6_HIOUT_ADDR $D7D6  ; @UXHIOUT (address)
.alias U6_HIOUT_ADDR $D7D6  ; @UXHIOUT (address)
.alias MATH_U6_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U6_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U6_MLADD_ADDR $D7D6  ; @UXMLADD (address)
.alias U6_MLADD_ADDR $D7D6  ; @UXMLADD (address)
.alias MATH_U6_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias U6_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias MATH_U6_LATCH_ADDR $D7D6  ; @UXLATCH (address)
.alias U6_LATCH_ADDR $D7D6  ; @UXLATCH (address)
.alias MATH_U6_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U6_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNIT7OUT_ADDR $D7D7  ; @UNITXOUT (address)
.alias UNIT7OUT_ADDR $D7D7  ; @UNITXOUT (address)
.alias MATH_UNIT7OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT7OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U7_LOWOUT_ADDR $D7D7  ; @UXLOWOUT (address)
.alias U7_LOWOUT_ADDR $D7D7  ; @UXLOWOUT (address)
.alias MATH_U7_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U7_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U7_HIOUT_ADDR $D7D7  ; @UXHIOUT (address)
.alias U7_HIOUT_ADDR $D7D7  ; @UXHIOUT (address)
.alias MATH_U7_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U7_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U7_MLADD_ADDR $D7D7  ; @UXMLADD (address)
.alias U7_MLADD_ADDR $D7D7  ; @UXMLADD (address)
.alias MATH_U7_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias U7_MLADD_MASK 64  ; @UXMLADD (bit mask)
.alias MATH_U7_LATCH_ADDR $D7D7  ; @UXLATCH (address)
.alias U7_LATCH_ADDR $D7D7  ; @UXLATCH (address)
.alias MATH_U7_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U7_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNIT8OUT_ADDR $D7D8  ; @UNITXOUT (address)
.alias UNIT8OUT_ADDR $D7D8  ; @UNITXOUT (address)
.alias MATH_UNIT8OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT8OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U8_LOWOUT_ADDR $D7D8  ; @UXLOWOUT (address)
.alias U8_LOWOUT_ADDR $D7D8  ; @UXLOWOUT (address)
.alias MATH_U8_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U8_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U8_HIOUT_ADDR $D7D8  ; @UXHIOUT (address)
.alias U8_HIOUT_ADDR $D7D8  ; @UXHIOUT (address)
.alias MATH_U8_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U8_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U8_BSADD_ADDR $D7D8  ; If set, Math Function Unit Y acts as a 32-bit adder instead of 32-bit barrel-shifter. (address)
.alias U8_BSADD_ADDR $D7D8  ; If set, Math Function Unit Y acts as a 32-bit adder instead of 32-bit barrel-shifter. (address)
.alias MATH_U8_BSADD_MASK 64  ; If set, Math Function Unit Y acts as a 32-bit adder instead of 32-bit barrel-shifter. (bit mask)
.alias U8_BSADD_MASK 64  ; If set, Math Function Unit Y acts as a 32-bit adder instead of 32-bit barrel-shifter. (bit mask)
.alias MATH_U8_LATCH_ADDR $D7D8  ; @UXLATCH (address)
.alias U8_LATCH_ADDR $D7D8  ; @UXLATCH (address)
.alias MATH_U8_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U8_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNIT9OUT_ADDR $D7D9  ; @UNITXOUT (address)
.alias UNIT9OUT_ADDR $D7D9  ; @UNITXOUT (address)
.alias MATH_UNIT9OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNIT9OUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_U9_LOWOUT_ADDR $D7D9  ; @UXLOWOUT (address)
.alias U9_LOWOUT_ADDR $D7D9  ; @UXLOWOUT (address)
.alias MATH_U9_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias U9_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_U9_HIOUT_ADDR $D7D9  ; @UXHIOUT (address)
.alias U9_HIOUT_ADDR $D7D9  ; @UXHIOUT (address)
.alias MATH_U9_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias U9_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_U9_BSADD_ADDR $D7D9  ; @UXBSADD (address)
.alias U9_BSADD_ADDR $D7D9  ; @UXBSADD (address)
.alias MATH_U9_BSADD_MASK 64  ; @UXBSADD (bit mask)
.alias U9_BSADD_MASK 64  ; @UXBSADD (bit mask)
.alias MATH_U9_LATCH_ADDR $D7D9  ; @UXLATCH (address)
.alias U9_LATCH_ADDR $D7D9  ; @UXLATCH (address)
.alias MATH_U9_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias U9_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNITAOUT_ADDR $D7DA  ; @UNITXOUT (address)
.alias UNITAOUT_ADDR $D7DA  ; @UNITXOUT (address)
.alias MATH_UNITAOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNITAOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_UA_LOWOUT_ADDR $D7DA  ; @UXLOWOUT (address)
.alias UA_LOWOUT_ADDR $D7DA  ; @UXLOWOUT (address)
.alias MATH_UA_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias UA_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_UA_HIOUT_ADDR $D7DA  ; @UXHIOUT (address)
.alias UA_HIOUT_ADDR $D7DA  ; @UXHIOUT (address)
.alias MATH_UA_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias UA_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_UA_BSADD_ADDR $D7DA  ; @UXBSADD (address)
.alias UA_BSADD_ADDR $D7DA  ; @UXBSADD (address)
.alias MATH_UA_BSADD_MASK 64  ; @UXBSADD (bit mask)
.alias UA_BSADD_MASK 64  ; @UXBSADD (bit mask)
.alias MATH_UA_LATCH_ADDR $D7DA  ; @UXLATCH (address)
.alias UA_LATCH_ADDR $D7DA  ; @UXLATCH (address)
.alias MATH_UA_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias UA_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNITBOUT_ADDR $D7DB  ; @UNITXOUT (address)
.alias UNITBOUT_ADDR $D7DB  ; @UNITXOUT (address)
.alias MATH_UNITBOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNITBOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_UB_LOWOUT_ADDR $D7DB  ; @UXLOWOUT (address)
.alias UB_LOWOUT_ADDR $D7DB  ; @UXLOWOUT (address)
.alias MATH_UB_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias UB_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_UB_HIOUT_ADDR $D7DB  ; @UXHIOUT (address)
.alias UB_HIOUT_ADDR $D7DB  ; @UXHIOUT (address)
.alias MATH_UB_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias UB_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_UB_BSADD_ADDR $D7DB  ; @UXBSADD (address)
.alias UB_BSADD_ADDR $D7DB  ; @UXBSADD (address)
.alias MATH_UB_BSADD_MASK 64  ; @UXBSADD (bit mask)
.alias UB_BSADD_MASK 64  ; @UXBSADD (bit mask)
.alias MATH_UB_LATCH_ADDR $D7DB  ; @UXLATCH (address)
.alias UB_LATCH_ADDR $D7DB  ; @UXLATCH (address)
.alias MATH_UB_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias UB_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNITCOUT_ADDR $D7DC  ; @UNITXOUT (address)
.alias UNITCOUT_ADDR $D7DC  ; @UNITXOUT (address)
.alias MATH_UNITCOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNITCOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_UC_LOWOUT_ADDR $D7DC  ; @UXLOWOUT (address)
.alias UC_LOWOUT_ADDR $D7DC  ; @UXLOWOUT (address)
.alias MATH_UC_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias UC_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_UC_HIOUT_ADDR $D7DC  ; @UXHIOUT (address)
.alias UC_HIOUT_ADDR $D7DC  ; @UXHIOUT (address)
.alias MATH_UC_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias UC_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_UC_DVADD_ADDR $D7DC  ; If set, Math Function Unit X acts as a 32-bit adder instead of 32-bit divider. (address)
.alias UC_DVADD_ADDR $D7DC  ; If set, Math Function Unit X acts as a 32-bit adder instead of 32-bit divider. (address)
.alias MATH_UC_DVADD_MASK 64  ; If set, Math Function Unit X acts as a 32-bit adder instead of 32-bit divider. (bit mask)
.alias UC_DVADD_MASK 64  ; If set, Math Function Unit X acts as a 32-bit adder instead of 32-bit divider. (bit mask)
.alias MATH_UC_LATCH_ADDR $D7DC  ; @UXLATCH (address)
.alias UC_LATCH_ADDR $D7DC  ; @UXLATCH (address)
.alias MATH_UC_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias UC_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNITDOUT_ADDR $D7DD  ; @UNITXOUT (address)
.alias UNITDOUT_ADDR $D7DD  ; @UNITXOUT (address)
.alias MATH_UNITDOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNITDOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_UD_LOWOUT_ADDR $D7DD  ; @UXLOWOUT (address)
.alias UD_LOWOUT_ADDR $D7DD  ; @UXLOWOUT (address)
.alias MATH_UD_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias UD_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_UD_HIOUT_ADDR $D7DD  ; @UXHIOUT (address)
.alias UD_HIOUT_ADDR $D7DD  ; @UXHIOUT (address)
.alias MATH_UD_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias UD_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_UD_DVADD_ADDR $D7DD  ;  (address)
.alias UD_DVADD_ADDR $D7DD  ;  (address)
.alias MATH_UD_DVADD_MASK 64  ;  (bit mask)
.alias UD_DVADD_MASK 64  ;  (bit mask)
.alias MATH_UD_LATCH_ADDR $D7DD  ; @UXLATCH (address)
.alias UD_LATCH_ADDR $D7DD  ; @UXLATCH (address)
.alias MATH_UD_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias UD_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNITEOUT_ADDR $D7DE  ; @UNITXOUT (address)
.alias UNITEOUT_ADDR $D7DE  ; @UNITXOUT (address)
.alias MATH_UNITEOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNITEOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_UE_LOWOUT_ADDR $D7DE  ; @UXLOWOUT (address)
.alias UE_LOWOUT_ADDR $D7DE  ; @UXLOWOUT (address)
.alias MATH_UE_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias UE_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_UE_HIOUT_ADDR $D7DE  ; @UXHIOUT (address)
.alias UE_HIOUT_ADDR $D7DE  ; @UXHIOUT (address)
.alias MATH_UE_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias UE_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_UE_DVADD_ADDR $D7DE  ;  (address)
.alias UE_DVADD_ADDR $D7DE  ;  (address)
.alias MATH_UE_DVADD_MASK 64  ;  (bit mask)
.alias UE_DVADD_MASK 64  ;  (bit mask)
.alias MATH_UE_LATCH_ADDR $D7DE  ; @UXLATCH (address)
.alias UE_LATCH_ADDR $D7DE  ; @UXLATCH (address)
.alias MATH_UE_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias UE_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_UNITFOUT_ADDR $D7DF  ; @UNITXOUT (address)
.alias UNITFOUT_ADDR $D7DF  ; @UNITXOUT (address)
.alias MATH_UNITFOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias UNITFOUT_MASK 15  ; @UNITXOUT (bit mask)
.alias MATH_UF_LOWOUT_ADDR $D7DF  ; @UXLOWOUT (address)
.alias UF_LOWOUT_ADDR $D7DF  ; @UXLOWOUT (address)
.alias MATH_UF_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias UF_LOWOUT_MASK 16  ; @UXLOWOUT (bit mask)
.alias MATH_UF_HIOUT_ADDR $D7DF  ; @UXHIOUT (address)
.alias UF_HIOUT_ADDR $D7DF  ; @UXHIOUT (address)
.alias MATH_UF_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias UF_HIOUT_MASK 32  ; @UXHIOUT (bit mask)
.alias MATH_UF_DVADD_ADDR $D7DF  ;  (address)
.alias UF_DVADD_ADDR $D7DF  ;  (address)
.alias MATH_UF_DVADD_MASK 64  ;  (bit mask)
.alias UF_DVADD_MASK 64  ;  (bit mask)
.alias MATH_UF_LATCH_ADDR $D7DF  ; @UXLATCH (address)
.alias UF_LATCH_ADDR $D7DF  ; @UXLATCH (address)
.alias MATH_UF_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias UF_LATCH_MASK 128  ; @UXLATCH (bit mask)
.alias MATH_LATCHINT $D7E0  ; Latch interval for latched outputs (in CPU cycles)
.alias LATCHINT $D7E0  ; Latch interval for latched outputs (in CPU cycles)
.alias MATH_WREN_ADDR $D7E1  ; Enable setting of math registers (must normally be set) (address)
.alias WREN_ADDR $D7E1  ; Enable setting of math registers (must normally be set) (address)
.alias MATH_WREN_MASK 1  ; Enable setting of math registers (must normally be set) (bit mask)
.alias WREN_MASK 1  ; Enable setting of math registers (must normally be set) (bit mask)
.alias MATH_CALCEN_ADDR $D7E1  ; Enable committing of output values from math units back to math registers (clearing effectively pauses iterative formulae) (address)
.alias CALCEN_ADDR $D7E1  ; Enable committing of output values from math units back to math registers (clearing effectively pauses iterative formulae) (address)
.alias MATH_CALCEN_MASK 2  ; Enable committing of output values from math units back to math registers (clearing effectively pauses iterative formulae) (bit mask)
.alias CALCEN_MASK 2  ; Enable committing of output values from math units back to math registers (clearing effectively pauses iterative formulae) (bit mask)
.alias MATH_RESERVED $D7E2  ; Reserved
.alias GS_MATH_RESERVED $D7E3  ; Reserved
.alias MATH_ITERCNT $D7E4  ; Iteration Counter (32 bit)
.alias GS_MATH_ITERCNT $D7E5  ; Iteration Counter (32 bit)
.alias GS_MATH_ITERCNT_2 $D7E6  ; Iteration Counter (32 bit)
.alias GS_MATH_ITERCNT_3 $D7E7  ; Iteration Counter (32 bit)
.alias MATH_ITERCMP $D7E8  ; Math iteration counter comparator (32 bit)
.alias GS_MATH_ITERCMP $D7E9  ; Math iteration counter comparator (32 bit)
.alias GS_MATH_ITERCMP_2 $D7EA  ; Math iteration counter comparator (32 bit)
.alias GS_MATH_ITERCMP_3 $D7EB  ; Math iteration counter comparator (32 bit)
.alias CPU_IECBUSACT_ADDR $D7F1  ; IEC bus is active (address)
.alias IECBUSACT_ADDR $D7F1  ; IEC bus is active (address)
.alias CPU_IECBUSACT_MASK 1  ; IEC bus is active (bit mask)
.alias IECBUSACT_MASK 1  ; IEC bus is active (bit mask)
.alias CPU_PHIPERFRAME $D7F2  ; Count the number of PHI cycles per video frame (LSB)
.alias GS_CPU_PHIPERFRAME $D7F5  ; Count the number of PHI cycles per video frame (MSB)
.alias CPU_CYCPERFRAME $D7F6  ; Count the number of usable (proceed=1) CPU cycles per video frame (LSB)
.alias GS_CPU_CYCPERFRAME $D7F9  ; Count the number of usable (proceed=1) CPU cycles per video frame (MSB)
.alias CPU_FRAMECOUNT $D7FA  ; Count number of elapsed video frames
.alias FRAMECOUNT $D7FA  ; Count number of elapsed video frames
.alias CPU_CARTEN_ADDR $D7FB  ; 1= enable cartridges (address)
.alias CARTEN_ADDR $D7FB  ; 1= enable cartridges (address)
.alias CPU_CARTEN_MASK 2  ; 1= enable cartridges (bit mask)
.alias CARTEN_MASK 2  ; 1= enable cartridges (bit mask)
.alias CPU_POWEREN_ADDR $D7FD  ; Set to zero to power off computer on supported systems. WRITE ONLY. (address)
.alias POWEREN_ADDR $D7FD  ; Set to zero to power off computer on supported systems. WRITE ONLY. (address)
.alias CPU_POWEREN_MASK 1  ; Set to zero to power off computer on supported systems. WRITE ONLY. (bit mask)
.alias POWEREN_MASK 1  ; Set to zero to power off computer on supported systems. WRITE ONLY. (bit mask)
.alias CPU_NOGAME_ADDR $D7FD  ; Override for /GAME : Must be 0 to enable /GAME signal (address)
.alias NOGAME_ADDR $D7FD  ; Override for /GAME : Must be 0 to enable /GAME signal (address)
.alias CPU_NOGAME_MASK 64  ; Override for /GAME : Must be 0 to enable /GAME signal (bit mask)
.alias NOGAME_MASK 64  ; Override for /GAME : Must be 0 to enable /GAME signal (bit mask)
.alias CPU_NOEXROM_ADDR $D7FD  ; Override for /EXROM : Must be 0 to enable /EXROM signal (address)
.alias NOEXROM_ADDR $D7FD  ; Override for /EXROM : Must be 0 to enable /EXROM signal (address)
.alias CPU_NOEXROM_MASK 128  ; Override for /EXROM : Must be 0 to enable /EXROM signal (bit mask)
.alias NOEXROM_MASK 128  ; Override for /EXROM : Must be 0 to enable /EXROM signal (bit mask)
.alias CPU_PREFETCH_ADDR $D7FE  ; Enable expansion RAM pre-fetch logic (address)
.alias PREFETCH_ADDR $D7FE  ; Enable expansion RAM pre-fetch logic (address)
.alias CPU_PREFETCH_MASK 1  ; Enable expansion RAM pre-fetch logic (bit mask)
.alias PREFETCH_MASK 1  ; Enable expansion RAM pre-fetch logic (bit mask)
.alias CPU_OCEANA_ADDR $D7FE  ; Enable Ocean Type A cartridge emulation (address)
.alias OCEANA_ADDR $D7FE  ; Enable Ocean Type A cartridge emulation (address)
.alias CPU_OCEANA_MASK 2  ; Enable Ocean Type A cartridge emulation (bit mask)
.alias OCEANA_MASK 2  ; Enable Ocean Type A cartridge emulation (bit mask)
.alias ETHCOMMAND_DEBUGCPU $DC  ; Select CPU debug stream via ethernet when \$D6E1.3 is set
.alias DEBUGCPU $DC  ; Select CPU debug stream via ethernet when \$D6E1.3 is set
.alias CIA1_PORTA $DC00  ; Port A
.alias CIA1_PORTB $DC01  ; Port B
.alias CIA1_DDRA $DC02  ; Port A DDR
.alias CIA1_DDRB $DC03  ; Port B DDR
.alias CIA1_TIMERA $DC04  ; Timer A counter (16 bit)
.alias C64_CIA1_TIMERA $DC05  ; Timer A counter (16 bit)
.alias CIA1_TIMERB $DC06  ; Timer B counter (16 bit)
.alias C64_CIA1_TIMERB $DC07  ; Timer B counter (16 bit)
.alias CIA1_TODJIF_ADDR $DC08  ; TOD tenths of seconds (address)
.alias CIA1_TODJIF_MASK 15  ; TOD tenths of seconds (bit mask)
.alias CIA1_TODSEC_ADDR $DC09  ; TOD seconds (address)
.alias CIA1_TODSEC_MASK 63  ; TOD seconds (bit mask)
.alias CIA1_TODMIN_ADDR $DC0A  ; TOD minutes (address)
.alias TODMIN_ADDR $DC0A  ; TOD minutes (address)
.alias CIA1_TODMIN_MASK 63  ; TOD minutes (bit mask)
.alias TODMIN_MASK 63  ; TOD minutes (bit mask)
.alias CIA1_TODHOUR_ADDR $DC0B  ; TOD hours (address)
.alias CIA1_TODHOUR_MASK 31  ; TOD hours (bit mask)
.alias CIA1_TODAMPM_ADDR $DC0B  ; TOD PM flag (address)
.alias CIA1_TODAMPM_MASK 128  ; TOD PM flag (bit mask)
.alias CIA1_SDR $DC0C  ; shift register data register(writing starts sending)
.alias CIA1_TA_ADDR $DC0D  ; Timer A underflow (address)
.alias CIA1_TA_MASK 1  ; Timer A underflow (bit mask)
.alias CIA1_TB_ADDR $DC0D  ; Timer B underflow (address)
.alias CIA1_TB_MASK 2  ; Timer B underflow (bit mask)
.alias CIA1_ALRM_ADDR $DC0D  ; TOD alarm (address)
.alias CIA1_ALRM_MASK 4  ; TOD alarm (bit mask)
.alias CIA1_SP_ADDR $DC0D  ; shift register full/empty (address)
.alias CIA1_SP_MASK 8  ; shift register full/empty (bit mask)
.alias CIA1_FLG_ADDR $DC0D  ; FLAG edge detected (address)
.alias CIA1_FLG_MASK 16  ; FLAG edge detected (bit mask)
.alias CIA1_IR_ADDR $DC0D  ; Interrupt flag (address)
.alias IR_ADDR $DC0D  ; Interrupt flag (address)
.alias CIA1_IR_MASK 128  ; Interrupt flag (bit mask)
.alias IR_MASK 128  ; Interrupt flag (bit mask)
.alias CIA1_STRTA_ADDR $DC0E  ; Timer A start (address)
.alias CIA1_STRTA_MASK 1  ; Timer A start (bit mask)
.alias CIA1_PBONA_ADDR $DC0E  ; Timer A PB6 out (address)
.alias CIA1_PBONA_MASK 2  ; Timer A PB6 out (bit mask)
.alias CIA1_OMODA_ADDR $DC0E  ; Timer A toggle or pulse (address)
.alias CIA1_OMODA_MASK 4  ; Timer A toggle or pulse (bit mask)
.alias CIA1_RMODA_ADDR $DC0E  ; Timer A one-shot mode (address)
.alias CIA1_RMODA_MASK 8  ; Timer A one-shot mode (bit mask)
.alias CIA1_IMODA_ADDR $DC0E  ; Timer A Timer A tick source (address)
.alias CIA1_IMODA_MASK 32  ; Timer A Timer A tick source (bit mask)
.alias CIA1_SPMOD_ADDR $DC0E  ; Serial port direction (address)
.alias CIA1_SPMOD_MASK 64  ; Serial port direction (bit mask)
.alias CIA1_TOD50_ADDR $DC0E  ; 50/60Hz select for TOD clock (address)
.alias CIA1_TOD50_MASK 128  ; 50/60Hz select for TOD clock (bit mask)
.alias CIA1_STRTB_ADDR $DC0F  ; Timer B start (address)
.alias CIA1_STRTB_MASK 1  ; Timer B start (bit mask)
.alias CIA1_PBONB_ADDR $DC0F  ; Timer B PB7 out (address)
.alias CIA1_PBONB_MASK 2  ; Timer B PB7 out (bit mask)
.alias CIA1_OMODB_ADDR $DC0F  ; Timer B toggle or pulse (address)
.alias CIA1_OMODB_MASK 4  ; Timer B toggle or pulse (bit mask)
.alias CIA1_RMODB_ADDR $DC0F  ; Timer B one-shot mode (address)
.alias CIA1_RMODB_MASK 8  ; Timer B one-shot mode (bit mask)
.alias CIA1_LOAD_ADDR $DC0F  ; Strobe input to force-load timers (address)
.alias CIA1_LOAD_MASK 16  ; Strobe input to force-load timers (bit mask)
.alias CIA1_IMODB_ADDR $DC0F  ; Timer B Timer A tick source (address)
.alias CIA1_IMODB_MASK 96  ; Timer B Timer A tick source (bit mask)
.alias CIA2_TODEDIT_ADDR $DC0F  ; TOD alarm edit (address)
.alias CIA2_TODEDIT_MASK 128  ; TOD alarm edit (bit mask)
.alias CIA1_TALATCH $DC10  ; Timer A latch value (16 bit)
.alias GS_CIA1_TALATCH $DC11  ; Timer A latch value (16 bit)
.alias GS_CIA1_TALATCH_2 $DC12  ; Timer B latch value (16 bit)
.alias GS_CIA1_TALATCH_3 $DC13  ; Timer B latch value (16 bit)
.alias GS_CIA1_TALATCH_4 $DC14  ; Timer A current value (16 bit)
.alias GS_CIA1_TALATCH_5 $DC15  ; Timer A current value (16 bit)
.alias GS_CIA1_TALATCH_6 $DC16  ; Timer B current value (16 bit)
.alias GS_CIA1_TALATCH_7 $DC17  ; Timer B current value (16 bit)
.alias GS_CIA1_TODJIF_ADDR $DC18  ; TOD 10ths of seconds value (address)
.alias GS_CIA1_TODJIF_MASK 15  ; TOD 10ths of seconds value (bit mask)
.alias CIA1_IMTB_ADDR $DC18  ; Interrupt mask for Timer B (address)
.alias CIA1_IMTB_MASK 16  ; Interrupt mask for Timer B (bit mask)
.alias CIA1_IMALRM_ADDR $DC18  ; Interrupt mask for TOD alarm (address)
.alias CIA1_IMALRM_MASK 32  ; Interrupt mask for TOD alarm (bit mask)
.alias CIA1_IMSP_ADDR $DC18  ; Interrupt mask for shift register (serial port) (address)
.alias CIA1_IMSP_MASK 64  ; Interrupt mask for shift register (serial port) (bit mask)
.alias CIA1_IMFLG_ADDR $DC18  ; Interrupt mask for FLAG line (address)
.alias CIA1_IMFLG_MASK 128  ; Interrupt mask for FLAG line (bit mask)
.alias CIA1_TODSEC $DC19  ; TOD Alarm seconds value
.alias CIA1_TODMIN $DC1A  ; TOD Alarm minutes value
.alias GS_CIA1_TODHOUR_ADDR $DC1B  ; TOD hours value (address)
.alias GS_CIA1_TODHOUR_MASK 127  ; TOD hours value (bit mask)
.alias GS_CIA1_TODAMPM_ADDR $DC1B  ; TOD AM/PM flag (address)
.alias GS_CIA1_TODAMPM_MASK 128  ; TOD AM/PM flag (bit mask)
.alias CIA1_ALRMJIF $DC1C  ; TOD Alarm 10ths of seconds value
.alias CIA1_ALRMSEC $DC1D  ; TOD Alarm seconds value
.alias CIA1_ALRMMIN $DC1E  ; TOD Alarm minutes value
.alias CIA1_ALRMHOUR_ADDR $DC1F  ; TOD Alarm hours value (address)
.alias CIA1_ALRMHOUR_MASK 127  ; TOD Alarm hours value (bit mask)
.alias CIA1_ALRMAMPM_ADDR $DC1F  ; TOD Alarm AM/PM flag (address)
.alias CIA1_ALRMAMPM_MASK 128  ; TOD Alarm AM/PM flag (bit mask)
.alias CIA2_PORTA $DD00  ; Port A
.alias CIA2_PORTB $DD01  ; Port B
.alias CIA2_DDRA $DD02  ; Port A DDR
.alias CIA2_DDRB $DD03  ; Port B DDR
.alias CIA2_TIMERA $DD04  ; Timer A counter (16 bit)
.alias C64_CIA2_TIMERA $DD05  ; Timer A counter (16 bit)
.alias CIA2_TIMERB $DD06  ; Timer B counter (16 bit)
.alias C64_CIA2_TIMERB $DD07  ; Timer B counter (16 bit)
.alias CIA2_TODJIF_ADDR $DD08  ; TOD tenths of seconds (address)
.alias CIA2_TODJIF_MASK 15  ; TOD tenths of seconds (bit mask)
.alias CIA2_TODSEC_ADDR $DD09  ; TOD seconds (address)
.alias CIA2_TODSEC_MASK 63  ; TOD seconds (bit mask)
.alias CIA2_TODHOUR_ADDR $DD0B  ; TOD hours (address)
.alias CIA2_TODHOUR_MASK 31  ; TOD hours (bit mask)
.alias CIA2_TODAMPM_ADDR $DD0B  ; TOD PM flag (address)
.alias CIA2_TODAMPM_MASK 128  ; TOD PM flag (bit mask)
.alias CIA2_SDR $DD0C  ; shift register data register(writing starts sending)
.alias CIA2_TA_ADDR $DD0D  ; Timer A underflow (address)
.alias CIA2_TA_MASK 1  ; Timer A underflow (bit mask)
.alias CIA2_TB_ADDR $DD0D  ; Timer B underflow (address)
.alias CIA2_TB_MASK 2  ; Timer B underflow (bit mask)
.alias CIA2_ALRM_ADDR $DD0D  ; TOD alarm (address)
.alias CIA2_ALRM_MASK 4  ; TOD alarm (bit mask)
.alias CIA2_SP_ADDR $DD0D  ; shift register full/empty (address)
.alias CIA2_SP_MASK 8  ; shift register full/empty (bit mask)
.alias CIA2_FLG_ADDR $DD0D  ; FLAG edge detected (address)
.alias CIA2_FLG_MASK 16  ; FLAG edge detected (bit mask)
.alias CIA2_STRTA_ADDR $DD0E  ; Timer A start (address)
.alias CIA2_STRTA_MASK 1  ; Timer A start (bit mask)
.alias CIA2_PBONA_ADDR $DD0E  ; Timer A PB6 out (address)
.alias CIA2_PBONA_MASK 2  ; Timer A PB6 out (bit mask)
.alias CIA2_OMODA_ADDR $DD0E  ; Timer A toggle or pulse (address)
.alias CIA2_OMODA_MASK 4  ; Timer A toggle or pulse (bit mask)
.alias CIA2_RMODA_ADDR $DD0E  ; Timer A one-shot mode (address)
.alias CIA2_RMODA_MASK 8  ; Timer A one-shot mode (bit mask)
.alias CIA2_IMODA_ADDR $DD0E  ; Timer A Timer A tick source (address)
.alias CIA2_IMODA_MASK 32  ; Timer A Timer A tick source (bit mask)
.alias CIA2_SPMOD_ADDR $DD0E  ; Serial port direction (address)
.alias CIA2_SPMOD_MASK 64  ; Serial port direction (bit mask)
.alias CIA2_TOD50_ADDR $DD0E  ; 50/60Hz select for TOD clock (address)
.alias CIA2_TOD50_MASK 128  ; 50/60Hz select for TOD clock (bit mask)
.alias CIA2_STRTB_ADDR $DD0F  ; Timer B start (address)
.alias CIA2_STRTB_MASK 1  ; Timer B start (bit mask)
.alias CIA2_PBONB_ADDR $DD0F  ; Timer B PB7 out (address)
.alias CIA2_PBONB_MASK 2  ; Timer B PB7 out (bit mask)
.alias CIA2_OMODB_ADDR $DD0F  ; Timer B toggle or pulse (address)
.alias CIA2_OMODB_MASK 4  ; Timer B toggle or pulse (bit mask)
.alias CIA2_RMODB_ADDR $DD0F  ; Timer B one-shot mode (address)
.alias CIA2_RMODB_MASK 8  ; Timer B one-shot mode (bit mask)
.alias CIA2_LOAD_ADDR $DD0F  ; Strobe input to force-load timers (address)
.alias CIA2_LOAD_MASK 16  ; Strobe input to force-load timers (bit mask)
.alias CIA2_IMODB_ADDR $DD0F  ; Timer B Timer A tick source (address)
.alias CIA2_IMODB_MASK 96  ; Timer B Timer A tick source (bit mask)
.alias C64_CIA2_TODEDIT_ADDR $DD0F  ; TOD alarm edit (address)
.alias C64_CIA2_TODEDIT_MASK 128  ; TOD alarm edit (bit mask)
.alias CIA2_TALATCH $DD10  ; Timer A latch value (16 bit)
.alias GS_CIA2_TALATCH $DD11  ; Timer A latch value (16 bit)
.alias GS_CIA2_TALATCH_2 $DD12  ; Timer B latch value (16 bit)
.alias GS_CIA2_TALATCH_3 $DD13  ; Timer B latch value (16 bit)
.alias GS_CIA2_TALATCH_4 $DD14  ; Timer A current value (16 bit)
.alias GS_CIA2_TALATCH_5 $DD15  ; Timer A current value (16 bit)
.alias GS_CIA2_TALATCH_6 $DD16  ; Timer B current value (16 bit)
.alias GS_CIA2_TALATCH_7 $DD17  ; Timer B current value (16 bit)
.alias GS_CIA2_TODJIF_ADDR $DD18  ; TOD 10ths of seconds value (address)
.alias GS_CIA2_TODJIF_MASK 15  ; TOD 10ths of seconds value (bit mask)
.alias CIA2_IMTB_ADDR $DD18  ; Interrupt mask for Timer B (address)
.alias CIA2_IMTB_MASK 16  ; Interrupt mask for Timer B (bit mask)
.alias CIA2_IMALRM_ADDR $DD18  ; Interrupt mask for TOD alarm (address)
.alias CIA2_IMALRM_MASK 32  ; Interrupt mask for TOD alarm (bit mask)
.alias CIA2_IMSP_ADDR $DD18  ; Interrupt mask for shift register (serial port) (address)
.alias CIA2_IMSP_MASK 64  ; Interrupt mask for shift register (serial port) (bit mask)
.alias CIA2_IMFLG_ADDR $DD18  ; Interrupt mask for FLAG line (address)
.alias CIA2_IMFLG_MASK 128  ; Interrupt mask for FLAG line (bit mask)
.alias CIA2_TODSEC $DD19  ; TOD Alarm seconds value
.alias CIA2_TODMIN $DD1A  ; TOD Alarm minutes value
.alias GS_CIA2_TODHOUR_ADDR $DD1B  ; TOD hours value (address)
.alias GS_CIA2_TODHOUR_MASK 127  ; TOD hours value (bit mask)
.alias GS_CIA2_TODAMPM_ADDR $DD1B  ; TOD AM/PM flag (address)
.alias GS_CIA2_TODAMPM_MASK 128  ; TOD AM/PM flag (bit mask)
.alias CIA2_ALRMJIF $DD1C  ; TOD Alarm 10ths of seconds value
.alias CIA2_DD00DELAY_ADDR $DD1C  ; Enable delaying writes to $DD00 by 3 cycles to match real 6502 timing (address)
.alias DD00DELAY_ADDR $DD1C  ; Enable delaying writes to $DD00 by 3 cycles to match real 6502 timing (address)
.alias CIA2_DD00DELAY_MASK 128  ; Enable delaying writes to $DD00 by 3 cycles to match real 6502 timing (bit mask)
.alias DD00DELAY_MASK 128  ; Enable delaying writes to $DD00 by 3 cycles to match real 6502 timing (bit mask)
.alias CIA2_ALRMSEC $DD1D  ; TOD Alarm seconds value
.alias CIA2_ALRMMIN $DD1E  ; TOD Alarm minutes value
.alias CIA2_ALRMHOUR_ADDR $DD1F  ; TOD Alarm hours value (address)
.alias CIA2_ALRMHOUR_MASK 127  ; TOD Alarm hours value (bit mask)
.alias CIA2_ALRMAMPM_ADDR $DD1F  ; TOD Alarm AM/PM flag (address)
.alias CIA2_ALRMAMPM_MASK 128  ; TOD Alarm AM/PM flag (bit mask)
.alias ETHCOMMAND_RXONLYONE $DE  ; Receive exactly one ethernet frame only, and keep all signals states (for debugging ethernet sub-system)
.alias RXONLYONE $DE  ; Receive exactly one ethernet frame only, and keep all signals states (for debugging ethernet sub-system)
.alias ETHCOMMAND_FRAME1K $F1  ; Select ~1KiB frames for video/cpu debug stream frames (for receivers that do not support MTUs of greater than 2KiB)
.alias FRAME1K $F1  ; Select ~1KiB frames for video/cpu debug stream frames (for receivers that do not support MTUs of greater than 2KiB)
.alias ETHCOMMAND_FRAME2K $F2  ; Select ~2KiB frames for video/cpu debug stream frames, for optimal performance.
.alias FRAME2K $F2  ; Select ~2KiB frames for video/cpu debug stream frames, for optimal performance.
.alias SUMMARY_CHARWRITE $FF7E000  ; VIC-IV CHARROM write area
.alias CHARWRITE $FF7E000  ; VIC-IV CHARROM write area
.alias SUMMARY_COLOURRAM $FF80000  ; Colour RAM (32KB or 64KB)
.alias COLOURRAM $FF80000  ; Colour RAM (32KB or 64KB)
.alias RTC_RTCSEC $FFD7110  ; Real-time Clock seconds value (binary coded decimal)
.alias RTCSEC $FFD7110  ; Real-time Clock seconds value (binary coded decimal)
.alias RTC_RTC $FFD7110  ; Real-time Clock
.alias RTC $FFD7110  ; Real-time Clock
.alias RTC_RTCMIN $FFD7111  ; Real-time Clock minutes value (binary coded decimal)
.alias RTCMIN $FFD7111  ; Real-time Clock minutes value (binary coded decimal)
.alias RTC_RTCHOUR $FFD7112  ; Real-time Clock hours value (binary coded decimal)
.alias RTCHOUR $FFD7112  ; Real-time Clock hours value (binary coded decimal)
.alias RTC_RTCDAY $FFD7113  ; Real-time Clock day of month value (binary coded decimal)
.alias RTCDAY $FFD7113  ; Real-time Clock day of month value (binary coded decimal)
.alias RTC_RTCMONTH $FFD7114  ; Real-time Clock month value (binary coded decimal)
.alias RTCMONTH $FFD7114  ; Real-time Clock month value (binary coded decimal)
.alias RTC_RTCYEAR $FFD7115  ; Real-time Clock year value (binary coded decimal)
.alias RTCYEAR $FFD7115  ; Real-time Clock year value (binary coded decimal)
.alias RTC_NVRAM $FFD7140  ; 64-bytes of non-volatile RAM. Can be used for storing machine configuration.
.alias NVRAM $FFD7140  ; 64-bytes of non-volatile RAM. Can be used for storing machine configuration.
.alias SUMMARY_HYPERVISOR $FFF8000  ; 16KB Hyppo/Hypervisor ROM
.alias HYPERVISOR $FFF8000  ; 16KB Hyppo/Hypervisor ROM
